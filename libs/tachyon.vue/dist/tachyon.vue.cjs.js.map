{"version":3,"file":"tachyon.vue.cjs.js","sources":["../../tachyon-core/dist/tachyon.esm.js","../src/util/useRender.ts","../src/util/native.ts","../src/util/componentWrapper.ts","../src/util/useItemFactory.ts","../src/util/getColumnSlots.ts","../src/util/useModel.ts","../src/util/debounce.ts","../src/util/useColumnRender.ts","../src/util/equal.ts","../src/components/TachyonGridItemEditor.ts","../src/components/TachyonColumn.ts","../src/components/TachyonGridItemRenderer.ts","../src/components/TachyonGrid.ts","../src/components/TachyonTreeGrid.ts","../src/components/TachyonTreeGridItemRenderer.ts","../src/components/TachyonTreeColumn.ts","../src/index.ts"],"sourcesContent":["/*!\n * tachyon.js v1.1.2\n */\nfunction mixin(...args) {\n    const target = args[0];\n    let end = args.length;\n    let override = true;\n    if (typeof args[end - 1] === 'boolean') {\n        override = args[end - 1];\n        end -= 1;\n    }\n\n    for (let i = 1; i < end; i++) {\n        let source = args[i];\n        let names = Object.getOwnPropertyNames(source);\n        names.forEach((name) => {\n            if ((override || !target.hasOwnProperty(name))) {\n                Object.defineProperty(target, name, Object.getOwnPropertyDescriptor(source, name));\n            }\n        });\n    }\n\n    return target;\n}\n\nfunction callHook(target, name, ...args) {\n    if (name in target) {\n        return target[name].apply(target, args);\n    }\n}\n\nfunction callValue(value, ...args) {\n    if (value instanceof Function) {\n        return value.apply(null, args);\n    }\n    return value;\n}\n\nfunction clampValue(value, min, max) {\n    if (!isNaN(min)) {\n        value = Math.max(value, min);\n    }\n    if (!isNaN(max)) {\n        value = Math.min(value, max);\n    }\n    return value;\n}\n\nconst internalParsePath = cacheFunction((value) => {\n    return value && ((value.indexOf('.') !== -1 && value.split('.')) || [value]);\n});\n\nfunction parsePath(path) {\n    if (Array.isArray(path)) ; else {\n        const type = typeof path;\n        switch (type) {\n            case 'number':\n                path += '';\n            case 'string':\n                path = internalParsePath(path);\n                break;\n            default: {\n                throw new TypeError(`path must be a Number/String/Array, received ${type} instead.`);\n            }\n        }\n    }\n    return path;\n}\n\n/**\n *\n * @param {Object} data\n * @param {Array, String} path\n * @returns {*}\n */\nfunction getValue(data, path) {\n    path = parsePath(path);\n    const num = path && path.length || 0;\n    let o = data;\n    for (let i = 0; i < num; i++) {\n        let field = path[i];\n        if (field in o) {\n            o = o[field];\n        } else {\n            return null;\n        }\n    }\n    return o;\n}\n\n/**\n *\n * @param data\n * @param path\n * @param value\n * @returns {boolean}\n */\nfunction setValue(data, path, value) {\n    path = parsePath(path);\n    const num = path && path.length || 0;\n    let o = data;\n    let i = 0;\n    for (; i < num - 1; i++) {\n        let field = path[i];\n        if (field in o) {\n            o = o[field];\n        } else {\n            //error\n            o = null;\n            break;\n        }\n    }\n\n    if (o && num > 0 && o[path[i]] !== value) {\n        o[path[i]] = value;\n        return true;\n    }\n    return false;\n}\n\nfunction getLeafNodes(node, childrenField = 'children') {\n    let leaves = [];\n    let children = node[childrenField];\n    let num = Array.isArray(children) && children.length || 0;\n    if (num > 0) {\n        for (let i = 0; i < num; i++) {\n            leaves = leaves.concat(getLeafNodes(children[i], childrenField));\n        }\n    } else {\n        leaves.push(node);\n    }\n    return leaves;\n}\n\nfunction cacheFunction(callback) {\n    let cache = {};\n    return (value) => {\n        let result = cache[value];\n        if (result === undefined) {\n            cache[value] = result = callback(value);\n        }\n        return result;\n    };\n}\n\nconst nextFrameOnce = (() => {\n    const hasMap = new WeakMap();\n    return (callback, args) => {\n        let frameId = hasMap.get(callback);\n        if (frameId) {\n            window.cancelAnimationFrame(frameId);\n            hasMap.delete(callback);\n        }\n        frameId = window.requestAnimationFrame(() => {\n            callback.apply(null, args);\n            hasMap.delete(callback);\n        });\n        hasMap.set(callback, frameId);\n    };\n})();\n\nvar defaultConfig = {\r\n\r\n    /*----------------------------\r\n     *  Styles\r\n     *----------------------------*/\r\n    styles: {\r\n        /**\r\n         * 배경 색.\r\n         */\r\n        backgroundColor: '#FFFFFF',\r\n        /**\r\n         * 기본 폰트\r\n         */\r\n        font: '14px Arial',\r\n\r\n        /**\r\n         * 기본 폰트 색\r\n         */\r\n        color: 'RGB(73,105,131)',\r\n\r\n        /**\r\n         * 셀 텍스트 정렬\r\n         */\r\n        textAlign: 'left',\r\n\r\n        /**\r\n         * 셀 수직 정렬\r\n         */\r\n        verticalAlign: 'center',\r\n\r\n        /**\r\n         * 기본 행 크기\r\n         */\r\n        rowHeight: 30,\r\n\r\n        /**\r\n         * 헤더 기본 행 크기\r\n         */\r\n        headerRowHeight: 30,\r\n\r\n        /**\r\n         * 셀 선택 배경색\r\n         */\r\n        cellSelectionColor: 'RGB(183,210,222)',\r\n\r\n        /**\r\n         * 셀 오버 배경색\r\n         */\r\n        cellOverColor: 'RGBA(215,237,247,0.5)',\r\n\r\n        /**\r\n         * 셀 선택 텍스트 색\r\n         */\r\n        textSelectionColor: 'RGB(73,105,131)',\r\n\r\n        /**\r\n         * 셀 오버 텍스트 색\r\n         */\r\n        textOverColor: 'RGB(73,105,131)',\r\n\r\n        /**\r\n         * 행 배경 색\r\n         */\r\n        rowColors: ['#F2F5F8'],\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        cellPadding: {\r\n            left: 3,\r\n            right: 3,\r\n            top: 2,\r\n            bottom: 2\r\n        },\r\n\r\n        /**\r\n         * 행 구분선\r\n         */\r\n        rowLine: {\r\n            width: 1,\r\n            color: '#B3B4B6',\r\n            dashed: []\r\n        },\r\n\r\n        /**\r\n         * 컬럼 구분선\r\n         */\r\n        columnLine: {\r\n            width: 1,\r\n            color: '#B3B4B6',\r\n            dashed: []\r\n        },\r\n\r\n        /**\r\n         * 고정 구분선\r\n         */\r\n        frozenLine: {\r\n            width: 1,\r\n            color: '#000000',\r\n            dashed: []\r\n        },\r\n\r\n        /**\r\n         * 캐럿\r\n         */\r\n        caretLine: {\r\n            width: 2,\r\n            color: 'RGB(52,102,124)',\r\n            dashed: []\r\n        },\r\n\r\n        /**\r\n         * 헤더 행 구분선\r\n         */\r\n        headerRowLine: {\r\n            width: 1,\r\n            color: 'RGBA(72,84,101, 0.7)',\r\n            dashed: []\r\n        },\r\n\r\n        /**\r\n         * 헤더 행 구분선\r\n         */\r\n        headerColumnLine: {\r\n            width: 1,\r\n            color: 'RGBA(72,84,101, 0.7)',\r\n            dashed: []\r\n        },\r\n    },\r\n\r\n    cacheMode: 'hidden',\r\n    editOnKeys: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"Â£$%^&*()_+-=[];\\'#,./\\|<>?:@~{} ',\r\n\r\n    /*----------------------------\r\n     *  itemRenderer\r\n     *----------------------------*/\r\n    itemRenderer: null,\r\n\r\n    /*----------------------------\r\n     *  headerRenderer\r\n     *----------------------------*/\r\n    headerRenderer: null,\r\n\r\n    /*----------------------------\r\n     *  itemEditor\r\n     *----------------------------*/\r\n    itemEditor: null,\r\n\r\n    /*----------------------------\r\n     *  treeItemRenderer\r\n     *----------------------------*/\r\n    treeItemRenderer: null,\r\n\r\n    /*----------------------------\r\n     *  groupingItemRenderer\r\n     *----------------------------*/\r\n    groupingItemRenderer: null,\r\n};\n\nconst Reason = {\n    //화면갱신\n    DISPLAY_UPDATE: 1 << 1,\n\n    //아이템 목록 변경\n    ITEMS_CHANGE: 1 << 2,\n    //컬럼 목록 변경\n    COLUMNS_CHANGE: 1 << 3,\n    //화면에 보이는 컬럼 변경\n    VISIBLE_COLUMNS_CHANGE: 1 << 4,\n\n    //아이템 갱신\n    ITEM_UPDATE: 1 << 5,\n    //컬럼 갱신\n    COLUMN_UPDATE: 1 << 6,\n    //컬럼 비지블 갱신\n    COLUMN_VISIBLE: 1 << 7,\n\n    //TODO change 보다 update ?????\n    //수직 스크롤 변경\n    VERTICAL_SCROLL_CHANGE: 1 << 8,\n    //스평 스크롤 변경\n    HORIZONTAL_SCROLL_CHANGE: 1 << 9,\n\n    //선택 변경\n    SELECTION_CHANGE: 1 << 10,\n    //캐럿 변경\n    CARET_CHANGE: 1 << 11,\n    //아이템 렌더러 변경\n    RENDERER_CHANGE: 1 << 12,\n\n    //스타일 변경\n    STYLES_CHANGE: 1 << 13,\n\n    ROW_HEIGHT_CHANGE: 1 << 14,\n\n    GROUP_SIZE_CHANGE: 1 << 15,\n\n    //전체 갱신\n    ALL: 0xFFFFFFFF\n};\n\n/**\r\n * Point 2차원 좌표계에서의 위치.\r\n * @param x\r\n * @param y\r\n * @constructor\r\n */\r\nclass Point {\r\n\r\n    /**\r\n     * 두점 사이의 거리를 구합니다.\r\n     * @param p1\r\n     * @param p2\r\n     * @returns {number}\r\n     */\r\n    static distance(p1, p2) {\r\n        return Math.sqrt(Math.pow((p1.x - p2.x), 2) + Math.pow((p1.y - p2.y), 2));\r\n    }\r\n\r\n    constructor(x, y) {\r\n        this.setValues(x, y);\r\n    }\r\n\r\n    get length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    /**\r\n     * x, y 좌표를 설정합니다.\r\n     * @param x\r\n     * @param y\r\n     * @returns {Point}\r\n     */\r\n    setValues(x, y) {\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 객체의 복사본을 만듭니다.\r\n     * @returns {Point}\r\n     */\r\n    clone() {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * x, y좌표를 문자열로 반환합니다.\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return '[Point (x=' + this.x + ' y=' + this.y + ')]';\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Rectangle (x,y)를 시작점으로 width, height 크기를 가진 영역.\r\n * @param x\r\n * @param y\r\n * @param width\r\n * @param height\r\n * @constructor\r\n */\r\nclass Rectangle {\r\n    constructor(x, y, width, height) {\r\n        this.setValues(x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * 사각형의 왼쪽 x 좌표 입니다.\r\n     * @returns {number}\r\n     */\r\n    get left() {\r\n        return this.x;\r\n    }\r\n\r\n    set left(v) {\r\n        this.width -= v - this.x;\r\n        this.x = v;\r\n    }\r\n\r\n    /**\r\n     * 사각형의 오른쪽 x 좌표 입니다.\r\n     * @returns {number}\r\n     */\r\n    get right() {\r\n        return this.x + this.width;\r\n    }\r\n\r\n    set right(v) {\r\n        this.width = v - this.x;\r\n    }\r\n\r\n    /**\r\n     * 사각형의 위쪽 y 좌표 입니다.\r\n     * @returns {number}\r\n     */\r\n    get top() {\r\n        return this.y;\r\n    }\r\n\r\n    set top(v) {\r\n        this.height -= v - this.y;\r\n        this.y = v;\r\n    }\r\n\r\n    /**\r\n     * 사각형의 아래쪽 y 좌표 입니다.\r\n     * @returns {number}\r\n     */\r\n    get bottom() {\r\n        return this.y + this.height;\r\n    }\r\n\r\n    set bottom(v) {\r\n        this.height = v - this.y;\r\n    }\r\n\r\n    /**\r\n     * x, y, width, height 속성을 설정합니다.\r\n     * @param x\r\n     * @param y\r\n     * @param width\r\n     * @param height\r\n     * @returns {Rectangle}\r\n     */\r\n    setValues(x, y, width, height) {\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n        this.width = width || 0;\r\n        this.height = height || 0;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *  지정된 rect이 자신의 영역과 같은지 여부입니다.\r\n     * @param rect\r\n     * @returns {boolean}\r\n     */\r\n    equals(rect) {\r\n        return (rect && rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height);\r\n    }\r\n\r\n    extend(x, y, width, height) {\r\n        width = width || 0;\r\n        height = height || 0;\r\n        if (x + width > this.x + this.width) {\r\n            this.width = x + width - this.x;\r\n        }\r\n        if (y + height > this.y + this.height) {\r\n            this.height = y + height - this.y;\r\n        }\r\n        if (x < this.x) {\r\n            this.width += this.x - x;\r\n            this.x = x;\r\n        }\r\n        if (y < this.y) {\r\n            this.height += this.y - y;\r\n            this.y = y;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 지정된 영역이 자신영역 내에 포함되는지 여부입니다.\r\n     * @param x\r\n     * @param y\r\n     * @param width\r\n     * @param height\r\n     * @returns {boolean}\r\n     */\r\n    contains(x, y, width, height) {\r\n        width = width || 0;\r\n        height = height || 0;\r\n        return (x >= this.x && x + width <= this.x + this.width && y >= this.y && y + height <= this.y + this.height);\r\n    }\r\n\r\n    /**\r\n     * 지정된 rect이 자신 영역 내에 포함되는지 여부입니다.\r\n     * @param rect\r\n     * @returns {boolean}\r\n     */\r\n    containsRect(rect) {\r\n        if (!rect) {\r\n            return false;\r\n        }\r\n        return this.contains(rect.x, rect.y, rect.width, rect.height);\r\n    }\r\n\r\n    /**\r\n     * 지정된 rect과 결합하여 새로운 사각형을 반환합니다.\r\n     * @param rect\r\n     * @returns {Rectangle}\r\n     */\r\n    union(rect) {\r\n        return this.clone().extend(rect.x, rect.y, rect.width, rect.height);\r\n    }\r\n\r\n    /**\r\n     * 지정된 rect이 자신과 교차 새로운 사각형을 반환합니다.\r\n     * @param rect\r\n     * @returns {boolean}\r\n     */\r\n    intersection(rect) {\r\n        var x1 = rect.x, y1 = rect.y, x2 = x1 + rect.width, y2 = y1 + rect.height;\r\n        if (this.x > x1) {\r\n            x1 = this.x;\r\n        }\r\n        if (this.y > y1) {\r\n            y1 = this.y;\r\n        }\r\n        if (this.x + this.width < x2) {\r\n            x2 = this.x + this.width;\r\n        }\r\n        if (this.y + this.height < y2) {\r\n            y2 = this.y + this.height;\r\n        }\r\n        return (x2 <= x1 || y2 <= y1) ? null : new Rectangle(x1, y1, x2 - x1, y2 - y1);\r\n    }\r\n\r\n    /**\r\n     * 지정된 rect이 자신과 교차하는지 여부입니다.\r\n     * @param rect\r\n     * @returns {boolean}\r\n     */\r\n    intersects(rect) {\r\n        return (rect.x <= this.x + this.width && this.x <= rect.x + rect.width && rect.y <= this.y + this.height && this.y <= rect.y + rect.height);\r\n    }\r\n\r\n    /**\r\n     * 모든 속성을 0으로 설정합니다.\r\n     */\r\n    setEmpty() {\r\n        this.setValues(0, 0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * 객체 영역이 비어있는지 여부입니다.\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return this.width <= 0 || this.height <= 0;\r\n    }\r\n\r\n    /**\r\n     * 객체의 복사본을 만듭니다.\r\n     * @returns {Rectangle}\r\n     */\r\n    clone() {\r\n        return new Rectangle(this.x, this.y, this.width, this.height);\r\n    }\r\n\r\n    toString() {\r\n        return '[Rectangle (x=' + this.x + ' y=' + this.y + ' width=' + this.width + ' height=' + this.height + ')]';\r\n    }\r\n}\n\n/**\n * 해당 html를 HTMLTemplateElement 형태로 변경합니다.\n * 최상위 루트는 하나만 가능합니다.\n * @param html\n * @returns {DocumentFragment}\n */\nfunction buildTemplate(html) {\n    let fragment, template;\n    if (typeof HTMLTemplateElement === 'undefined') {\n        template = document.createElement('div');\n        template.innerHTML = html;\n        fragment = document.createDocumentFragment();\n        fragment.appendChild(template.firstChild);\n    } else {\n        template = document.createElement('template');\n        template.innerHTML = html;\n        fragment = template.content;\n    }\n    return fragment;\n}\n\n/**\n * 해당 node를 전체 탐색합니다.\n * @param node\n * @param callback\n * @returns {number}\n * @private\n */\nfunction searchNode(node, callback) {\n    let count = 0;\n    const search = (node, callback) => {\n        if (node) {\n            callback(node, count++);\n            let child = node.firstChild;\n            while (child) {\n                search(child, callback);\n                child = child.nextSibling;\n            }\n        }\n    };\n    search(node, callback);\n    return count;\n}\n\n/**\n * 해당 노드를 탐색하여 인스턴스화 되었을 때 접근를 위한 어노테이션을 생성합니다.\n * 정의된 속성은 'id'(아이디), 'on-'(이벤트)입니다.\n * @param node\n * @returns {[]}\n */\nfunction parseAnnotations(node) {\n    const annotations = [];\n    searchNode(node, (node, index) => {\n        if (node.attributes) {\n            let attributes = Array.prototype.slice.call(node.attributes);\n            let id = null;\n            let events = [];\n            attributes.forEach(attribute => {\n                const name = attribute.name;\n                const value = attribute.value;\n                if (name === 'id' && value) {\n                    id = value;\n                } else if (name.slice(0, 3) === 'on-' && value) {\n                    node.removeAttribute(name);\n                    events.push({\n                        name: name.slice(3),\n                        value: value\n                    });\n                }\n            });\n\n            if (id || events.length > 0) {\n                annotations[index] = {\n                    id: id,\n                    events: events\n                };\n            }\n        }\n    });\n    return annotations;\n}\n\nfunction mountDomTemplate(target) {\n    const template = target.constructor.__template__;\n    const annotations = target.constructor.__annotations__;\n\n    if (!template) {\n        return;\n    }\n\n    const node = document.importNode(template, true);\n    const element = node && node.querySelector('*') || null;\n    const domMaps = {};\n\n    searchNode(node, (node, index) => {\n        const annotation = annotations[index];\n        const id = annotation && annotation.id;\n        const events = annotation && annotation.events;\n\n        if (id) {\n            domMaps[id] = node;\n            domMaps[id].removeAttribute('id');\n        }\n\n        if (events) {\n            const boundHandler = {};\n            events.forEach(event => {\n                const type = event.name;\n                const handlerName = event.value;\n                if (target[handlerName] instanceof Function) {\n                    let handler = boundHandler[handlerName];\n                    if (!handler) {\n                        handler = boundHandler[handlerName] = target[handlerName].bind(target);\n                    }\n                    node.addEventListener(type, handler);\n                } else {\n                    console.warn(node.localName + ':' + type, 'listener method `' + event.value + '` not defined', node);\n                }\n            });\n        }\n    });\n\n    target.DOM = domMaps;\n    target.root = element;\n    target.root.__instance__ = target;\n}\n\n\nclass Base {\n    static withDom(html) {\n        if (html) {\n            const template = buildTemplate(html);\n            const annotations = parseAnnotations(template);\n            mixin(this, {\n                get __template__() {\n                    return template;\n                },\n                get __annotations__() {\n                    return annotations;\n                }\n            });\n        }\n        return this;\n    }\n\n    static withBehavior(...behaviors) {\n\n        //constructor override 되지 않음\n        mixin.apply(null, [this.prototype, ...behaviors, false]);\n        const temp = this.__behaviors__ || [];\n        mixin(this, {\n            get __behaviors__() {\n                return temp.concat(behaviors);\n            }\n        });\n        return this;\n    }\n\n    constructor() {\n        mountDomTemplate(this);\n        (this.constructor.__behaviors__ || []).forEach(behavior => {\n            if (behavior.constructor instanceof Function) {\n                behavior.constructor.call(this);\n            }\n        });\n    }\n\n    get htmlElement() {\n        return this.root;\n    }\n}\n\nfunction setPosition(element, x, y) {\r\n    if (element.__x !== x || element.__y !== y) {\r\n        element.__x = x;\r\n        element.__y = y;\r\n\r\n        const style = element.style;\r\n        style.left = x + 'px';\r\n        style.top = y + 'px';\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n\r\nfunction setSize(element, w, h) {\r\n    if (element.__width !== w || element.__height !== h) {\r\n        element.__width = w;\r\n        element.__height = h;\r\n\r\n        const style = element.style;\r\n        style.width = typeof w === 'number' ? w + 'px' : w;\r\n        style.height = typeof h === 'number' ? h + 'px' : h;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nfunction setLayout(element, x, y, w, h) {\r\n    let sizeFlag = setSize(element, w, h);\r\n    let positionFlag = setPosition(element, x, y);\r\n    return positionFlag || sizeFlag;\r\n}\r\n\r\nfunction setTranslate(element, x, y) {\r\n    if (element.__x !== x || element.__y !== y) {\r\n        const style = element.style;\r\n        style.transform = style.webkitTransform = 'translate(' + x + 'px,' + y + 'px)';\r\n        element.__x = x;\r\n        element.__y = y;\r\n    }\r\n}\r\n\r\nfunction addClass(element, className) {\r\n    const classList = element.classList;\r\n    if (classList && !classList.contains(className)) {\r\n        classList.add(className);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction removeClass(element, className) {\r\n    const classList = element.classList;\r\n    if (classList && classList.contains(className)) {\r\n        classList.remove(className);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isEditableNode(node) {\r\n    if (node instanceof Node) {\r\n        const name = node.nodeName.toLowerCase();\r\n        return (node.nodeType === 1 && (name === 'textarea' || (name === 'input' && /^(?:text|email|number|search|tel|url|password)$/i.test(node.type)))) || node.isContentEditable;\r\n    }\r\n    return false;\r\n}\n\nlet Element$1 = class Element extends Base {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get childContainer() {\r\n        return this.htmlElement;\r\n    }\r\n\r\n    get style() {\r\n        return this.htmlElement.style;\r\n    }\r\n\r\n    get clientWidth() {\r\n        return this.htmlElement.clientWidth;\r\n    }\r\n\r\n    get clientHeight() {\r\n        return this.htmlElement.clientHeight;\r\n    }\r\n\r\n    get childElementCount() {\r\n        return this.childContainer.childElementCount;\r\n    }\r\n\r\n    /**\r\n     * 컨테이너에 child 추가.\r\n     * @param child\r\n     */\r\n    appendChild(child) {\r\n        if (child instanceof Element) {\r\n            child = child.htmlElement;\r\n        }\r\n        return this.childContainer.appendChild(child);\r\n    }\r\n\r\n    /**\r\n     * 컨테이너에 child 삭제\r\n     * @param child\r\n     * @returns {*|Node}\r\n     */\r\n    removeChild(child) {\r\n        if (child instanceof Element) {\r\n            child = child.htmlElement;\r\n        }\r\n\r\n        if (child instanceof HTMLElement && child.parentElement) {\r\n            child.parentElement.removeChild(child);\r\n        }\r\n\r\n        return child;\r\n    }\r\n\r\n    setChildIndex(child, newIndex) {\r\n        if (child instanceof Element) {\r\n            child = child.htmlElement;\r\n        }\r\n        const parent = this.childContainer;\r\n        const children = parent.children;\r\n        const index = Array.prototype.indexOf.call(children, child);\r\n        if (newIndex === index) {\r\n            return false;\r\n        }\r\n        if (index < newIndex) {\r\n            newIndex += 1;\r\n        }\r\n        parent.insertBefore(child, children[newIndex]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * x, y만큼 위치를 변경합니다.\r\n     * @param x\r\n     * @param y\r\n     */\r\n    setPosition(x, y) {\r\n        return setPosition(this.childContainer, x, y);\r\n    }\r\n\r\n    /**\r\n     * 너비와 높이 크기를 변경합니다.\r\n     * @param width\r\n     * @param height\r\n     */\r\n    setSize(width, height) {\r\n        return setSize(this.childContainer, width, height);\r\n    }\r\n\r\n    setLayout(x, y, width, height) {\r\n        let positionFlag = this.setPosition(x, y);\r\n        let sizeFlag = this.setSize(width, height);\r\n        return positionFlag || sizeFlag;\r\n    }\r\n\r\n    addEventListener(type, listener, useCapture) {\r\n        this.htmlElement.addEventListener.apply(this.htmlElement, arguments);\r\n    }\r\n\r\n    removeEventListener(type, listener, useCapture) {\r\n        this.htmlElement.removeEventListener.apply(this.htmlElement, arguments);\r\n    }\r\n\r\n    dispatchEvent(event) {\r\n        return this.htmlElement.dispatchEvent.apply(this.htmlElement, arguments);\r\n    }\r\n};\n\nfunction numericCompare(a, b) {\n    if (isNaN(a) && isNaN(b))\n        return 0;\n\n    if (isNaN(a))\n        return 1;\n\n    if (isNaN(b))\n        return -1;\n\n    if (a < b) {\n        return -1;\n    }\n\n    if (a > b) {\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction stringCompare(a, b, caseInsensitive) {\n    if (a == null && b == null)\n        return 0;\n    if (a == null)\n        return 1;\n\n    if (b == null)\n        return -1;\n\n    if (caseInsensitive) {\n        a = a.toLowerCase();\n        b = b.toLowerCase();\n    }\n\n    if (a < b) {\n        return -1;\n    }\n\n    if (a > b) {\n        return 1;\n    }\n\n    return 0;\n}\n\n/**\n * clipboard 접근하기 위한 임시 Textarea 생성합니다.\n * @returns {HTMLTextAreaElement}\n * @private\n */\nfunction createFakeTextarea() {\n    let element = document.createElement('textarea'),\n        style = element.style;\n    element.onkeydown = (event) => {\n        event.preventDefault();\n    };\n    style.position = 'absolute';\n    style.left = style.top = '-9999px';\n    style.opacity = '0';\n    return element;\n}\n\n/**\n * 클립보드에 해당 value 복사합니다.\n * @param value\n * @returns {Promise<unknown>}\n */\nfunction copy(value) {\n    let focusedElement = document.activeElement,\n        fakeElement = createFakeTextarea();\n    document.body.appendChild(fakeElement);\n    fakeElement.value = value;\n    fakeElement.select();\n    fakeElement.offsetWidth;\n\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            document.body.removeChild(fakeElement);\n            focusedElement.focus();\n            resolve(value);\n        }, 100);\n    });\n}\n\n/**\n * 클립보드 데이타를 반환합니다.\n * @returns {Promise<unknown>}\n */\nfunction paste() {\n\n/*\n    if (navigator.clipboard && navigator.clipboard.readText) {\n        return navigator.clipboard.readText();\n    } else if (window.clipboardData) {\n        return Promise.resolve(window.clipboardData.getData('Text'))\n    }\n  */\n\n    const focusedElement = document.activeElement;\n    const fakeElement = createFakeTextarea();\n    document.body.appendChild(fakeElement);\n    fakeElement.select();\n    fakeElement.offsetWidth;\n    return new Promise(resolve => {\n        setTimeout(() => {\n            const value = fakeElement.value;\n            document.body.removeChild(fakeElement);\n            focusedElement.focus();\n            resolve(value);\n        }, 100);\n    });\n}\n\nconst ROW_TOKEN = '\\n';\nconst COLUMN_TOKEN = '\\t';\n\n/**\n *\n * @param grid\n * @param cell\n * @returns {string}\n */\nfunction toTable(grid, cell) {\n    const dataGroup = grid.dataGroup;\n    const collection = grid.collection;\n\n    let columns;\n    if (dataGroup.isCellSelectionMode) {\n        columns = dataGroup.normalizedColumns.slice(cell.columnIndex, cell.endColumnIndex + 1);\n    } else {\n        columns = dataGroup.normalizedColumns;\n    }\n\n    columns = columns.filter(c => c.visible);\n\n    let rows = [];\n    for (let i = cell.rowIndex, numColumns = columns.length; i <= cell.endRowIndex; i++) {\n        let item = collection.get(i);\n        let row = [];\n        for (let j = 0; j < numColumns; j++) {\n            row[j] = dataGroup.itemToLabel(item, columns[j]);\n        }\n        rows.push(row);\n    }\n\n    let result = rows.reduce((cur, next) => {\n        cur += next.join(COLUMN_TOKEN) + ROW_TOKEN;\n        return cur;\n    }, '');\n\n    return result.substr(0, result.length - ROW_TOKEN.length);\n}\n\n/**\n * 행은 'enter' 컬럼은 'tab'으로 구분된 텍스트 행과 컬럼을 배열 형태로 변경 반환합니다.\n * @param text\n * @returns {[]}\n */\nfunction parseFromExcel(text) {\n\n    let textRows = text.split(ROW_TOKEN);\n    let numRows = textRows.length;\n\n    let rows = [];\n    for (let i = 0; i < numRows; i++) {\n        rows[i] = textRows[i].split(COLUMN_TOKEN);\n    }\n    if (numRows > 0 && rows[numRows - 1].length === 1 && !rows[numRows - 1][0]) {\n        rows.pop();\n    }\n\n    return rows;\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\n/***\n   Copyright 2013 Teun Duynstee\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nvar thenBy_module = (function() {\n\n    function identity(v){return v;}\n\n    function ignoreCase(v){return typeof(v)===\"string\" ? v.toLowerCase() : v;}\n\n    function makeCompareFunction(f, opt){\n        opt = typeof(opt)===\"object\" ? opt : {direction:opt};\n        \n        if(typeof(f)!=\"function\"){\n            var prop = f;\n            // make unary function\n            f = function(v1){return !!v1[prop] ? v1[prop] : \"\";};\n        }\n        if(f.length === 1) {\n            // f is a unary function mapping a single item to its sort score\n            var uf = f;\n            var preprocess = opt.ignoreCase?ignoreCase:identity;\n            var cmp = opt.cmp || function(v1,v2) {return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;};\n            f = function(v1,v2) {return cmp(preprocess(uf(v1)), preprocess(uf(v2)));};\n        }\n        const descTokens = {\"-1\":'', desc:''};\n        if(opt.direction in descTokens) return function(v1,v2){return -f(v1,v2)};\n        return f;\n    }\n\n    /* adds a secondary compare function to the target function (`this` context)\n       which is applied in case the first one returns 0 (equal)\n       returns a new compare function, which has a `thenBy` method as well */\n    function tb(func, opt) {\n        /* should get value false for the first call. This can be done by calling the \n        exported function, or the firstBy property on it (for es6 module compatibility)\n        */\n        var x = (typeof(this) == \"function\" && !this.firstBy) ? this : false;\n        var y = makeCompareFunction(func, opt);\n        var f = x ? function(a, b) {\n                        return x(a,b) || y(a,b);\n                    }\n                  : y;\n        f.thenBy = tb;\n        return f;\n    }\n    tb.firstBy = tb;\n    return tb;\n})();\n\nvar thenBy = /*@__PURE__*/getDefaultExportFromCjs(thenBy_module);\n\nclass EventCounter {\n    constructor() {\n        this.count = 0;\n        if (arguments.length >= 2) {\n            this.startCallback = arguments[0];\n            this.endCallback = arguments[1];\n        } else if (arguments.length === 1) {\n            this.endCallback = arguments[0];\n        }\n    }\n\n    get counting() {\n        return this.count > 0;\n    }\n\n    start() {\n        let event = null;\n        if (this.count <= 0 && this.startCallback) {\n            event = this.startCallback.apply(null, arguments);\n        }\n        this.count++;\n        return event;\n    }\n\n    end() {\n        let event = null;\n        this.count--;\n        if (this.count <= 0 && this.endCallback) {\n            event = this.endCallback.apply(null, arguments);\n            this.count = 0;\n        }\n        return event;\n    }\n\n    cancel() {\n        this.count--;\n    }\n}\n\nclass IList extends EventTarget {\r\n    constructor() {\r\n        super();\r\n        this.collectionEventCounter = new EventCounter(this.dispatchCollectionEvent.bind(this));\r\n        this._source = null;\r\n        this._active = null;\r\n        this._sortFunction = null;\r\n        this._filterFunction = null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    get source() {\r\n        return this._source;\r\n    }\r\n\r\n    set source(v) {\r\n        if (this._source !== v) {\r\n            this._source = v;\r\n            this._reset();\r\n        }\r\n    }\r\n\r\n    get length() {\r\n        return this._active && this._active.length || 0;\r\n    }\r\n\r\n    get isEmpty() {\r\n        return this.length === 0;\r\n    }\r\n\r\n    get filterFunction() {\r\n        return this._filterFunction;\r\n    }\r\n\r\n    set filterFunction(v) {\r\n        if (this._filterFunction !== v) {\r\n            this._filterFunction = v;\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    get sortFunction() {\r\n        return this._sortFunction;\r\n    }\r\n\r\n    get localItems() {\r\n        return this._active || [];\r\n    }\r\n\r\n    get(index) {\r\n        if (index >= 0 && index < this.length) {\r\n            return this.localItems[index];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    indexOf(item, fromIndex) {\r\n        return this.localItems.indexOf(item, fromIndex);\r\n    }\r\n\r\n    lastIndexOf(item, fromIndex) {\r\n        return this.localItems.lastIndexOf(item, fromIndex);\r\n    }\r\n\r\n    contains(item) {\r\n        return this.indexOf(item) >= 0;\r\n    }\r\n\r\n    containsAll(items) {\r\n        const num = items && items.length || 0;\r\n        if (num <= 0) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < num; i++) {\r\n            if (!this.contains(items[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    setValue(index, property, value) {\r\n        return this._internalSetValue(this.get(index), property, value);\r\n    }\r\n\r\n    setItemValue(item, property, value) {\r\n        return this._internalSetValue(item, property, value);\r\n    }\r\n\r\n    sort(sortFields) {\r\n        let num = sortFields && sortFields.length || 0;\r\n        if (num > 0) {\r\n            let field = sortFields[0];\r\n            let func = thenBy(field.sortFunction, field.descending ? 0 : -1);\r\n\r\n            for (let i = 1; i < num; i++) {\r\n                field = sortFields[i];\r\n                func = func.thenBy(field.sortFunction, field.descending ? 0 : -1);\r\n            }\r\n            this._sortFunction = func;\r\n        } else {\r\n            this._sortFunction = null;\r\n        }\r\n    }\r\n\r\n    forEach(callback) {\r\n\r\n    }\r\n\r\n    /**\r\n     * 아이템 목록을 재갱신합니다.\r\n     */\r\n    refresh() {\r\n        this.collectionEventCounter.start();\r\n        this._internalRefresh();\r\n        this.collectionEventCounter.end('refresh');\r\n    }\r\n\r\n    clear() {\r\n        this.source = [];\r\n    }\r\n\r\n    toArray() {\r\n        return this.localItems.slice(0);\r\n    }\r\n\r\n    subList(fromIndex, toIndex) {\r\n        const items = this.localItems.slice(fromIndex, toIndex);\r\n        return new this.constructor(items);\r\n    }\r\n\r\n    _reset() {\r\n        this.collectionEventCounter.start();\r\n        this._internalRefresh();\r\n        this.collectionEventCounter.end('reset');\r\n    }\r\n\r\n    _internalSetValue(item, property, value) {\r\n        if (item && property != null) {\r\n            let oldValue = getValue(item, property);\r\n            if (value !== oldValue) {\r\n                this.collectionEventCounter.start();\r\n                setValue(item, property, value);\r\n                this.collectionEventCounter.end('update', {\r\n                    source: item,\r\n                    index: this.indexOf(item),\r\n                    property: property,\r\n                    newValue: value,\r\n                    oldValue: oldValue\r\n                });\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _internalRefresh() {\r\n    }\r\n\r\n    dispatchCollectionEvent(kind, item, index, oldIndex) {\r\n        const items = item && !Array.isArray(item) && [item] || item;\r\n        const detail = {\r\n            collection: this,\r\n            kind: kind\r\n        };\r\n\r\n        if (items != null) {\r\n            detail.items = items;\r\n        }\r\n\r\n        if (index != null) {\r\n            detail.index = index;\r\n        }\r\n\r\n        if (oldIndex != null) {\r\n            detail.oldIndex = oldIndex;\r\n        }\r\n\r\n        return this.dispatchEvent(new CustomEvent('collection-change', {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: detail\r\n        }));\r\n    }\r\n}\n\n/**\r\n * ArrayList 클래스는 데이터의 소스로 배열을 관리하는 IList를 구현합니다.\r\n * 내부 배열은 List 인터페이스의 메서드 및 속성을 사용하여 추가, 삭제, 변경 할 수 있습니다.\r\n */\r\nclass ArrayList extends IList {\r\n    constructor(source) {\r\n        super();\r\n        this.source = source || [];\r\n    }\r\n\r\n    /**\r\n     * 'source' 기준으로 콜백함수를 배열 요소 각각에 대해 실행합니다.\r\n     * @param callback\r\n     */\r\n    forEach(callback) {\r\n        (this.source || []).forEach((item, index, array) => {\r\n            callback(item, index, array);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 아이템을 맨끝 위치에 추가합니다.\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    add(item) {\r\n        return this.addAt(this.length, item);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스에 아이템을 추가합니다.\r\n     * @param index\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    addAt(index, item) {\r\n        if (index >= 0) {\r\n            if (index >= this.length) {\r\n                index = this.length;\r\n            }\r\n            this.collectionEventCounter.start();\r\n            if (this.source !== this._active) {\r\n                let sourceIndex = index;\r\n                let activeIndex = 0;\r\n                //원본 배열에 추가시\r\n                //1.정렬 되어 있다면 마지막 인덱스에 추가.\r\n                if (this.sortFunction) {\r\n                    sourceIndex = this.source.length;\r\n                } else if (this.filterFunction) {\r\n                    if (sourceIndex >= this._active.length) {\r\n                        sourceIndex = this.source.length;\r\n                    } else {\r\n                        sourceIndex = this.source.indexOf(this._active[index]);\r\n                    }\r\n                }\r\n\r\n                this.source.splice(sourceIndex, 0, item);\r\n\r\n                //가공된 배열 추가시.\r\n                //1. 필터링 한후 정렬..\r\n                if (!this.filterFunction || this.filterFunction(item, index, this.source)) {\r\n                    if (this.sortFunction) {\r\n                        activeIndex = this._findInsertIndex(this._active, item);\r\n                    } else {\r\n                        let i = sourceIndex - 1;\r\n                        while (i >= 0) {\r\n                            let sItem = this.source[i];\r\n                            if (this.filterFunction(sItem, i, this.source)) {\r\n                                activeIndex = this._active.indexOf(sItem);\r\n                                if (activeIndex >= 0) {\r\n                                    activeIndex += 1;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            i--;\r\n                        }\r\n\r\n                        if (activeIndex < 0) {\r\n                            activeIndex = 0;\r\n                        }\r\n                    }\r\n                } else {\r\n                    activeIndex = -1;\r\n                }\r\n\r\n                if (activeIndex >= 0) {\r\n                    this._active.splice(activeIndex, 0, item);\r\n                }\r\n\r\n                index = activeIndex;\r\n            } else {\r\n                this._active.splice(index, 0, item);\r\n            }\r\n            this.collectionEventCounter.end('add', item, index);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 항목 목록을 맨끝 위치부터 추가합니다.\r\n     * @param items\r\n     */\r\n    addAll(items) {\r\n        this.addAllAt(this.length, items);\r\n    }\r\n\r\n    /**\r\n     * 항목 목록을 지정된 위치부터 추가합니다.\r\n     * @param index\r\n     * @param items\r\n     */\r\n    addAllAt(index, items) {\r\n        let numItems = items && items.length || 0;\r\n        if (numItems > 0 && index >= 0) {\r\n            this.collectionEventCounter.start();\r\n            for (let i = 0; i < numItems; i++) {\r\n                this.addAt(index + i, items[i]);\r\n            }\r\n            this.collectionEventCounter.end('add', items, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 아이템을 삭제합니다.\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    remove(item) {\r\n        return this.removeAt(this.indexOf(item)) === item;\r\n    }\r\n\r\n    /**\r\n     * 항목 목록을 삭제합니다.\r\n     * @param items\r\n     * @returns {boolean}\r\n     */\r\n    removeAll(items) {\r\n        this.collectionEventCounter.start();\r\n        items = items && items.slice(0) || [];\r\n        const removedItems = [];\r\n        items.forEach(item => {\r\n            if (this.remove(item)) {\r\n                removedItems.push(item);\r\n            }\r\n        });\r\n        if (removedItems.length > 0) {\r\n            this.collectionEventCounter.end('remove', removedItems, -1);\r\n        } else {\r\n            this.collectionEventCounter.cancel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 지정된 위치의 아이템을 삭제합니다.\r\n     * @param index\r\n     * @returns {Array}\r\n     */\r\n    removeAt(index) {\r\n        let removed = null;\r\n        if (index >= 0 && index < this.length) {\r\n            this.collectionEventCounter.start();\r\n            removed = this._active.splice(index, 1)[0];\r\n            if (this.source !== this._active) {\r\n                this.source.splice(this.source.indexOf(removed), 1);\r\n            }\r\n            this.collectionEventCounter.end('remove', removed, index);\r\n        }\r\n        return removed;\r\n    }\r\n\r\n    /**\r\n     * 지정된 위치에 아이템을 덮어씁니다.\r\n     * @param index\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    set(index, item) {\r\n        if (index >= 0 && index < this.length) {\r\n            this.collectionEventCounter.start();\r\n            this.removeAt(index);\r\n            this.addAt(index, item);\r\n            this.collectionEventCounter.end('set', item, index);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 배열의 'from' 항목을 'to' 위치에 이동합니다.\r\n     * @param from\r\n     * @param to\r\n     * @returns {boolean}\r\n     */\r\n    move(from, to) {\r\n        if (from !== to && 0 <= from && from < this.length && 0 <= to) {\r\n            this.collectionEventCounter.start();\r\n            const item = this.removeAt(from);\r\n            this.addAt(to, item);\r\n            this.collectionEventCounter.end('move', item, this.indexOf(item), from);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _internalRefresh() {\r\n        let num = this.source && this.source.length || 0;\r\n        if (num > 0 && (this.sortFunction || this.filterFunction)) {\r\n            let array = this.source && this.source.slice(0) || 0;\r\n            if (this.filterFunction) {\r\n                array = array.filter(this.filterFunction);\r\n            }\r\n            if (this.sortFunction) {\r\n                array = array.sort(this.sortFunction);\r\n            }\r\n            this._active = array;\r\n        } else {\r\n            this._active = this.source;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findInsertIndex(items, target) {\r\n        let index = 0;\r\n        let lowerBound = 0;\r\n        let upperBound = items.length - 1;\r\n        let item = null;\r\n        let direction = 1;\r\n        while (lowerBound <= upperBound) {\r\n            index = Math.round((lowerBound + upperBound) / 2);\r\n            item = items[index];\r\n            direction = this.sortFunction(target, item);\r\n            if (direction <= -1) {\r\n                upperBound = index - 1;\r\n            } else if (direction >= 1) {\r\n                lowerBound = index + 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return (direction > 0) ? index + 1 : index;\r\n    }\r\n}\n\n/**\n * CellPosition 클래스는 데이타 그리드를 구성하는 셀의 위치, 크기를 정의합니다.\n */\nclass CellPosition extends Rectangle {\n    constructor(rowIndex, columnIndex, endRowIndex, endColumnIndex, isCrossed) {\n        super();\n        if (endRowIndex == null) {\n            endRowIndex = rowIndex;\n        }\n        if (endColumnIndex == null) {\n            endColumnIndex = columnIndex;\n        }\n\n        this.rowIndex = Math.min(rowIndex, endRowIndex);\n        this.columnIndex = Math.min(columnIndex, endColumnIndex);\n        this.endRowIndex = Math.max(rowIndex, endRowIndex);\n        this.endColumnIndex = Math.max(columnIndex, endColumnIndex);\n        /**\n         * 교차 변합된 셀인지 확인합니다.TreeGrid 'box'모드에서 사용됩니다.\n         * @returns {boolean}\n         */\n        this.isCrossed = isCrossed === true;\n    }\n\n    /**\n     * 셀의 상단 행 인덱스입니다.\n     * @returns {number}\n     */\n    get rowIndex() {\n        return this.top;\n    }\n\n    set rowIndex(v) {\n        this.top = v;\n        if (this.endRowIndex < v) {\n            this.endRowIndex = v;\n        }\n    }\n\n    /**\n     * 셀의 하단 행 인덱스입니다.\n     * @returns {number}\n     */\n    get endRowIndex() {\n        return this.bottom;\n    }\n\n    set endRowIndex(v) {\n        this.bottom = v;\n    }\n\n    /**\n     * 셀의 좌측 컬럼 인덱스입니다.\n     * @returns {number}\n     */\n    get columnIndex() {\n        return this.left;\n    }\n\n    set columnIndex(v) {\n        this.left = v;\n        if (this.endColumnIndex < v) {\n            this.endColumnIndex = v;\n        }\n    }\n\n    /**\n     * 셀의 우측 컬럼 인덱스입니다.\n     * @returns {number}\n     */\n    get endColumnIndex() {\n        return this.right;\n    }\n\n    set endColumnIndex(v) {\n        this.right = v;\n    }\n\n    /**\n     * 셀의 행 개수입니다.\n     * @returns {number}\n     */\n    get rowCount() {\n        return this.height + 1;\n    }\n\n    /**\n     * 셀의 컬럼 개수입니다.\n     * @returns {number}\n     */\n    get columnCount() {\n        return this.width + 1;\n    }\n\n\n    /**\n     * 병합된 셀인지 확인합니다.\n     * @returns {boolean}\n     */\n    get isMerged() {\n        return this.rowCount > 1 || this.columnCount > 1;\n    }\n\n\n\n    /**\n     * 객체의 복사본을 만듭니다.\n     * @returns {CellPosition}\n     */\n    clone() {\n        return new CellPosition(this.rowIndex, this.columnIndex, this.endRowIndex, this.endColumnIndex);\n    }\n\n    toPosition() {\n        return [this.rowIndex, this.columnIndex, this.endRowIndex, this.endColumnIndex].join(',');\n    }\n\n    valueOf() {\n        return {\n            rowIndex: this.rowIndex,\n            columnIndex: this.columnIndex,\n            endRowIndex: this.endRowIndex,\n            endColumnIndex: this.endColumnIndex,\n            rowCount: this.rowCount,\n            columnCount: this.columnCount,\n            isCrossed: this.isCrossed\n        }\n    }\n\n    toJSON() {\n        return ['rowIndex', 'columnIndex', 'endRowIndex', 'endColumnIndex', 'isCrossed']\n            .reduce((cur, next) => {\n                cur[next] = this[next];\n                return cur;\n            }, {});\n    }\n\n    toString() {\n        return '[CellPosition (rowIndex=' + this.rowIndex + ' columnIndex=' + this.columnIndex + ' endRowIndex=' + this.endRowIndex + ' endColumnIndex=' + this.endColumnIndex + ')]';\n    }\n\n    static create(cell) {\n        return new CellPosition(cell.rowIndex, cell.columnIndex, cell.endRowIndex, cell.endColumnIndex);\n    }\n}\n\nconst Styleable = {\n    _styles: {},\n    get defaultStyles() {\n        return {};\n    },\n    get styleParent() {\n        return null;\n    },\n    get _nonInheritingStyleNames() {\n        return [];\n    },\n    get styles() {\n        return this._styles;\n    },\n    set styles(values) {\n        this.addStyles(values || {});\n    },\n    getStyle(...args) {\n        if (args.length > 1) {\n            return args.reduce((cur, next) => {\n                cur[next] = this._internalGetStyle(next);\n                return cur;\n            }, {});\n        }\n        return this._internalGetStyle(args[0]);\n    },\n    addStyle(prop, value) {\n        this._styles[prop] = value;\n        this._notifyStyleChanged();\n    },\n    removeStyle(prop) {\n        delete this._styles[prop];\n        this._notifyStyleChanged();\n    },\n    clearStyles() {\n        this._styles = {};\n        this._notifyStyleChanged();\n    },\n    addStyles(styles) {\n        this._styles = mixin({}, this._styles, styles);\n        this._notifyStyleChanged();\n    },\n    _internalGetStyle(prop) {\n        const styles = this.styles;\n        const defStyles = this.defaultStyles;\n        const nonStyleNames = this._nonInheritingStyleNames;\n\n        let value = styles[prop];\n        if (!value && defStyles) {\n            value = defStyles[prop];\n        }\n\n        if (this.styleParent && (!value && (!nonStyleNames || nonStyleNames.indexOf(prop) < 0))) {\n            value = this.styleParent.getStyle(prop);\n        }\n        return value;\n    },\n    _styleChanged() {\n    },\n    _notifyStyleChanged() {\n        if (!this._boundStyleChanged) {\n            this._boundStyleChanged = this._styleChanged.bind(this);\n        }\n        nextFrameOnce(this._boundStyleChanged);\n    }\n};\n\nclass IFormatter {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n\r\n    get type() {\r\n        return this.options.type;\r\n    }\r\n\r\n    get pattern() {\r\n        return this.options.pattern;\r\n    }\r\n\r\n    get source() {\r\n        return this.options.source;\r\n    }\r\n\r\n    format(value) {\r\n\r\n    }\r\n}\r\n\r\nfunction createFactory$1(type, scope) {\r\n    const Formatter = class Formatter extends IFormatter {\r\n        constructor(options) {\r\n            super(options);\r\n        }\r\n    };\r\n\r\n    mixin(Formatter.prototype, scope, false);\r\n    return Formatter;\r\n}\r\n\r\nconst formatter = {};\r\n\r\nfunction get$2(type) {\r\n    return formatter[type];\r\n}\r\n\r\nfunction add$2(type, scope) {\r\n    return formatter[type] = createFactory$1(type, scope);\r\n}\r\n\r\nfunction remove$2(type) {\r\n    if (type in formatter) {\r\n        delete formatter[type];\r\n    }\r\n}\r\n\r\nfunction createFormatter(data) {\r\n    if (data && 'type' in data && 'pattern' in data) {\r\n        const factory = get$2(data.type);\r\n        if (factory) {\r\n            return new factory(data);\r\n        } else {\r\n            console.warn('Formatter not defined.', data);\r\n        }\r\n    }\r\n    return null;\r\n}\n\nvar formatter$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    IFormatter: IFormatter,\n    add: add$2,\n    createFormatter: createFormatter,\n    get: get$2,\n    remove: remove$2\n});\n\nfunction updateChildren(parent, node) {\r\n    node._level = parent && (parent.level + 1) || 0;\r\n    let depth = 0,\r\n        children = node.children || [],\r\n        numChildren = children.length;\r\n\r\n    for (let i = 0; i < numChildren; i++) {\r\n        let child = children[i];\r\n        child._parent = node;\r\n        updateChildren(node, child);\r\n        depth = Math.max(child.depth + 1, depth);\r\n    }\r\n    node._depth = depth;\r\n}\r\n\r\n/**\r\n * GridColumn 클래스는 데이타 그리드의 컬럼을 정의합니다.\r\n * @param dataField 값이 표시되는 항목의 필드\r\n * @param headerText 헤더영역에 표시되는 텍스트\r\n * @constructor\r\n */\r\nclass GridColumn extends EventTarget {\r\n    constructor(dataField = null, headerText = '') {\r\n        super();\r\n        this.index = -1;\r\n        this._open = true;\r\n        this._width = undefined;\r\n        this._visible = true;\r\n        this._minWidth = 30;\r\n        this._children = [];\r\n        this._level = 0;\r\n        this._depth = 0;\r\n        this._formatter = null;\r\n        this._itemRenderer = null;\r\n        this._itemEditor = null;\r\n        this._headerRenderer = null;\r\n\r\n        /**\r\n         * 이 컬럼 영역의 셀을 편집할 수 있는지를 나타냅니다. 'true'면 편집 가능합니다.\r\n         * 단 그리드의 editable 속성이 true 경우만 가능합니다.\r\n         * @type {boolean}\r\n         */\r\n        this.editable = true;\r\n        /**\r\n         * 에디트 활성 마우스 이벤트 타입\r\n         */\r\n        this.editOnEvents = null;\r\n\r\n        /**\r\n         * 컬럼을 드래그하여 이동하여 순서를 변경가능 여부입니다.\r\n         * @type {boolean}\r\n         */\r\n        this.draggable = true;\r\n        /**\r\n         * 컬럼의 너비를 변경 가능한지 여부입니다.\r\n         * @type {boolean}\r\n         */\r\n        this.resizable = true;\r\n\r\n        /**\r\n         * 영역을 벗어난 경우 줄바꿈 여부\r\n         * @type {boolean}\r\n         */\r\n        this.wordWrap = false;\r\n\r\n        /**\r\n         * 셀 텍스트를 결정하는 콜백 함수입니다.\r\n         * 해당 컬럼의 셀의 텍스트는 `dataField`와 일치하는 아이템 객체의 프로퍼티 값으로 설정됩니다.\r\n         * `labelFunction` 사용시 사용자가 지정한 값으로 설정할 수 있습니다.\r\n         * ```\r\n         * labelFunction (item : Object, column : DataGridColumn) : String{\r\n         *      return item[column.dataField] + '%';\r\n         * }\r\n         * ```\r\n         */\r\n        this.labelFunction = null;\r\n        /**\r\n         * 해당 컬럼의 정렬를 사용여부입니다.\r\n         * @type {boolean}\r\n         */\r\n        this.sortable = true;\r\n        /**\r\n         * 정렬이 오름차순인지 아니면 내림차순 인지를 나타냅니다.\r\n         */\r\n        this.sortDescending = false;\r\n        /**\r\n         * 정렬시 기준이 되는 데이타 타입니다. 'string', 'number', 커스텀 콜백함수(Function)를 지정합니다.\r\n         * 콜백함수는 function(a, b, column) 형태입니다.\r\n         */\r\n        this.sortCompare = null;\r\n        /**\r\n         * 데이타 정렬시 원본데이타로 정렬할지 아니면 표시된 데이타로 정렬할지 여부입니다.\r\n         */\r\n        this.isSortOriginal = false;\r\n\r\n        /**\r\n         * 그리드 병합모드 사용시 행병합 여부입니다.\r\n         */\r\n        this.isRowMerge = false;\r\n        /**\r\n         * 그리드 병합모드 사용시 컬럼병합 여부입니다.\r\n         */\r\n        this.isColumnMerge = false;\r\n        this.mergeDependColumns = null;\r\n\r\n        this.height = undefined;\r\n\r\n        this.dataField = dataField || '';\r\n        this.headerText = headerText;\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼이 있는 그리드객체입니다.\r\n     */\r\n    get grid() {\r\n        return this._grid;\r\n    }\r\n\r\n    /**\r\n     * 셀 라벨이 표시되는 항목의 속성을 정의합니다.\r\n     */\r\n    get dataField() {\r\n        return this._dataField;\r\n    }\r\n\r\n    set dataField(value) {\r\n        value = value == null ? '' : '' + value;\r\n        if (this._dataField !== value) {\r\n            this._dataField = value;\r\n            this._dataFieldPath = parsePath(value);\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get dataFieldPath() {\r\n        return this._dataFieldPath || [];\r\n    }\r\n\r\n    /**\r\n     *  컬럼 헤더의 텍스트입니다. 지정되지 않을 시 dataField를 텍스트로 사용합니다.\r\n     */\r\n    get headerText() {\r\n        return this._headerText || this.dataField;\r\n    }\r\n\r\n    set headerText(value) {\r\n        if (this._headerText !== value) {\r\n            this._headerText = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get offsetWidth() {\r\n        if (this.grid) {\r\n            return this.grid.getColumnWidth(this.index);\r\n        }\r\n        return this.width;\r\n    }\r\n\r\n    /**\r\n     * 컬럼의 너비입니다. 지정되지 않을시 그리드 내부에서 자동으로 조절합니다.\r\n     */\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value) {\r\n        if (!isNaN(value)) {\r\n            value = clampValue(value, this.minWidth);\r\n        }\r\n\r\n        if (this._width !== value) {\r\n            if (this.grid) {\r\n                this.grid.setColumnWidth(this.index, value);\r\n            } else {\r\n                this.setWidth(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 컬럼의 최소 너비입니다.\r\n     */\r\n    get minWidth() {\r\n        return this._minWidth;\r\n    }\r\n\r\n    set minWidth(value) {\r\n        if (this._minWidth !== value) {\r\n            this._minWidth = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 컬럼의 표시 여부입니다.\r\n     */\r\n    get visible() {\r\n        let p = this.parent;\r\n        while (p) {\r\n            if (!p.visible) {\r\n                return false;\r\n            }\r\n            p = p.parent;\r\n        }\r\n        return this._visible;\r\n    }\r\n\r\n    set visible(value) {\r\n        if (this._visible !== value) {\r\n            if (this.grid) {\r\n                this.grid.setColumnVisible(this, value);\r\n            } else {\r\n                this.setVisible(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 셀을 구성하는 클래스 팩토리입니다. 지정되지 않으면 그리드의 기본 itemRenderer 구성합니다.\r\n     */\r\n    get itemRenderer() {\r\n        return this._itemRenderer;\r\n    }\r\n\r\n    set itemRenderer(value) {\r\n        if (this._itemRenderer !== value) {\r\n            this._itemRenderer = value;\r\n            if (this.grid) {\r\n                this.grid.clearItemRenderers();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 셀을 구성하는 클래스 팩토리입니다. 지정되지 않으면 그리드의 기본 headerRenderer 구성합니다.\r\n     */\r\n    get headerRenderer() {\r\n        return this._headerRenderer;\r\n    }\r\n\r\n    set headerRenderer(value) {\r\n        if (this._headerRenderer !== value) {\r\n            this._headerRenderer = value;\r\n            if (this.grid) {\r\n                this.grid.clearHeaderRenderers();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 항목을 편집하는데 사용되는 클래스 팩토리입니다.\r\n     * 지정되지 않으면 그리드의 기본 itemEditor로 구성합니다.\r\n     */\r\n    get itemEditor() {\r\n        return this._itemEditor;\r\n    }\r\n\r\n    set itemEditor(value) {\r\n        if (this._itemEditor !== value) {\r\n            this._itemEditor = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 멀티 헤더 구성시 하위 컬럼을 보이거나 숨기게 합니다.\r\n     */\r\n    get open() {\r\n        return this._open;\r\n    }\r\n\r\n    set open(value) {\r\n        if (this._open !== value) {\r\n            this._open = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼의 레벨입니다.\r\n     */\r\n    get level() {\r\n        return this._level;\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼의 깊이입니다.\r\n     * @returns {*|number}\r\n     */\r\n    get depth() {\r\n        return this._depth;\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼의 부모 컬럼입니다.\r\n     * @returns {null|*}\r\n     */\r\n    get parent() {\r\n        return this._parent;\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼의 자식컬럼목록입니다.\r\n     * @returns {Array}\r\n     */\r\n    get children() {\r\n        return this._children;\r\n    }\r\n\r\n    set children(value) {\r\n        if (this._children !== value) {\r\n            this._children = value;\r\n        }\r\n    }\r\n\r\n    get isLeaf() {\r\n        return !this.children || this.children.length <= 0;\r\n    }\r\n\r\n    /**\r\n     * 컬럼 포멧를 정의합니다.\r\n     * 포멧을 사용하기 위해선 tachyon.formatter 설정 해야 합니다.\r\n     */\r\n    get format() {\r\n        return this._format;\r\n    }\r\n\r\n    set format(value) {\r\n        if (this._format !== value) {\r\n            this._format = value;\r\n            this._formatter = createFormatter(value);\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get filterInstance() {\r\n        return this.grid && this.grid.filterManager.getFilter(this);\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼의 필터를 지정합니다.\r\n     * {\r\n     *     type:['number','string','date'],\r\n     *     condi\r\n     * }\r\n     */\r\n    get filter() {\r\n        return this._filter;\r\n    }\r\n\r\n    set filter(value) {\r\n        if (this._filter !== value) {\r\n            this._filter = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 스타일 부모\r\n     * @private\r\n     */\r\n    get styleParent() {\r\n        return this.grid;\r\n    }\r\n\r\n    get _nonInheritingStyleNames() {\r\n        return ['backgroundColor'];\r\n    }\r\n\r\n    setGrid(grid) {\r\n        if (this._grid !== grid) {\r\n            this._grid = grid;\r\n            this.dispatchEvent(new CustomEvent('grid-change', {\r\n                bubbles: false,\r\n                cancelable: false,\r\n                detail: {\r\n                    grid: grid\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    setWidth(width) {\r\n        if (!isNaN(width)) {\r\n            width = clampValue(width, this.minWidth);\r\n        }\r\n        this._width = width;\r\n    }\r\n\r\n    setVisible(visible) {\r\n        this._visible = visible;\r\n    }\r\n\r\n    /**\r\n     * 지정된 항목에 대해 렌더러가 표시하는 문자열을 반환합니다.\r\n     * dataField, labelFunction, format 영향을 받습니다.\r\n     */\r\n    itemToLabel(item) {\r\n        if (this.labelFunction instanceof Function) {\r\n            return this.labelFunction(item, this);\r\n        }\r\n\r\n        let value = this.itemToValue(item);\r\n        if (this._formatter) {\r\n            value = this._formatter.format(value);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 지정된 항목에 대해 원본 데이타를 반환합니다.\r\n     */\r\n    itemToValue(item) {\r\n        if (!item) {\r\n            return null;\r\n        }\r\n        try {\r\n            return getValue(item, this.dataFieldPath);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    invalidate() {\r\n        if (this._grid) {\r\n            this._grid.invalidate(Reason.COLUMN_UPDATE);\r\n        }\r\n    }\r\n\r\n    updateChildren() {\r\n        updateChildren(this.parent, this);\r\n    }\r\n\r\n    _styleChanged() {\r\n    }\r\n\r\n    toJSON() {\r\n        return ['minWidth', 'width', 'offsetWidth', 'dataField', 'headerText', 'children', 'visible', 'open', 'format'].reduce((cur, next) => {\r\n            if (next === 'children') {\r\n                cur[next] = this.children.map(child => child.toJSON());\r\n            } else {\r\n                cur[next] = this[next];\r\n            }\r\n            return cur;\r\n        }, {});\r\n    }\r\n\r\n    static create(data) {\r\n        if (data instanceof GridColumn) {\r\n            return data;\r\n        }\r\n\r\n        const column = new this();\r\n        for (let key in data) {\r\n            let value = data[key];\r\n            if (key === 'styles') {\r\n                column.addStyles(value);\r\n            } else if (key in column) {\r\n                if (key === 'children' && Array.isArray(value)) {\r\n                    value = value.map((child) => {\r\n                        return child instanceof GridColumn ? child : GridColumn.create(child);\r\n                    });\r\n                }\r\n                column[key] = value;\r\n            }\r\n        }\r\n        return column;\r\n    }\r\n}\r\nmixin(GridColumn.prototype, Styleable, false);\r\n\r\n/*\r\nvar d = 'return typeof x === 'number' && x > 50000';\r\nvar s = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', d);\r\n*/\n\nvar Scroller = (class Scroller extends Element$1 {\n    constructor(content) {\n        super();\n        this._scroller = this.DOM.scroller;\n        this._viewport = this.DOM.viewport;\n        this._contentContainer = this.DOM.contentContainer;\n\n        this._boundDoLayout = this.doLayout.bind(this);\n        this._boundContentSizeChange = this._onContentSizeChange.bind(this);\n        this._boundScrollPositionChange = this._onScrollPositionChange.bind(this);\n\n        this._contentContainer.addEventListener('wheel', this._onWheel.bind(this));\n        this._scroller.addEventListener('scroll', this._onScroll.bind(this), {passive: true});\n\n        this._inOnScroll = false;\n        this.content = content;\n    }\n\n    get childContainer() {\n        return this._contentContainer;\n    }\n\n    get maxScrollLeft() {\n        return this._scroller.scrollWidth - this._scroller.clientWidth;\n    }\n\n    get maxScrollTop() {\n        return this._scroller.scrollHeight - this._scroller.clientHeight;\n    }\n\n    get hasVerticalScroll() {\n        return this._scroller.scrollHeight > this._scroller.clientHeight;\n    }\n\n    get hasHorizontalScroll() {\n        return this._scroller.scrollWidth > this._scroller.clientWidth;\n    }\n\n    get content() {\n        return this._content;\n    }\n\n    set content(content) {\n        if (this._content !== content) {\n            if (this.content) {\n                this.content.removeEventListener('content-size-change', this._boundContentSizeChange);\n                this.content.removeEventListener('vertical-scroll-position-change', this._boundScrollPositionChange);\n                this.content.removeEventListener('horizontal-scroll-position-change', this._boundScrollPositionChange);\n                this.removeChild(content);\n            }\n            this._content = content;\n            if (this.content) {\n                this.content.addEventListener('content-size-change', this._boundContentSizeChange);\n                this.content.addEventListener('vertical-scroll-position-change', this._boundScrollPositionChange);\n                this.content.addEventListener('horizontal-scroll-position-change', this._boundScrollPositionChange);\n                this.appendChild(content);\n            }\n        }\n    }\n\n    doLayout(needAllUpdate) {\n\n        this._inDoLayout = true;\n\n        const scroller = this._scroller;\n        const contentContainer = this._contentContainer;\n        const content = this._content;\n\n        setSize(contentContainer, scroller.clientWidth, scroller.clientHeight);\n        content.doLayout(needAllUpdate);\n\n        //컨텐츠 크기로 뷰포트 크기 갱신\n        this._layoutViewport();\n\n        const viewMinHeight = content.getViewMinHeight();\n        if (viewMinHeight > 0) {\n            scroller.style.minHeight = (viewMinHeight + scroller.offsetHeight - scroller.clientHeight) + 'px';\n        }\n\n        if (setSize(contentContainer, scroller.clientWidth, scroller.clientHeight)) {\n            content.invalidateFor(Reason.GROUP_SIZE_CHANGE);\n        }\n\n        //content.contentWidth외에 실 입력된 별도 contentWidth 필요\n        //예를들어 minContentWidth 이 값을 토대로 스크롤 표시할것...\n        this._inDoLayout = false;\n    }\n\n    _layoutViewport() {\n        const content = this._content;\n        return setSize(this._viewport, content.contentWidth, content.contentHeight);\n    }\n\n    _scrollPositionChanged() {\n        if (!this._inOnScroll) {\n            this._scroller.scrollTop = this.content.scrollTop;\n            this._scroller.scrollLeft = this.content.scrollLeft;\n        }\n    }\n\n    /**\n     * 컨텐츠 사이즈 변경 핸들러\n     * @param event\n     * @private\n     */\n    _onContentSizeChange(event) {\n        this._layoutViewport();\n        if (this._inDoLayout) {\n            return;\n        }\n        nextFrameOnce(this._boundDoLayout);\n    }\n\n    _onScrollPositionChange(event) {\n        this._scrollPositionChanged();\n    }\n\n    _onWheel(event) {\n        const scroller = this._scroller;\n        const content = this._content;\n        const delta = content.getVerticalScrollPositionDelta(event.deltaY);\n        const value = clampValue(scroller.scrollTop + delta, 0, this.maxScrollTop);\n        if (scroller.scrollTop !== value) {\n            scroller.scrollTop = value;\n            event.preventDefault();\n            return false;\n        }\n    }\n\n    _onScroll(event) {\n        this._inOnScroll = true;\n\n        const scroller = this._scroller;\n        const content = this._content;\n        const scrollLeft = scroller.scrollLeft;\n        const scrollTop = scroller.scrollTop;\n\n        let scrollChanged = false;\n\n        if (content.scrollLeft !== scrollLeft) {\n            content.scrollLeft = scrollLeft;\n            scrollChanged = true;\n        }\n\n        if (content.scrollTop !== scrollTop) {\n            content.scrollTop = scrollTop;\n            scrollChanged = true;\n        }\n\n        if (scrollChanged) {\n            this.dispatchEvent(new CustomEvent('scroll', {\n                detail: {\n                    scrollTop,\n                    scrollLeft,\n                    maxScrollTop: this.maxScrollTop,\n                    maxScrollLeft: this.maxScrollLeft,\n                    trigger: event\n                }\n            }));\n        }\n\n        this._inOnScroll = false;\n    }\n}).withDom(\n    '<div class=\"tachyon-scroller\">' +\n    '<div id=\"scroller\" class=\"tachyon-scroll-container\">' +\n    '<div id=\"viewport\" class=\"tachyon-scroll-viewport\"></div>' +\n    '</div>' +\n    '<div id=\"contentContainer\" class=\"tachyon-scroll-content\">' +\n    '</div>' +\n    '</div>');\n\nconst DEFAULT_PADDING = {left: 0, right: 0, top: 0, bottom: 0};\r\n\r\nfunction lineTo(ctx, x1, y1, x2, y2, style) {\r\n    ctx.beginPath();\r\n\r\n    let dashed = callValue(style.dashed) || [];\r\n    let color = callValue(style.color) || 0;\r\n    let width = callValue(style.width) || 1;\r\n\r\n    ctx.setLineDash(dashed);\r\n\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = width;\r\n\r\n    let value = ((width || 0) % 2) / 2;\r\n    let dx = x1 === x2 ? value : 0;\r\n    let dy = y1 === y2 ? value : 0;\r\n\r\n    ctx.translate(dx, dy);\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.translate(-dx, -dy);\r\n\r\n    ctx.stroke();\r\n}\r\n\r\n\r\nconst measureFontHeight = cacheFunction(\r\n    function (fontStyle) {\r\n        let fontDraw = document.createElement('canvas');\r\n        let ctx = fontDraw.getContext('2d');\r\n        ctx.fillRect(0, 0, fontDraw.width, fontDraw.height);\r\n        ctx.textBaseline = 'top';\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = fontStyle;\r\n        ctx.fillText('gM', 0, 0);\r\n        let pixels = ctx.getImageData(0, 0, fontDraw.width, fontDraw.height).data;\r\n        let start = -1;\r\n        let end = -1;\r\n        for (let row = 0; row < fontDraw.height; row++) {\r\n            for (let column = 0; column < fontDraw.width; column++) {\r\n                let index = (row * fontDraw.width + column) * 4;\r\n                if (pixels[index] === 0) {\r\n                    if (column === fontDraw.width - 1 && start !== -1) {\r\n                        end = row;\r\n                        row = fontDraw.height;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if (start === -1) {\r\n                        start = row;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return end - start;\r\n    }\r\n);\r\n\r\nfunction measureTextWidth(ctx, text) {\r\n    if (!text || text.length <= 0) {\r\n        return 0;\r\n    }\r\n    return ctx.measureText(text).width;\r\n}\r\n\r\n\r\n/**\r\n * 싱글라인을 그립니다. 그린영역 height 반환합니다.\r\n * @param ctx\r\n * @param text\r\n * @param x\r\n * @param y\r\n * @param width\r\n * @param height\r\n * @param hAlign\r\n * @param vAlign\r\n * @param padding\r\n * @return {number}\r\n */\r\nfunction paintSingleLine(ctx, text, x, y, width, height, hAlign, vAlign, padding) {\r\n    padding = padding || DEFAULT_PADDING;\r\n    let textWidth = measureTextWidth(ctx, text),\r\n        textHeight = measureFontHeight(ctx.font);\r\n\r\n    if (width - (padding.left + padding.right) < textWidth) {\r\n        hAlign = 'left';\r\n    }\r\n\r\n    if (hAlign === 'center') {\r\n        x += (width - textWidth) / 2;\r\n    } else if (hAlign === 'right') {\r\n        x += width - textWidth - padding.right;\r\n    } else {\r\n        x += padding.left;\r\n    }\r\n\r\n    if (vAlign === 'middle' || vAlign === 'center') {\r\n        y += (height - textHeight) / 2;\r\n    } else if (vAlign === 'bottom') {\r\n        y += height - textHeight - padding.bottom;\r\n    } else {\r\n        y += padding.top;\r\n    }\r\n    ctx.fillText(text, x, y + textHeight - 1);\r\n\r\n    return padding.top + padding.bottom + textHeight;\r\n}\r\n\r\nfunction fitText(ctx, text, width) {\r\n    let lines = text.trim().split('\\n'),\r\n        numLines = lines.length,\r\n        result = [];\r\n    for (let i = 0; i < numLines; i++) {\r\n        result = result.concat(findLines(ctx, squeeze(lines[i]).split(' '), width));\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction findLines(ctx, words, width) {\r\n\r\n    if (words.length === 1) {\r\n        return words;\r\n    }\r\n\r\n    let stillFits,\r\n        line = [words.shift()];\r\n\r\n    while ((stillFits = measureTextWidth(ctx, line.join(' ')) < width) && words.length) {\r\n        line.push(words.shift());\r\n    }\r\n\r\n    if (!stillFits && line.length > 1) {\r\n        words.unshift(line.pop()); // …back off by (i.e., remove) one word\r\n    }\r\n\r\n    line = [line.join(' ')];\r\n\r\n    if (words.length) { // if there's anything left…\r\n        line = line.concat(findLines(ctx, words, width)); // …break it up as well\r\n    }\r\n\r\n    return line;\r\n}\r\n\r\nfunction squeeze(string) {\r\n    return (string + '').trim().replace(/\\s\\s+/g, ' ');\r\n}\r\n\r\nfunction paintMultiLine(ctx, text, x, y, w, h, hAlign, vAlign, padding) {\r\n    padding = padding || DEFAULT_PADDING;\r\n\r\n    const textHeight = measureFontHeight(ctx.font);\r\n    const paddingWidth = padding.left + padding.right;\r\n    const lines = fitText(ctx, text, w - paddingWidth);\r\n    const numLines = lines.length;\r\n\r\n    if (numLines <= 1) {\r\n        return paintSingleLine(ctx, text, x, y, w, h, hAlign, vAlign, padding);\r\n    }\r\n\r\n    let totalHeight = numLines * textHeight,\r\n        ox, oy;\r\n\r\n    if (vAlign === 'top') {\r\n        oy = padding.top;\r\n    } else if (vAlign === 'center' || vAlign === 'middle') {\r\n        oy = (h - totalHeight) / 2;\r\n    } else if (vAlign === 'bottom') {\r\n        oy = h - totalHeight - padding.bottom;\r\n    }\r\n\r\n    oy = Math.max(padding.top, oy) + textHeight;\r\n\r\n    let textWidth = measureTextWidth(ctx, text);\r\n    for (let i = 0; i < numLines; i++) {\r\n        let line = lines[i];\r\n        textWidth = measureTextWidth(ctx, line);\r\n\r\n        if (hAlign === 'left') {\r\n            ox = padding.left;\r\n        } else if (hAlign === 'center') {\r\n            ox = (w - textWidth) / 2;\r\n        } else if (hAlign === 'right') {\r\n            ox = w - textWidth - padding.right;\r\n        }\r\n        ctx.fillText(line, x + ox, y + oy + (i * textHeight) - 2);\r\n    }\r\n\r\n    return padding.top + padding.bottom + (textHeight * numLines);\r\n}\n\nvar canvas = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    lineTo: lineTo,\n    measureFontHeight: measureFontHeight,\n    measureTextWidth: measureTextWidth,\n    paintMultiLine: paintMultiLine,\n    paintSingleLine: paintSingleLine\n});\n\nclass Renderer extends Base {\r\n    constructor(grid) {\r\n        super();\r\n        this._grid = grid;\r\n        this._deferredFuncs = [];\r\n    }\r\n\r\n    get grid() {\r\n        return this._grid;\r\n    }\r\n\r\n    get isDomRenderer() {\r\n        return !!this.htmlElement;\r\n    }\r\n\r\n    /**\r\n     * 렌더러 생성시 호출됩니다.\r\n     * @param grid\r\n     */\r\n    created(grid) {\r\n    }\r\n\r\n    /**\r\n     * 렌더러 갱신시 호출됩니다.\r\n     * @param grid\r\n     * @param state\r\n     */\r\n    prepare(grid, state) {\r\n    }\r\n\r\n    /**\r\n     * 캔버스 영역에 그릴때 호출됩니다.\r\n     * @param ctx {CanvasRenderingContext2D}\r\n     * @param state\r\n     * @param width\r\n     * @param height\r\n     * @return {number} 셀의 height를 반환합니다.  DataGrid.autoRowHeight 와 해당 컬럼 wordWrap 'true'일때 반환된 height 으로 행 크기를 설정합니다.\r\n     */\r\n    paint(ctx, state, width, height) {\r\n    }\r\n\r\n    /**\r\n     * 렌더러 해제시 호출됩니다.\r\n     */\r\n    dispose() {\r\n        while (this._deferredFuncs.length > 0) {\r\n            this._deferredFuncs.pop()();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param target\r\n     * @param eventName\r\n     * @param listener\r\n     * @param options\r\n     */\r\n    watchEvent(target, eventName, listener, options) {\r\n        if (target && target.addEventListener) {\r\n            target.addEventListener(eventName, listener, options);\r\n            this._deferredFuncs.push(() => {\r\n                target.removeEventListener(eventName, listener, options);\r\n            });\r\n        }\r\n    }\r\n\r\n    static factory(component) {\r\n        const ItemRenderer = class ItemRenderer extends Renderer {\r\n            constructor(grid) {\r\n                super(grid);\r\n            }\r\n        };\r\n\r\n        ItemRenderer.withBehavior({\r\n            dispose() {\r\n                Renderer.prototype.dispose.apply(this);\r\n                if (component.dispose) {\r\n                    return component.dispose.apply(this);\r\n                }\r\n            }\r\n        }, component);\r\n\r\n        if (typeof component.template === 'string') {\r\n            ItemRenderer.withDom(component.template);\r\n        }\r\n        return ItemRenderer;\r\n    }\r\n}\r\n\r\nconst nullItemRenderer = {};\r\n\r\nfunction setClass(element, key, className) {\r\n    if (element[key] != className) {\r\n        if (element[key]) {\r\n            removeClass(element, element[key]);\r\n            delete element[key];\r\n        }\r\n\r\n        if (className) {\r\n            addClass(element, className);\r\n            element[key] = className;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst defaultItemRenderer = {\r\n    created() {\r\n    },\r\n    prepare(grid, state) {\r\n    },\r\n    paint(ctx, state, w, h) {\r\n\r\n        const cp = state.cellPosition;\r\n        const column = state.column;\r\n        const label = state.label == null ? '' : ('' + state.label);\r\n\r\n        const styles = this.grid.getCellStyle(cp.rowIndex, cp.columnIndex, 'font', 'textAlign', 'verticalAlign', 'cellPadding');\r\n        const color = this.grid.getCellStyle(cp.rowIndex, cp.columnIndex, (state.hovered && 'textOverColor') || (state.selected && 'textSelectionColor') || 'color');\r\n\r\n        let textAlign = styles.textAlign;\r\n        if (column.format && column.styles.textAlign === undefined) {\r\n            const type = column.format.type;\r\n            if (type === 'number') {\r\n                textAlign = 'right';\r\n            } else if (type === 'date') {\r\n                textAlign = 'center';\r\n            }\r\n        }\r\n\r\n        if (ctx.font !== styles.font) {\r\n            ctx.font = styles.font;\r\n        }\r\n\r\n        if (ctx.fillStyle !== color) {\r\n            ctx.fillStyle = color;\r\n            ctx.strokeStyle = color;\r\n        }\r\n\r\n        if (column.wordWrap) {\r\n            return paintMultiLine(ctx, label, 0, 0, w, h, textAlign, styles.verticalAlign, styles.cellPadding);\r\n        }\r\n\r\n        return paintSingleLine(ctx, label, 0, 0, w, h, textAlign, styles.verticalAlign, styles.cellPadding);\r\n    }\r\n};\r\n\r\nconst defaultDomItemRenderer = {\r\n    template: '<div id=\"container\">' +\r\n        '<label id=\"labelDisplay\"></label>' +\r\n        '</div>',\r\n    prepare(grid, state) {\r\n\r\n        const {container, labelDisplay} = this.DOM;\r\n\r\n        const cp = state.cellPosition;\r\n        const column = state.column;\r\n        const label = state.label == null ? '' : ('' + state.label);\r\n\r\n        const color = this.grid.getCellStyle(cp.rowIndex, cp.columnIndex, (state.hovered && 'textOverColor') || (state.selected && 'textSelectionColor') || 'color');\r\n        let {font, textAlign, verticalAlign, cellPadding} = this.grid.getCellStyle(cp.rowIndex, cp.columnIndex, 'font', 'textAlign', 'verticalAlign', 'cellPadding');\r\n\r\n        if (column.format && column.styles.textAlign === undefined) {\r\n            const type = column.format.type;\r\n            if (type === 'number') {\r\n                textAlign = 'right';\r\n            } else if (type === 'date') {\r\n                textAlign = 'center';\r\n            }\r\n        }\r\n\r\n        const vClassName = (verticalAlign === 'center' && 'v-c') || (verticalAlign === 'bottom' && 'v-b') || null;\r\n        const hClassName = (textAlign === 'center' && 'h-c') || (textAlign === 'right' && 'h-r') || null;\r\n\r\n        setClass(container, '__vertical__', vClassName);\r\n        setClass(container, '__horizontal__', hClassName);\r\n\r\n        if (font && container.style.fontFamily !== font) {\r\n            container.style.fontFamily = font;\r\n        }\r\n\r\n        if (color && container.style.color !== color) {\r\n            container.style.color = color;\r\n        }\r\n\r\n        if (labelDisplay.textContent !== label) {\r\n            labelDisplay.textContent = label;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nconst defaultHeaderRenderer = {\r\n    template: '<div>' +\r\n        '<label id=\"labelDisplay\" style=\"width:100%;text-align:center;margin: 0 3px\"></label>' +\r\n        '<div id=\"iconContainer\" style=\"height:80%; display:none; align-items:center;border-left:solid 1px #c3c3c3;\">' +\r\n        '<label id=\"iconDisplay\" style=\"font-size:small;min-width:15px;text-align: center;margin:0 3px;\"></label>' +\r\n        '</div>' +\r\n        '</div>' +\r\n        '</div>',\r\n    prepare(grid, state) {\r\n\r\n        const {labelDisplay, iconDisplay, iconContainer} = this.DOM;\r\n        const {column, label} = state;\r\n        const sortColumns = grid.getSortColumns() || [];\r\n        const numSortColumns = sortColumns.length;\r\n        const sortIndex = sortColumns.indexOf(column);\r\n\r\n        labelDisplay.textContent = label;\r\n\r\n        if (sortIndex >= 0) {\r\n            iconDisplay.textContent = ((column.sortDescending ? '↓' : '↑') + (numSortColumns > 1 ? sortIndex + 1 : ''));\r\n            iconContainer.style.display = 'flex';\r\n        } else {\r\n            iconContainer.style.display = 'none';\r\n        }\r\n    },\r\n    dispose() {\r\n\r\n    },\r\n};\r\n\r\nconst defaultTreeItemRenderer = {\r\n    template: '<div style=\"overflow: hidden\">' +\r\n        '<div id=\"indentBox\" style=\"display:inline-block\"></div>' +\r\n        '<button id=\"toggleButton\" on-mousedown=\"onClick\"></button>' +\r\n        '<label id=\"labelDisplay\"></label>' +\r\n        '</div>',\r\n    prepare(grid, state) {\r\n        let item = state.item,\r\n            column = state.column,\r\n            label = state.label || '',\r\n            level = grid.getNodeLevel(item),\r\n            indent = column.indent,\r\n            isOpen = grid.isOpenNode(item),\r\n            hasChildren = grid.hasChildren(item);\r\n\r\n        let indentBox = this.DOM['indentBox'];\r\n        let labelDisplay = this.DOM['labelDisplay'];\r\n        let toggleButton = this.DOM['toggleButton'];\r\n\r\n        indentBox.style.marginLeft = (level * indent) + 'px';\r\n        labelDisplay.textContent = label;\r\n\r\n        if (hasChildren) {\r\n            toggleButton.removeAttribute('hidden');\r\n            toggleButton.textContent = isOpen ? '-' : '+';\r\n        } else {\r\n            toggleButton.setAttribute('hidden', 'hidden');\r\n        }\r\n\r\n        this.item = item;\r\n        this.column = column;\r\n    },\r\n    onClick(e) {\r\n        this.grid.toggleNode(this.item);\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    },\r\n};\r\n\r\n\r\nconst defaultItemEditor = {\r\n\r\n    created(grid) {\r\n        this.watchEvent(document, 'keydown', (event) => {\r\n            switch (event.keyCode) {\r\n                case 37:\r\n                case 38:\r\n                case 39:\r\n                case 40:\r\n                    event.stopImmediatePropagation();\r\n                    return true;\r\n            }\r\n        }, true);\r\n    },\r\n    /**\r\n     * 편집 완료 전 호출.\r\n     */\r\n    getSaveValue() {\r\n        return this.DOM['input'].value;\r\n    },\r\n    prepare(grid, state) {\r\n        let input = this.DOM['input'],\r\n            value = state.label != null ? '' + state.label : '',\r\n            inputtedKey = state.inputtedKey;\r\n\r\n        if (inputtedKey) {\r\n            input.value = inputtedKey;\r\n            let numChar = inputtedKey.length;\r\n            input.setSelectionRange(numChar, numChar);\r\n        } else {\r\n            input.value = value;\r\n            input.setSelectionRange(0, value.length);\r\n        }\r\n\r\n        input.focus();\r\n    },\r\n    dispose() {\r\n    },\r\n    template: '<input id=\"input\" class=\"tachyon-editor\" type=\"text\">',\r\n};\n\nclass Cell {\r\n    constructor() {\r\n        this.item = null;\r\n        this.column = null;\r\n\r\n        this.hovered = false;\r\n        this.selected = false;\r\n\r\n        this.value = null;\r\n        this.label = null;\r\n        this.renderer = null;\r\n\r\n        this.visible = true;\r\n    }\r\n}\r\n\r\nclass DataCell extends Cell {\r\n    constructor(item, column, cellPosition) {\r\n        super();\r\n        this.item = item;\r\n        this.column = column;\r\n        this.cellPosition = cellPosition;\r\n    }\r\n\r\n    get isMerged() {\r\n        return this.cellPosition.isMerged;\r\n    }\r\n}\r\n\r\nclass TreeCell extends DataCell {\r\n    constructor(item, column, cellPosition) {\r\n        super(item, column, cellPosition);\r\n        this.level = -1;\r\n        this.hasChildren = false;\r\n        this.isOpened = false;\r\n        this.isLeaf = false;\r\n    }\r\n}\r\n\r\n\r\nclass HeaderCell extends Cell {\r\n    constructor(column) {\r\n        super();\r\n        this.column = column;\r\n    }\r\n}\r\n\r\nclass EditCell extends DataCell {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\n\nclass Group extends Element$1 {\r\n    constructor(grid) {\r\n        super();\r\n        this._grid = grid;\r\n        this._layers = [];\r\n        this._reasonsMask = 0;\r\n        this._invalidateFlag = false;\r\n        this._boundValidateNow = this.validateNow.bind(this);\r\n        this._freeElementMap = new Map();\r\n        this._factoryMap = new Map();\r\n        this._scrollLeft = 0;\r\n        this._scrollTop = 0;\r\n        this._lockedDisplay = false;\r\n\r\n        this.hookFreeElement = null;\r\n    }\r\n\r\n    get grid() {\r\n        return this._grid;\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠의 너비입니다.\r\n     * @returns {number}\r\n     */\r\n    get contentWidth() {\r\n        return this._contentWidth || 0;\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠의 높이입니다.\r\n     * @returns {number}\r\n     */\r\n    get contentHeight() {\r\n        return this._contentHeight || 0;\r\n    }\r\n\r\n    /**\r\n     * scrollLeft의 최대값입니다.\r\n     * @returns {number}\r\n     */\r\n    get maxScrollLeft() {\r\n        return Math.max(0, this.contentWidth - this.clientWidth);\r\n    }\r\n\r\n    /**\r\n     * scrollTop의 최대값입니다.\r\n     * @returns {number}\r\n     */\r\n    get maxScrollTop() {\r\n        return Math.max(0, this.contentHeight - this.clientHeight);\r\n    }\r\n\r\n    /**\r\n     * 수평 스크롤 위치값입니다.\r\n     * @returns {number}\r\n     */\r\n    get scrollLeft() {\r\n        return this._scrollLeft || 0;\r\n    }\r\n\r\n    set scrollLeft(value) {\r\n        value = parseInt(clampValue(value, 0, this.maxScrollLeft));\r\n        if (this._scrollLeft !== value) {\r\n            let old = this._scrollLeft;\r\n            this._scrollLeft = value;\r\n            this.updateScrollRect();\r\n            this.dispatchEvent(new CustomEvent('horizontal-scroll-position-change', {\r\n                bubbles: false,\r\n                detail: {\r\n                    newValue: value, oldValue: old\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 수직 스크롤 위치값입니다.\r\n     * @returns {number}\r\n     */\r\n    get scrollTop() {\r\n        return this._scrollTop;\r\n    }\r\n\r\n    set scrollTop(value) {\r\n        value = parseInt(clampValue(value, 0, this.maxScrollTop));\r\n        if (this._scrollTop !== value) {\r\n            let old = this._scrollTop;\r\n            this._scrollTop = value;\r\n            this.updateScrollRect();\r\n            this.dispatchEvent(new CustomEvent('vertical-scroll-position-change', {\r\n                bubbles: false,\r\n                detail: {\r\n                    newValue: value, oldValue: old\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠 너비와 높이를 설정합니다.\r\n     * @param width\r\n     * @param height\r\n     */\r\n    setContentSize(width, height) {\r\n        if (width !== this.contentWidth || height !== this.contentHeight) {\r\n            this._contentWidth = width;\r\n            this._contentHeight = height;\r\n            this.dispatchEvent(new CustomEvent('content-size-change'));\r\n        }\r\n    }\r\n\r\n    getScrollRect() {\r\n        return new Rectangle(this.scrollLeft, this.scrollTop, this.clientWidth, this.clientHeight);\r\n    }\r\n\r\n    getHorizontalScrollPositionDelta(delta) {\r\n        return delta > 0 ? -30 : 30;\r\n    }\r\n\r\n    getVerticalScrollPositionDelta(delta) {\r\n        return delta > 0 ? -30 : 30;\r\n    }\r\n\r\n    lockDisplay() {\r\n        this._lockedDisplay = true;\r\n    }\r\n\r\n    unlockDisplay() {\r\n        if (this._lockedDisplay) {\r\n            this._invalidateFlag = false;\r\n            this._lockedDisplay = false;\r\n            this.invalidateFor(Reason.ALL);\r\n        }\r\n    }\r\n\r\n    invalidate(reason) {\r\n        this.invalidateFor(reason || Reason.DISPLAY_UPDATE);\r\n    }\r\n\r\n    validateNow() {\r\n        if (!this._lockedDisplay && this._invalidateFlag && !this._inUpdateDisplay) {\r\n            this._inUpdateDisplay = true;\r\n            this._updateDisplay();\r\n            this._inUpdateDisplay = false;\r\n            this._reasonsMask = 0;\r\n            this._invalidateFlag = false;\r\n        }\r\n    }\r\n\r\n    clearElementCache() {\r\n        this._freeElementMap.clear();\r\n        this._factoryMap.clear();\r\n    }\r\n\r\n    invalidateFor(...reasons) {\r\n        reasons.forEach((reason) => {\r\n            this._reasonsMask |= (reason | 0);\r\n        });\r\n        if (!this._invalidateFlag) {\r\n            this._invalidateFlag = true;\r\n            nextFrameOnce(this._boundValidateNow);\r\n        }\r\n    }\r\n\r\n    isInvalidateReason(...args) {\r\n        for (let i = 0, num = args.length; i < num; i++) {\r\n            let reason = args[i];\r\n            if ((this._reasonsMask & reason) === reason) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _addLayer(layer) {\r\n        if (this._layers.indexOf(layer) < 0) {\r\n            this.appendChild(layer);\r\n            this._layers.push(layer);\r\n        }\r\n        return layer;\r\n    }\r\n\r\n    _beginLayers() {\r\n        let layers = this._layers,\r\n            numLayers = layers.length,\r\n            i = 0;\r\n        for (; i < numLayers; i++) {\r\n            layers[i].begin();\r\n        }\r\n    }\r\n\r\n    _endLayers() {\r\n        this._layers.forEach(layer => layer.end());\r\n    }\r\n\r\n    _prepareLayers(scrollX, scrollY, width, height) {\r\n        this._layers.forEach(layer => layer.prepareLayout(scrollX, scrollY, width, height));\r\n    }\r\n\r\n    _updateLayers(scrollX, scrollY, width, height, contentWidth, contentHeight, frozenRect) {\r\n        //레이어 크기 업데이트\r\n        this._layers.forEach(layer => layer.updateLayout(scrollX, scrollY, width, height, contentWidth, contentHeight, frozenRect));\r\n    }\r\n\r\n    _createRenderer() {\r\n        const factory = this._itemToFactory.apply(this, arguments);\r\n        const renderers = this._freeElementMap.get(factory);\r\n        const cellState = arguments[arguments.length - 1] instanceof Cell ? arguments[arguments.length - 1] : null;\r\n        let renderer;\r\n        if (renderers && renderers.length > 0) {\r\n            renderer = renderers.pop();\r\n        } else if (factory instanceof Function) {\r\n            renderer = new factory(this.grid);\r\n            if (renderer) {\r\n                callHook(renderer, 'created', this.grid, cellState);\r\n            }\r\n        }\r\n\r\n        if (renderer) {\r\n            callHook(renderer, 'ready', this.grid, cellState);\r\n        }\r\n        return renderer;\r\n    }\r\n\r\n    _freeRenderer(element) {\r\n        if (this.hookFreeElement instanceof Function && this.hookFreeElement(element) === false) {\r\n            return;\r\n        }\r\n        let factory = element && element.constructor;\r\n        if (!factory) {\r\n            return false;\r\n        }\r\n        let elements = this._freeElementMap.get(factory);\r\n        if (!elements) {\r\n            elements = [];\r\n            this._freeElementMap.set(factory, elements);\r\n        }\r\n        elements.push(element);\r\n        return true;\r\n    }\r\n\r\n    _itemToFactory() {\r\n        const template = this._itemToTemplate.apply(this, arguments);\r\n        if (template) {\r\n            let factory = this._factoryMap.get(template);\r\n            if (!factory) {\r\n                factory = Renderer.factory(template);\r\n                this._factoryMap.set(template, factory);\r\n            }\r\n            return factory;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _itemToTemplate() {\r\n    }\r\n\r\n    _updateScrollRect() {\r\n    }\r\n\r\n    _updateDisplay() {\r\n    }\r\n\r\n    _mouseEventToContent(event) {\r\n    }\r\n\r\n    _mouseEventToLocal(event) {\r\n        let rect = this.root.getBoundingClientRect();\r\n        return new Point(Math.round(event.clientX - rect.left), Math.round(event.clientY - rect.top));\r\n    }\r\n}\n\nconst PREFIX_CLASS_NAME = 'tachyon-layer-';\r\n\r\nconst Layer = (class Layer extends Element$1 {\r\n    constructor(name) {\r\n        super();\r\n        this.useDB = false;\r\n        this._ctx = this.canvas.getContext('2d');\r\n        this._bufferCanvas = document.createElement('canvas');\r\n        this._bufferCtx = this._bufferCanvas.getContext('2d');\r\n        addClass(this.root, PREFIX_CLASS_NAME + name);\r\n    }\r\n\r\n    get canvas() {\r\n        return this.DOM.canvas;\r\n    }\r\n\r\n    get context() {\r\n        return this.useDB ? this._bufferCtx : this._ctx;\r\n    }\r\n\r\n    begin() {\r\n        this.context.save();\r\n        if (this.useDB) {\r\n            this._bufferCtx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        }\r\n        this._ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    end() {\r\n        this.context.restore();\r\n        if (this.useDB && this._bufferCanvas.width > 0 && this._bufferCanvas.height > 0) {\r\n            this._ctx.drawImage(this._bufferCanvas, 0, 0);\r\n        }\r\n    }\r\n\r\n    setSize(width, height) {\r\n        if (super.setSize(width, height)) {\r\n            if (this.canvas.width !== width) {\r\n                this.canvas.width = this._bufferCanvas.width = width;\r\n            }\r\n            if (this.canvas.height !== height) {\r\n                this.canvas.height = this._bufferCanvas.height = height;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    prepareLayout(x, y, width, height) {\r\n        this.setSize(width, height);\r\n    }\r\n\r\n    updateLayout(x, y, width, height) {\r\n\r\n    }\r\n}).withDom('<div><canvas id=\"canvas\" class=\"canvas\"></canvas></div>');\r\n\r\n\r\nconst Section = (class Section extends Element$1 {\r\n    constructor(index) {\r\n        super();\r\n        this.index = index;\r\n        this.fragment = null;\r\n    }\r\n\r\n    begin() {\r\n        this.fragment = document.createDocumentFragment();\r\n    }\r\n\r\n    end() {\r\n        if (this.fragment.childNodes.length > 0) {\r\n            this.root.appendChild(this.fragment);\r\n        }\r\n        this.fragment = null;\r\n    }\r\n\r\n    addElement(element) {\r\n        if (this.fragment && element.parentElement !== this.root) {\r\n            this.fragment.appendChild(element);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}).withDom('<div class=\"tachyon-section\"><div id=\"sizeMarker\" style=\"position:absolute;width: 1px;height: 1px;visibility: hidden;pointer-events: none\"></div></div>');\r\n\r\nmixin(Section, {\r\n    LEFT: 1,\r\n    RIGHT: 2,\r\n    CENTER: 0,\r\n    TOP: 1,\r\n    BOTTOM: 2,\r\n    MIDDLE: 0,\r\n});\r\n\r\nconst H_SECTION_NAMES = ['center', 'left', 'right'];\r\nconst V_SECTION_NAMES = ['middle', 'top', 'bottom'];\r\n\r\nclass RendererLayer extends Layer {\r\n    constructor(name) {\r\n        super(name);\r\n        /**\r\n         *\r\n         * @type {Array<Section>}\r\n         * @private\r\n         */\r\n        this._sections = [];\r\n        this._overlaySection = new Section();\r\n        this.appendChild(this._overlaySection);\r\n        addClass(this._overlaySection.root, 'overlay');\r\n    }\r\n\r\n    begin() {\r\n        super.begin();\r\n        this._sections.forEach((section, index, items) => {\r\n            if (section) {\r\n                section.begin();\r\n            }\r\n        });\r\n        this._overlaySection.begin();\r\n    }\r\n\r\n    end() {\r\n        super.end();\r\n        this._sections.forEach(section => {\r\n            if (section) {\r\n                section.end();\r\n            }\r\n        });\r\n        this._overlaySection.end();\r\n    }\r\n\r\n    updateLayout(x, y, width, height, contentWidth, contentHeight, frozenRect) {\r\n        super.updateLayout(x, y, width, height, contentWidth, contentHeight, frozenRect);\r\n        let numSections = this._sections.length,\r\n            sx, sy, sw, sh, scrollX, scrollY;\r\n\r\n        for (let i = 0; i < numSections; i++) {\r\n            let section = this._sections[i];\r\n            if (section) {\r\n                let vIndex = Math.floor(section.index / 3);\r\n                let hIndex = section.index % 3;\r\n\r\n                if (hIndex === Section.LEFT) {\r\n                    sx = 0;\r\n                    sw = frozenRect.left;\r\n                    scrollX = 0;\r\n                } else if (hIndex === Section.RIGHT) {\r\n                    sx = width - frozenRect.right;\r\n                    sw = frozenRect.right;\r\n                    scrollX = 0;\r\n                } else {\r\n                    sx = frozenRect.left;\r\n                    sw = width - (frozenRect.left + frozenRect.right);\r\n                    scrollX = x;\r\n                    section.DOM.sizeMarker.style.left = contentWidth + 'px';\r\n                }\r\n\r\n                if (vIndex === Section.TOP) {\r\n                    sy = 0;\r\n                    sh = frozenRect.top;\r\n                    scrollY = 0;\r\n                } else if (vIndex === Section.BOTTOM) {\r\n                    sy = height - frozenRect.bottom;\r\n                    sh = frozenRect.bottom;\r\n                    scrollY = 0;\r\n\r\n                } else {\r\n                    sy = frozenRect.top;\r\n                    sh = height - (frozenRect.top + frozenRect.bottom);\r\n                    scrollY = y;\r\n                    section.DOM.sizeMarker.style.top = contentHeight + 'px';\r\n                }\r\n                section.setLayout(sx, sy, sw, sh);\r\n                section.root.scrollLeft = scrollX;\r\n                section.root.scrollTop = scrollY;\r\n            }\r\n        }\r\n        this._overlaySection.setLayout(0, 0, width, height);\r\n    }\r\n\r\n    addElement(vIndex, hIndex, element) {\r\n        const section = this._getSection(vIndex, hIndex);\r\n        return section.addElement(element);\r\n    }\r\n\r\n    addOverlayElement(element) {\r\n        this._overlaySection.addElement(element);\r\n    }\r\n\r\n    removeElement(element) {\r\n        if (element instanceof HTMLElement && element.parentElement) {\r\n            element.parentElement.removeChild(element);\r\n        }\r\n    }\r\n\r\n    _getSection(vIndex, hIndex) {\r\n        let index = vIndex * 3 + hIndex;\r\n        let section = this._sections[index];\r\n        if (!section) {\r\n            section = new Section(index);\r\n            this.appendChild(section);\r\n            this.setChildIndex(this._overlaySection, this.childElementCount);\r\n            addClass(section.root, H_SECTION_NAMES[hIndex] + '-' + V_SECTION_NAMES[vIndex]);\r\n            this._sections[index] = section;\r\n            section.begin();\r\n        }\r\n        return section;\r\n    }\r\n}\n\nclass HeaderDimensions {\n    constructor(headerGroup) {\n        this.headerGroup = headerGroup;\n\n        this._visibleColumns = [];\n        this._visibleLayouts = [];\n        this._oldVisibleColumns = null;\n\n        this._pendingHeaders = null;\n        this._headers = [];\n\n        this._rowCount = 1;\n        this._rowHeight = 30;\n    }\n\n    get dataGroup() {\n        return this.headerGroup.dataGroup;\n    }\n\n    get columnCollection() {\n        return this.dataGroup.columnCollection\n    }\n\n    get rowCount() {\n        return this._rowCount;\n    }\n\n    get headers() {\n        return this._headers;\n    }\n\n    get rowHeight() {\n        return this._rowHeight;\n    }\n\n    get headerHeight() {\n        return this.rowHeight * this.rowCount;\n    }\n\n    setRowDefaultHeight(value) {\n        this._rowHeight = value;\n    }\n\n    updateStart() {\n        this._pendingHeaders = [];\n    }\n\n    updateEnd() {\n        const oldHeaders = this._headers;\n        this._headers = this._pendingHeaders;\n        this._pendingHeaders = null;\n        this._oldVisibleColumns = null;\n        return {\n            headers: oldHeaders\n        }\n    }\n\n    getHeader(column) {\n        const offset = this._visibleColumns.indexOf(column);\n        return offset >= 0 ? this._headers[offset] : null;\n    }\n\n    setHeader(column, header) {\n        const headers = this._pendingHeaders;\n        const offset = this._visibleColumns.indexOf(column);\n        headers[offset] = header;\n    }\n\n    takeHeader(column) {\n        const offset = (this._oldVisibleColumns || this._visibleColumns).indexOf(column);\n        if (offset >= 0) {\n            const header = this._headers[offset];\n            this._headers[offset] = null;\n            return header;\n        }\n        return null;\n    }\n\n    createHeader(column) {\n        return new HeaderCell(column);\n    }\n\n    isOpenColumn(column) {\n        if (!column.visible) {\n            return false;\n        }\n\n        let p = column.parent;\n        while (p) {\n            if (!p.open) {\n                return false;\n            }\n            p = p.parent;\n        }\n        return true;\n    }\n\n    getHeaderLayout(column) {\n        const offset = this._visibleColumns.indexOf(column);\n        return offset >= 0 ? this._visibleLayouts[offset] : null;\n    }\n\n    /**\n     * 헤더 행개수를 갱신합니다.\n     */\n    updateHeaderRowCount() {\n        const columns = this.dataGroup.normalizedColumns;\n        this._rowCount = columns.reduce((max, column) => {\n            if (column.visible) {\n                let depth = 0;\n                let closeDepth = 0;\n                while (column) {\n                    if (!column.open || column.height === 0) {\n                        closeDepth = depth;\n                    }\n                    depth++;\n                    column = column.parent;\n                }\n                max = Math.max(depth - closeDepth, max);\n            }\n            return max;\n        }, 0);\n    }\n\n\n    /**\n     * 헤더 컬럼 위치정보를 갱신합니다.\n     */\n    updateHeaderColumnLayouts() {\n        const dimensions = this.dataGroup._dimensions;\n        const columns = this.dataGroup.normalizedColumns;\n        const oldVisibleColumns = this._visibleColumns;\n        const visibleColumns = [];\n        const layouts = [];\n        const done = new Set();\n        dimensions.forEachColumnLayouts((layout, columnIndex) => {\n            let column = columns[columnIndex];\n            while (column && !done.has(column) && column.height !== 0) {\n                done.add(column);\n                if (this.isOpenColumn(column)) {\n                    visibleColumns.push(column);\n                    layouts.push(this.calculateHeaderLayout(column));\n                }\n\n                column = column.parent;\n            }\n        });\n        this._visibleColumns = visibleColumns;\n        this._visibleLayouts = layouts;\n        this._oldVisibleColumns = oldVisibleColumns;\n    }\n\n    calculateHeaderLayout(column) {\n        const collection = this.columnCollection;\n        const dataDimensions = this.dataGroup._dimensions;\n        const leaves = collection.getVisibleLeafColumns(column);\n        const headerHeight = this.headerGroup.headerHeight;\n        const rowHeight = this.headerGroup.headerRowHeight;\n\n        const layout = dataDimensions.getColumnLayouts(leaves[0].index, leaves[leaves.length - 1].index);\n        const yy = collection.getAncestorNodes(column).reduce((cur, pc) => {\n            let height = pc.height;\n            if (height == null || height < 0) {\n                height = rowHeight;\n            }\n            cur += height;\n            return cur;\n        }, 0);\n        const hh = (column.depth === 0 || !column.open) ? headerHeight - yy : column.height === 0 ? 0 : rowHeight;\n        return {...layout, y: yy, height: hh, sy: 0, sh: hh, dy: yy, dh: hh}\n    }\n\n    forEachHeaderLayouts(callback) {\n        this._visibleLayouts.forEach((layout, index) => callback(layout, this._visibleColumns[index]));\n    }\n\n    clear() {\n        this._visibleColumns = [];\n        this._visibleLayouts = [];\n        this._pendingHeaders = null;\n        this._headers = [];\n    }\n}\n\nconst DRAG_SHIELD = 5;\r\nconst DOUBLE_CLICK_DELAY$1 = 400;\r\n\r\nclass HeaderGroup extends Group {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this._headerDimensions = new HeaderDimensions(this);\r\n\r\n        this._selectionLayer = this._addLayer(new Layer('selection'));\r\n        this._rendererLayer = this._addLayer(new RendererLayer('renderer'));\r\n        this._separatorLayer = this._addLayer(new Layer('separator'));\r\n\r\n        this._headerRenderer = defaultConfig.headerRenderer || defaultHeaderRenderer;\r\n        this.headerRowHeight = defaultConfig.styles.headerRowHeight;\r\n\r\n        this._boundDocumentMouseMove = this._onDocumentMouseMove.bind(this);\r\n        this._boundDocumentMouseUp = this._onDocumentMouseUp.bind(this);\r\n\r\n        this.addEventListener('mousedown', this._onMouseDown.bind(this));\r\n        this.addEventListener('mousemove', this._onMouseMove.bind(this));\r\n        this.addEventListener('mouseout', this._onMouseOut.bind(this));\r\n\r\n        const boundDataGroupEvent = this._onDataGroupEvent.bind(this);\r\n        [\r\n            'visible-columns-change',\r\n            'normalized-columns-change',\r\n            'column-visible',\r\n            'column-size-change',\r\n            'horizontal-scroll-position-change',\r\n            'group-size-change',\r\n        ].forEach(type => this.dataGroup.addEventListener(type, boundDataGroupEvent));\r\n    }\r\n\r\n    get headerRenderer() {\r\n        return this._headerRenderer;\r\n    }\r\n\r\n    set headerRenderer(value) {\r\n        if (this._headerRenderer !== value) {\r\n            this._headerRenderer = value;\r\n            this.clearCache();\r\n            this.invalidateFor(Reason.RENDERER_CHANGE);\r\n        }\r\n    }\r\n\r\n    get headerHeight() {\r\n        return this._headerDimensions.headerHeight;\r\n    }\r\n\r\n    get headerRowHeight() {\r\n        return this._headerDimensions.rowHeight;\r\n    }\r\n\r\n    set headerRowHeight(value) {\r\n        if (this.headerRowHeight !== value) {\r\n            this._headerDimensions.setRowDefaultHeight(value);\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get dataGroup() {\r\n        return this.grid.dataGroup;\r\n    }\r\n\r\n    get normalizedColumns() {\r\n        return this.dataGroup.normalizedColumns;\r\n    }\r\n\r\n    doLayout(needAllUpdate) {\r\n        this.invalidateFor(needAllUpdate ? Reason.ALL : 0);\r\n        this.validateNow();\r\n    }\r\n\r\n    /**\r\n     * x,y 위치로 컬럼을 반환합니다. x,y는 컨텐츠 좌표입니다.\r\n     * @param x\r\n     * @param y\r\n     * @returns {null}\r\n     */\r\n    getColumnByPosition(x, y) {\r\n        //TODO break 적용 여부\r\n        let found = null;\r\n        this._headerDimensions.forEachHeaderLayouts((layout, column) => {\r\n            if (!found && x >= layout.x && x < layout.x + layout.width && y >= layout.y && y < layout.y + layout.height) {\r\n                found = column;\r\n            }\r\n        });\r\n\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼의 헤더 위치정보를 반환합니다.\r\n     * @param column\r\n     * @returns {*|null}\r\n     */\r\n    getHeaderLayout(column) {\r\n        return this._headerDimensions.getHeaderLayout(column);\r\n    }\r\n\r\n    clearHeaderRenderers() {\r\n        this._freeHeaders(this._headerDimensions.headers.slice(0));\r\n    }\r\n\r\n    clearCache() {\r\n        this.clearHeaderRenderers();\r\n        this._headerDimensions.clear();\r\n        this.clearElementCache();\r\n        this.invalidateFor(Reason.RENDERER_CHANGE);\r\n    }\r\n\r\n    destroy() {\r\n        this.clearCache();\r\n    }\r\n\r\n    _measureSize() {\r\n        this.style.minHeight = this.headerHeight + 'px';\r\n    }\r\n\r\n    _updateDisplay() {\r\n        const dataGroup = this.dataGroup;\r\n        const scrollX = dataGroup.scrollLeft;\r\n        const scrollY = 0;\r\n        const width = dataGroup.clientWidth;\r\n        const frozenRect = dataGroup.getVisibleFrozenSizeRect().clone();\r\n        const contentWidth = dataGroup.getContentWidth();\r\n\r\n        frozenRect.top = frozenRect.bottom = 0;\r\n\r\n        const isColumnsChanged = this.isInvalidateReason(Reason.COLUMNS_CHANGE);\r\n        const isColumnVisibleChanged = this.isInvalidateReason(Reason.COLUMN_VISIBLE);\r\n        const isRendererChanged= this.isInvalidateReason(Reason.RENDERER_CHANGE);\r\n        const isVisibleColumnsChanged = this.isInvalidateReason(Reason.VISIBLE_COLUMNS_CHANGE);\r\n        const isColumnUpdated = isColumnsChanged || isColumnVisibleChanged || isVisibleColumnsChanged ||\r\n            this.isInvalidateReason(Reason.COLUMN_UPDATE, Reason.HORIZONTAL_SCROLL_CHANGE, Reason.GROUP_SIZE_CHANGE);\r\n\r\n        if (isColumnsChanged) {\r\n            this.clearCache();\r\n        }\r\n\r\n        this._beginLayers();\r\n\r\n        if (isColumnsChanged || isColumnVisibleChanged) {\r\n            this._headerDimensions.updateHeaderRowCount();\r\n            this._measureSize();\r\n        }\r\n\r\n        if (isColumnUpdated || isRendererChanged) {\r\n            this._headerDimensions.updateHeaderColumnLayouts();\r\n        }\r\n\r\n        const height = this.headerHeight;\r\n\r\n        this._prepareLayers(scrollX, scrollY, width, height);\r\n        this._createHeaders(scrollX, scrollY, width, height);\r\n        this._paintSeparators(scrollX, scrollY, width, height);\r\n        this._updateLayers(scrollX, scrollY, width, height, contentWidth, height, frozenRect);\r\n        this._endLayers();\r\n\r\n        this.setContentSize(contentWidth, height);\r\n    }\r\n\r\n    _createHeaders(scrollX, scrollY, width, height) {\r\n        const context = this._rendererLayer.context;\r\n        const dimensions = this._headerDimensions;\r\n        dimensions.updateStart();\r\n        dimensions.forEachHeaderLayouts((layout, column) => {\r\n            const header = dimensions.takeHeader(column);\r\n            const newHeader = this._createHeader(column, layout, header);\r\n            this._paintHeader(context, newHeader, layout);\r\n            dimensions.setHeader(column, newHeader);\r\n        });\r\n        const {headers} = dimensions.updateEnd();\r\n        this._freeHeaders(headers);\r\n    }\r\n\r\n    _createHeader(column, layout, cacheHeader) {\r\n        const header = this._setupHeader(cacheHeader, column);\r\n        const renderer = header.renderer || this._createRenderer(column, header);\r\n        header.renderer = renderer;\r\n\r\n        const element = renderer && renderer.htmlElement;\r\n        if (element) {\r\n            addClass(element, 'header-cell');\r\n            const layer = this._rendererLayer;\r\n            if (!column.isLeaf) {\r\n                layer.addOverlayElement(element);\r\n                setLayout(element, layout.dx, layout.dy, Math.min(layout.dw, layout.width), layout.dh);\r\n            } else {\r\n                layer.addElement(Section.MIDDLE, this.dataGroup.getHorizontalSectionIndex(column.index), element);\r\n                setLayout(element, layout.x - layout.baseX, layout.y, layout.width, layout.height);\r\n            }\r\n        }\r\n\r\n        callHook(renderer, 'prepare', this.grid, header);\r\n\r\n        return header;\r\n    }\r\n\r\n    _setupHeader(header, column) {\r\n        if (!header) {\r\n            header = this._headerDimensions.createHeader(column);\r\n        }\r\n        header.item = column;\r\n        header.column = column;\r\n        header.label = header.value = column.headerText;\r\n        header.hovered = this._overColumn === column;\r\n        header.visible = true;\r\n\r\n        return header;\r\n    }\r\n\r\n    _paintHeader(context, header, layout) {\r\n        if (!header.visible) {\r\n            return;\r\n        }\r\n        const renderer = header.renderer;\r\n        if (renderer.paint) {\r\n            const isLeaf = header.column.isLeaf;\r\n            const dx = layout.dx;\r\n            const dy = layout.dy;\r\n            const sx = isLeaf ? layout.sx : 0;\r\n            const sy = isLeaf ? layout.sy : 0;\r\n            const sw = layout.sw;\r\n            const sh = layout.sh;\r\n            const width = isLeaf ? layout.width : sw;\r\n            const height = isLeaf ? layout.height : sh;\r\n\r\n            context.save();\r\n\r\n            context.beginPath();\r\n            context.rect(dx, dy, sw, sh);\r\n            context.clip();\r\n\r\n            context.translate(dx - sx, dy - sy);\r\n            renderer.paint(context, header, width, height);\r\n\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    _paintSeparators(scrollX, scrollY, width, height) {\r\n        const context = this._separatorLayer.context;\r\n        const dimensions = this._headerDimensions;\r\n        const columnLineStyle = this._getStyle('headerColumnLine');\r\n\r\n        //컬럼 구분선\r\n        context.save();\r\n        dimensions.forEachHeaderLayouts((layout, column) => {\r\n            const style = column.getStyle('headerColumnLine');\r\n            const parentColumn = column.parent;\r\n            const parentLayout = parentColumn && dimensions.getHeaderLayout(parentColumn) || null;\r\n            !!dimensions.getHeader(column);\r\n            if (!parentLayout || (parentLayout.x + parentLayout.width !== layout.x + layout.width)) {\r\n                lineTo(context, layout.dx + layout.dw, layout.dy, layout.dx + layout.dw, height, style || columnLineStyle);\r\n            }\r\n        });\r\n\r\n        //마지막 컬럼 구분선\r\n        const lastColumnLayout = this.dataGroup._dimensions.getColumnLayout(this.normalizedColumns.length - 1);\r\n        const lastRight = lastColumnLayout && lastColumnLayout.x + lastColumnLayout.width || -1;\r\n        if (lastRight > 0 && lastRight < width) {\r\n            lineTo(context, lastRight, 0, lastRight, height, columnLineStyle);\r\n        }\r\n\r\n        // 스크롤 구분선.\r\n        if (this._grid.hasVerticalScroll) {\r\n            lineTo(context, width - 1, 0, width - 1, height, columnLineStyle);\r\n        }\r\n        context.restore();\r\n\r\n        //행 구분선\r\n        const headerRowLine = this._getStyle('headerRowLine');\r\n        context.save();\r\n        dimensions.forEachHeaderLayouts((layout, column) => {\r\n            if (!column.isLeaf && layout.height > 0) {\r\n                lineTo(context, layout.dx, layout.dy + layout.dh, layout.dx + Math.min(layout.dw, layout.width), layout.dy + layout.dh, headerRowLine);\r\n            }\r\n        });\r\n        context.restore();\r\n    }\r\n\r\n    _freeHeaders(headers) {\r\n        const layer = this._rendererLayer;\r\n        headers.forEach(header => {\r\n            const renderer = header && header.renderer;\r\n            if (renderer) {\r\n                const element = renderer.htmlElement;\r\n                callHook(renderer, 'dispose');\r\n                if (element) {\r\n                    layer.removeElement(element);\r\n                }\r\n                this._freeRenderer(renderer);\r\n            }\r\n        });\r\n    }\r\n\r\n    _itemToTemplate(column) {\r\n        let headerRenderer = column.headerRenderer || this.headerRenderer;\r\n        let template = headerRenderer instanceof Function ? headerRenderer(column) : headerRenderer;\r\n        if (!template) {\r\n            template = defaultHeaderRenderer;\r\n        }\r\n        return template;\r\n    }\r\n\r\n    _getStyle(key) {\r\n        return this.grid.getStyle(key);\r\n    }\r\n\r\n    _dispatchDataGridHeaderEvent(type, column, trigger) {\r\n        return this.dispatchEvent(new CustomEvent(type, {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: {\r\n                column: column,\r\n                trigger: trigger,\r\n            },\r\n        }));\r\n    }\r\n\r\n    _mouseEventToContent(event) {\r\n        const point = this._mouseEventToLocal(event);\r\n        const width = this.dataGroup.clientWidth;\r\n        const contentWidth = this.dataGroup.contentWidth;\r\n        const frozenRect = this.dataGroup.getVisibleFrozenSizeRect();\r\n\r\n        if (frozenRect.left > 0 && point.x <= frozenRect.left) ; else if (frozenRect.right > 0 && width - point.x <= frozenRect.right) {\r\n            point.x = contentWidth - (width - point.x);\r\n        } else {\r\n            point.x = point.x + this.dataGroup.scrollLeft;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    _getSeparatorColumn(event) {\r\n        const GAP = 5;\r\n        const point = this._mouseEventToLocal(event);\r\n        let found = null;\r\n        this._headerDimensions.forEachHeaderLayouts((layout, column) => {\r\n            const right = layout.dx + layout.dw;\r\n            //right를 기준으로 경계영역이 보일때만 계산한다.\r\n            if ((!column.isLeaf || layout.width - (layout.sx + layout.sw) < 1) &&\r\n                point.x >= right - GAP && point.x < right + GAP && point.y >= layout.y && point.y < layout.y + layout.height) {\r\n                found = column;\r\n            }\r\n        });\r\n        if (found && !found.isLeaf) {\r\n            const leaves = this.dataGroup.columnCollection.getVisibleLeafColumns(found);\r\n            found = leaves[leaves.length - 1];\r\n        }\r\n        return found;\r\n    }\r\n\r\n    _onMouseDown(event) {\r\n        if (event.defaultPrevented) {\r\n            return;\r\n        }\r\n\r\n        const point = this._mouseEventToContent(event);\r\n        const column = point && this.getColumnByPosition(point.x, point.y);\r\n        if (column) {\r\n            this._mouseDownPoint = point;\r\n            this._mouseDownColumn = column;\r\n            this._mouseDownSeparatorColumn = this._getSeparatorColumn(event);\r\n            if (this._mouseDownSeparatorColumn) {\r\n                this._mouseDownColumn = null;\r\n                this._dispatchDataGridHeaderEvent('separator-down', this._mouseDownSeparatorColumn, event);\r\n            } else if (this._mouseDownColumn) {\r\n                this._dispatchDataGridHeaderEvent('header-down', this._mouseDownColumn, event);\r\n            }\r\n            document.addEventListener('mousemove', this._boundDocumentMouseMove);\r\n            document.addEventListener('mouseup', this._boundDocumentMouseUp);\r\n        }\r\n    }\r\n\r\n    _onMouseMove(event) {\r\n        if ((event.buttons & 1) !== 1) {\r\n            const separatorColumn = this._getSeparatorColumn(event);\r\n            const point = this._mouseEventToContent(event);\r\n            const column = !separatorColumn && this.getColumnByPosition(point.x, point.y);\r\n\r\n            if (separatorColumn !== this._overSeparatorColumn) {\r\n                if (this._overSeparatorColumn) {\r\n                    this._dispatchDataGridHeaderEvent('separator-out', this._overSeparatorColumn, event);\r\n                }\r\n                if (separatorColumn) {\r\n                    this._dispatchDataGridHeaderEvent('separator-over', separatorColumn, event);\r\n                }\r\n            }\r\n\r\n            if (column !== this._overColumn) {\r\n                if (this._overColumn) {\r\n                    this._dispatchDataGridHeaderEvent('header-out', this._overColumn, event);\r\n                }\r\n                if (column) {\r\n                    this._dispatchDataGridHeaderEvent('header-over', column, event);\r\n                }\r\n            }\r\n            this._overSeparatorColumn = separatorColumn;\r\n            this._overColumn = column;\r\n        }\r\n    }\r\n\r\n    _onMouseOut(event) {\r\n        if (this._overSeparatorColumn) {\r\n            this._dispatchDataGridHeaderEvent('separator-out', this._overSeparatorColumn, event);\r\n        }\r\n        if (this._overColumn) {\r\n            this._dispatchDataGridHeaderEvent('header-out', this._overColumn, event);\r\n        }\r\n        this._overSeparatorColumn = null;\r\n        this._overColumn = null;\r\n    }\r\n\r\n    _onDocumentMouseMove(event) {\r\n        const point = this._mouseEventToContent(event);\r\n        if (this._mouseDownSeparatorColumn) {\r\n            this._dispatchDataGridHeaderEvent('separator-drag', this._mouseDownSeparatorColumn, event);\r\n        } else if (this._mouseDownColumn) {\r\n            if (!this._mouseDownPoint || Point.distance(this._mouseDownPoint, point) > DRAG_SHIELD) {\r\n                this._dispatchDataGridHeaderEvent('header-drag', this._mouseDownColumn, event);\r\n                this._mouseDownPoint = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    _onDocumentMouseUp(event) {\r\n        document.removeEventListener('mousemove', this._boundDocumentMouseMove);\r\n        document.removeEventListener('mouseup', this._boundDocumentMouseUp);\r\n\r\n        let point = this._mouseEventToContent(event);\r\n        let column = point && this.getColumnByPosition(point.x, point.y);\r\n        let separatorColumn = this._getSeparatorColumn(event);\r\n\r\n        if (this._mouseDownSeparatorColumn) {\r\n            column = null;\r\n        }\r\n\r\n        if (separatorColumn || column) {\r\n            let eventType;\r\n            if (this._lastClickTime >= 0 && Date.now() - this._lastClickTime < DOUBLE_CLICK_DELAY$1) {\r\n                this._lastClickTime = -1;\r\n                eventType = separatorColumn ? 'separator-double-click' : 'header-double-click';\r\n            } else {\r\n                this._lastClickTime = Date.now();\r\n                eventType = separatorColumn ? 'separator-click' : 'header-click';\r\n            }\r\n\r\n            this._dispatchDataGridHeaderEvent(eventType, separatorColumn || column, event);\r\n        }\r\n\r\n        if (this._mouseDownSeparatorColumn) {\r\n            this._dispatchDataGridHeaderEvent('separator-up', this._mouseDownSeparatorColumn, event);\r\n        }\r\n\r\n        if (this._mouseDownColumn) {\r\n            this._dispatchDataGridHeaderEvent('header-up', column, event);\r\n        }\r\n\r\n        this._mouseDownSeparatorColumn = null;\r\n        this._mouseDownColumn = null;\r\n    }\r\n\r\n    _onDataGroupEvent(event) {\r\n        switch (event.type) {\r\n            case 'normalized-columns-change':\r\n                this.invalidateFor(Reason.COLUMNS_CHANGE);\r\n                break;\r\n            case 'visible-columns-change':\r\n                this.invalidateFor(Reason.VISIBLE_COLUMNS_CHANGE);\r\n                break;\r\n            case 'column-size-change':\r\n                this.invalidateFor(Reason.COLUMN_UPDATE);\r\n                break;\r\n            case 'column-visible':\r\n                this.invalidateFor(Reason.COLUMN_VISIBLE);\r\n                break;\r\n            case 'horizontal-scroll-position-change':\r\n                this.invalidateFor(Reason.HORIZONTAL_SCROLL_CHANGE);\r\n                break;\r\n            case 'group-size-change':\r\n                this.invalidateFor(Reason.GROUP_SIZE_CHANGE);\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nHeaderGroup.withDom('<div class=\"tachyon-group-header\"></div>');\n\nclass CrossCellPosition extends CellPosition {\n    constructor(rowIndex, columnIndex, endRowIndex, endColumnIndex) {\n        super(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n        this._crossCellPositions = [];\n    }\n\n    /**\n     * 셀의 상단 행 인덱스입니다.\n     * @returns {number}\n     */\n    get crossCellPositions() {\n        return this._crossCellPositions;\n    }\n\n    set crossCellPositions(cells) {\n        this._crossCellPositions = cells || [];\n    }\n\n    containsCross(columnIndex, rowIndex) {\n        return this.crossCellPositions.some(c => c.contains(columnIndex, rowIndex));\n    }\n}\n\nfunction internalFindCell(cells, rowIndex, columnIndex) {\n\tconst numCells = cells.length;\n\tfor (let i = 0; i < numCells; i++) {\n\t\tlet cell = cells[i];\n\t\tif (!cell.isCrossed && rowIndex < cell.y) {\n\t\t\tbreak;\n\t\t}\n\t\tif (cell.contains(columnIndex, rowIndex)) {\n\t\t\treturn cell;\n\t\t}\n\t}\n\n\t/*for (let i = cells.length - 1; i >= 0; i--) {\n\t\tlet cell = cells[i];\n\t\tif (!cell.isCrossed && cell.endRowIndex < rowIndex) {\n\t\t\tbreak;\n\t\t}\n\t\tif (cell.contains(columnIndex, rowIndex)) {\n\t\t\treturn cell;\n\t\t}\n\t}\n\t*/\n\treturn null;\n}\n\nclass Merger {\n\tconstructor(dataGroup) {\n\t\tthis._dataGroup = dataGroup;\n\t\tthis._cells = [];\n\n\t\tthis._affectColumnsMap = new Map();\n\t\tthis._collection = null;\n\t\tthis._compareFunction = null;\n\t\tthis._columns = [];\n\t\tthis._targetColumnIndices = [];\n\t\tthis._doneRowsMap = {};\n\t\tthis._needUpdate = true;\n\t\tthis._crossCells = [];\n\n\t\tthis._visibleRect = null;\n\t\tthis._visibleCells = [];\n\t}\n\n\t/**\n\t * 셀 목록을 환합니다.\n\t * @returns {Array<CellPosition>}\n\t */\n\tgetCells() {\n\t\treturn this._cells.slice(0);\n\t}\n\n\tgetCrossCells() {\n\t\tif (this._needUpdate) {\n\t\t\tthis._needUpdate = false;\n\t\t\tthis._crossCells = this._cells.reduce((arr, cell) => {\n\t\t\t\tif (cell instanceof CrossCellPosition) {\n\t\t\t\t\tarr = arr.concat(cell.crossCellPositions);\n\t\t\t\t}\n\t\t\t\treturn arr;\n\t\t\t}, []);\n\t\t}\n\t\treturn this._crossCells;\n\t}\n\n\t/**\n\t * 행당 셀을 추가합니다, 교차된 다른 셀은 삭제됩니다.\n\t * @param cell\n\t * @returns {boolean} 추가 되었으면 'true' 반환합니다.\n\t */\n\taddCell(cell) {\n\t\tif (!cell.isMerged) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.removeCell(cell);\n\t\tthis._internalAddCell(cell);\n\t\treturn true;\n\t}\n\n\t_internalAddCell(cell) {\n\t\tthis._needUpdate = true;\n\t\tconst cells = this._cells;\n\t\tconst numCells = cells.length;\n\t\tif (numCells <= 0) {\n\t\t\tcells.push(cell);\n\t\t\treturn true;\n\t\t}\n\n\t\tconst ty = cell.y;\n\t\tconst tx = cell.x;\n\t\tfor (let i = 0; i < numCells; i++) {\n\t\t\tconst c = cells[i];\n\t\t\tconst sy = c.y;\n\t\t\tconst sx = c.x;\n\t\t\t//추가될 셀의\n\t\t\t//행 인덱스가 작을 때\n\t\t\t//행 인덱스가 같고 컬럼 인덱스가 작을 때\n\t\t\tif (ty < sy || (ty === sy && tx < sx)) {\n\t\t\t\tcells.splice(i, 0, cell);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tcells.push(cell);\n\t\treturn true;\n\t}\n\n\t/**\n\t * 해당 셀과 교차한 모든 셀을 삭제합니다.\n\t * @param cell\n\t * @returns {Array<CellPosition>}\n\t */\n\tremoveCell(cell) {\n\t\tthis._needUpdate = true;\n\t\tconst cells = this._cells;\n\t\tconst removedCells = [];\n\t\tlet index = 0;\n\n\t\twhile (index < cells.length) {\n\t\t\tlet c = cells[index];\n\t\t\t//셀 삭제\n\t\t\tif (cell.containsRect(c)) {\n\t\t\t\tcells.splice(index, 1);\n\t\t\t\tremovedCells.push(c);\n\t\t\t} else {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn removedCells;\n\t}\n\n\t/**\n\t * 해당 셀 목록과 교차한 모든 셀을 삭제합니다.\n\t * @param cells\n\t * @returns {Array<CellPosition>[]}\n\t */\n\tremoveCells(cells) {\n\t\treturn (cells || []).map(cell => (this.removeCell(cell)));\n\t}\n\n\tinsertRows(index, count) {\n\t\tthis._needUpdate = true;\n\t\tconst cells = this._cells.slice(0);\n\t\tconst numCells = cells.length;\n\t\tconst target = new CellPosition(index, 0, index + count - 1, 1073741824);\n\t\tconst removed = [];\n\n\t\tfor (let i = numCells - 1; i >= 0; i--) {\n\t\t\tlet cell = cells[i];\n\t\t\tif (index <= cell.y) {\n\t\t\t\tcell.y += count;\n\t\t\t} else if (cell.rowCount > 1 && target.intersects(cell)) {\n\t\t\t\t//index 포함하고 cell 크기에 영향을 줄때 삭제\n\t\t\t\tremoved.push.apply(removed, cells.splice(i, 1));\n\t\t\t}\n\t\t}\n\t\tthis._cells = cells;\n\t}\n\n\tdeleteRows(index, count) {\n\t\tthis._needUpdate = true;\n\t\tconst cells = this._cells.slice(0);\n\t\tconst numCells = cells.length;\n\t\tconst target = new CellPosition(index, 0, index + count - 1, 1073741824);\n\t\tconst endRowIndex = target.endRowIndex;\n\t\tconst removed = [];\n\n\t\tfor (let i = numCells - 1; i >= 0; i--) {\n\t\t\tlet cell = cells[i];\n\t\t\tif (endRowIndex < cell.y) {\n\t\t\t\tcell.y -= count;\n\t\t\t} else if (target.intersects(cell)) {\n\t\t\t\t//cell 크기에 영향을 줄때 삭제\n\t\t\t\tremoved.push.apply(removed, cells.splice(i, 1));\n\t\t\t}\n\t\t}\n\t\tthis._cells = cells;\n\t}\n\n\tinsertColumns(index, count) {\n\n\t}\n\n\tdeleteColumns(index, count) {\n\n\t}\n\n\tfindCell(rowIndex, columnIndex) {\n\t\tlet found = internalFindCell(this._cells, rowIndex, columnIndex);\n\t\tif (!found) {\n\t\t\tfound = internalFindCell(this.getCrossCells(), rowIndex, columnIndex);\n\t\t}\n\t\treturn found;\n\t}\n\n\tfindCellFromVisibleRect(rowIndex, columnIndex) {\n\t\tif (!this._visibleRect) {\n\t\t\treturn null;\n\t\t}\n\t\tlet found = null;\n\t\tif (!this._visibleRect.contains(columnIndex, rowIndex)) {\n\t\t\tfound = internalFindCell(this._cells, rowIndex, columnIndex);\n\t\t} else if (this._visibleCells.length > 0) {\n\t\t\tfound = internalFindCell(this._visibleCells, rowIndex, columnIndex);\n\t\t}\n\n\t\tif (!found) {\n\t\t\tfound = internalFindCell(this.getCrossCells(), rowIndex, columnIndex);\n\t\t}\n\t\treturn found\n\t}\n\n\t/**\n\t * 보이는 영역 지정\n\t * @param rowIndex\n\t * @param columnIndex\n\t * @param endRowIndex\n\t * @param endColumnIndex\n\t */\n\tsetVisibleRect(rowIndex, columnIndex, endRowIndex, endColumnIndex) {\n\t\tconst rect = new CellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n\t\tconst cells = this._cells;\n\t\tconst visibleCells = [];\n\t\tfor (let i = 0, numCells = cells.length; i < numCells; i++) {\n\t\t\tlet cell = cells[i];\n\t\t\tif (endRowIndex < cell.y) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (cell.intersects(rect)) {\n\t\t\t\tvisibleCells.push(cell);\n\t\t\t}\n\t\t}\n\n\t\tthis._visibleRect = rect;\n\t\tthis._visibleCells = visibleCells;\n\t}\n\n\n\tunionCellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex, includeCrossCells) {\n\t\tlet cells = this.getCells();\n\t\tif (includeCrossCells) {\n\t\t\tcells = cells.concat(this.getCrossCells());\n\t\t}\n\t\tlet maxCell = new CellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n\t\tfor (let i = 0; i < cells.length; i++) {\n\t\t\tlet cell = cells[i];\n\t\t\tif (maxCell.intersects(cell)) {\n\t\t\t\tif (!maxCell.containsRect(cell)) {\n\t\t\t\t\tmaxCell = maxCell.union(cell);\n\t\t\t\t}\n\t\t\t\tcells.splice(i, 1);\n\t\t\t\t//처음부터 다시.\n\t\t\t\ti = -1;\n\t\t\t}\n\t\t}\n\t\treturn maxCell;\n\t}\n\n\tclear() {\n\t\tthis._cells = [];\n\t\tthis._crossCells = [];\n\t\tthis._affectColumnsMap.clear();\n\t\tthis._doneRowsMap = {};\n\t}\n\n\tanalysisReady() {\n\t\tconst columns = this._dataGroup.normalizedColumns.slice(0);\n\t\tconst columnIndices = columns.filter(column => column.isRowMerge || column.isColumnMerge).map(column => column.index);\n\n\t\tthis._affectColumnsMap.clear();\n\t\tthis._doneRowsMap = {};\n\t\tthis._collection = this._dataGroup.collection;\n\t\tthis._columns = columns;\n\t\tthis._targetColumnIndices = columnIndices;\n\t\tthis._compareFunction = this._dataGroup.mergeCompare;\n\n\t\tthis._targetColumnIndices.forEach(index => {\n\t\t\tconst column = this._columns[index];\n\t\t\tconst mergeDependColumns = column.mergeDependColumns;\n\t\t\tif (Array.isArray(mergeDependColumns)) {\n\t\t\t\tconst found = columns.filter(column => mergeDependColumns.indexOf(column.dataField) >= 0);\n\t\t\t\tif (found.length > 0) {\n\t\t\t\t\tthis._affectColumnsMap.set(column, found);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tanalysisAll() {\n\t\tlet numItems = this._collection && this._collection.length || 0;\n\t\tfor (let i = 0; i < numItems; i++) {\n\t\t\tthis.analysisRow(i);\n\t\t}\n\t}\n\n\tanalysisRow(rowIndex) {\n\t\tif (!this._doneRowsMap[rowIndex]) {\n\t\t\tthis._doneRowsMap[rowIndex] = true;\n\t\t\tthis._internalAnalysisRow(rowIndex);\n\t\t}\n\t}\n\n\tanalysisRows(from, to) {\n\t\tfor (let i = from; i <= to; i++) {\n\t\t\tthis.analysisRow(i);\n\t\t}\n\t}\n\n\t_internalAnalysisRow(rowIndex) {\n\t\tlet numIndices = this._targetColumnIndices.length,\n\t\t\tcells = [];\n\n\t\tfor (let i = 0; i < numIndices; i++) {\n\t\t\tlet columnIndex = this._targetColumnIndices[i];\n\t\t\tif (!internalFindCell(cells, rowIndex, columnIndex) && !internalFindCell(this._cells, rowIndex, columnIndex)) {\n\t\t\t\tlet cell = this._analysisCell(rowIndex, columnIndex);\n\t\t\t\tif (cell) {\n\t\t\t\t\tcells.push(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.removeCells(cells);\n\n\t\twhile (cells.length > 0) {\n\t\t\tthis._internalAddCell(cells.shift());\n\t\t}\n\t}\n\n\t_analysisCell(rowIndex, columnIndex) {\n\n\t\tlet sourceItem = this._collection.get(rowIndex),\n\t\t\tsourceColumn = this._columns[columnIndex],\n\t\t\tsourceValue = this._dataGroup.itemToLabel(sourceItem, sourceColumn),\n\t\t\tendRowIndex = rowIndex,\n\t\t\tendColumnIndex = columnIndex;\n\n\t\tif (sourceColumn.isRowMerge) {\n\t\t\tendRowIndex = this._compare(rowIndex, sourceColumn, sourceValue, sourceColumn);\n\t\t}\n\n\t\t//세로 비교가 끝나면 가로 비교를 한다.\n\t\tif (sourceColumn.isColumnMerge) {\n\t\t\tlet numIndices = this._targetColumnIndices.length,\n\t\t\t\toffset = this._targetColumnIndices.indexOf(columnIndex),\n\t\t\t\tcurIndex = columnIndex,\n\t\t\t\tnextColumnIndex, nextEndRowIndex;\n\n\t\t\tfor (let i = offset + 1; i < numIndices; i++) {\n\t\t\t\tnextColumnIndex = this._targetColumnIndices[i];\n\t\t\t\tif (curIndex !== nextColumnIndex - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t//마지막행 인덱스가 같아 병합할 영역이다.\n\t\t\t\tnextEndRowIndex = this._compare(rowIndex, this._columns[nextColumnIndex], sourceValue, sourceItem, sourceColumn);\n\n\t\t\t\tif (nextEndRowIndex < endRowIndex) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tendColumnIndex = nextColumnIndex;\n\t\t\t\tcurIndex = nextColumnIndex;\n\t\t\t}\n\t\t}\n\n\t\tif (rowIndex !== endRowIndex || columnIndex !== endColumnIndex) {\n\t\t\treturn new CellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n\t\t}\n\t\treturn null;\n\t}\n\n\t_compare(startRowIndex, column, value, sourceColumn) {\n\n\t\tlet endRowIndex = this._internalCompare(startRowIndex, column, value, sourceColumn);\n\n\t\tif (startRowIndex < endRowIndex) {\n\t\t\t//영향을 주는 컬럼 체크.\n\t\t\tlet columns = this._affectColumnsMap.get(column) || [],\n\t\t\t\tnumColumns = columns.length,\n\t\t\t\titem = this._collection.get(startRowIndex);\n\n\t\t\tfor (let i = 0; i < numColumns; i++) {\n\t\t\t\tlet column = columns[i];\n\t\t\t\tlet index = this._internalCompare(startRowIndex, column, this._dataGroup.itemToLabel(item, column), sourceColumn);\n\t\t\t\tif (index < endRowIndex) {\n\t\t\t\t\tendRowIndex = index;\n\t\t\t\t}\n\n\t\t\t\tif (startRowIndex >= endRowIndex) {\n\t\t\t\t\tendRowIndex = startRowIndex;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn endRowIndex;\n\t}\n\n\t_internalCompare(startRowIndex, column, value, sourceColumn) {\n\t\tlet num = this._collection.length,\n\t\t\tsourceItem = this._collection.get(startRowIndex),\n\t\t\tendRowIndex = -1;\n\n\t\t//비교 데이타.\n\t\tfor (let i = startRowIndex; i < num; i++) {\n\t\t\tlet targetItem = this._collection.get(i);\n\t\t\tlet nextValue = this._dataGroup.itemToLabel(targetItem, column);\n\n\t\t\tif (this._compareFunction != null) {\n\t\t\t\tif (!this._compareFunction(targetItem, column, sourceItem, sourceColumn)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (value !== nextValue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tendRowIndex = i;\n\t\t}\n\t\treturn endRowIndex;\n\t}\n}\n\nconst Mergeable = {\n\n\tget merger() {\n\t\tif (!this._merger) {\n\t\t\tthis._merger = new Merger(this);\n\t\t}\n\t\treturn this._merger;\n\t},\n\n\t/**\n\t * 병합된 셀 목록을 반환합니다.\n\t * @returns {Array<CellPosition>}\n\t */\n\tgetMergeCellPositions() {\n\t\treturn this.merger.getCells();\n\t},\n\n\t/**\n\t * 병합셀을 추가합니다.\n\t * @param cell\n\t * @returns {Boolean}\n\t */\n\taddMergeCellPosition(cell) {\n\t\treturn this.merger.addCell(cell);\n\t},\n\n\t/**\n\t * 지정된 셀영역에 있는 병합셀을 삭제합니다.\n\t * @param cell\n\t * @returns {Array<CellPosition>}\n\t */\n\tremoveMergeCellPosition(cell) {\n\t\treturn this.merger.removeCell(cell);\n\t},\n\n\t/**\n\t * 지정된 셀영역에 있는 병합셀을 삭제합니다.\n\t * @param cells\n\t * @returns {Array<CellPosition>}\n\t */\n\tremoveMergeCellPositions(cells) {\n\t\treturn this.merger.removeCells(cells);\n\t},\n\n\t/**\n\t * 지정된 위치에 병합셀을 반환합니다.\n\t * @param rowIndex 행인덱스\n\t * @param columnIndex 컬럼인덱스\n\t * @returns {CellPosition}\n\t */\n\tfindMergeCellPosition(rowIndex, columnIndex) {\n\t\treturn this.merger.findCell(rowIndex, columnIndex);\n\t},\n\n\tfindMergeCellPositionFromVisibleRect(rowIndex, columnIndex) {\n\t\treturn this.merger.findCellFromVisibleRect(rowIndex, columnIndex);\n\t},\n\n\t/**\n\t *\n\t * @param rowIndex\n\t * @param columnIndex\n\t * @param endRowIndex\n\t * @param endColumnIndex\n\t */\n\tsetMergeVisibleRect(rowIndex, columnIndex, endRowIndex, endColumnIndex) {\n\t\treturn this.merger.setVisibleRect(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n\t},\n\n\tunionCellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex, includeCrossCells = false) {\n\t\treturn this.merger.unionCellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex, includeCrossCells);\n\t},\n\n\tclearCellMerger() {\n\t\treturn this.merger.clear();\n\t},\n\n\tanalysisReady() {\n\t\tthis.merger.analysisReady();\n\t},\n\n\tanalysisAll() {\n\t\tthis.merger.analysisAll();\n\t},\n\n\tanalysisRow(rowIndex) {\n\t\tthis.merger.analysisRow(rowIndex);\n\t},\n\n\tanalysisRows(from, to) {\n\t\tthis.merger.analysisRows(from, to);\n\t},\n\n\tcollectionChangedForCellMerger(event) {\n\t\tlet detail = event.detail,\n\t\t\tindex = detail.index,\n\t\t\titems = detail.items || [];\n\n\t\tswitch (detail.kind) {\n\t\t\tcase 'add':\n\t\t\t\tthis.merger.insertRows(index, items.length);\n\t\t\t\tbreak;\n\t\t\tcase 'remove':\n\t\t\t\tthis.merger.deleteRows(index, items.length);\n\t\t\t\tbreak;\n\t\t}\n\t},\n};\n\nfunction is(a, b) {\r\n    return a === b || (a == null && b == null) || (a instanceof Date && b instanceof Date && a.getTime() === b.getTime());\r\n}\r\n\r\n\r\nfunction equals(a, b, isDeep = false, compare = is) {\r\n    let isFirst = true;\r\n    const internalEqual = (a, b, isDeep, compare) => {\r\n        if (!isFirst && compare(a, b)) {\r\n            return true;\r\n        }\r\n        isFirst = false;\r\n        if (typeof a !== 'object' || a == null || typeof b !== 'object' || b == null) {\r\n            return false;\r\n        }\r\n        //array, object\r\n        const keysA = Object.keys(a);\r\n        const keysB = Object.keys(b);\r\n        if (keysA.length !== keysB.length) {\r\n            return false;\r\n        }\r\n        return keysA.every(key => (key in b && isDeep ? internalEqual(a[key], b[key], isDeep, compare) : compare(a[key], b[key])));\r\n    };\r\n    return internalEqual(a, b, isDeep, compare);\r\n}\r\n\r\n\r\n/**\r\n * a와 b의 얕은 비교를 수행하는 함수입니다.\r\n * 즉, 두 값이 첫 번째 레벨에서만 동일한지 확인합니다.\r\n * compare 이용해 사용자 정의 비교 로직을 적용할 수 있습니다.\r\n * @param a\r\n * @param b\r\n * @param compare 사용자 정의 비교 함수\r\n */\r\nfunction shallowEquals(a, b, compare = is) {\r\n    return equals(a, b, false, compare);\r\n}\n\nclass SelectionCellPosition extends CellPosition {\n    constructor(rowIndex, columnIndex, endRowIndex, endColumnIndex, isAdded) {\n        super(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n        this.isAdded = isAdded;\n    }\n}\n\n\nconst SINGLE_ROW = 'singleRow';\nconst MULTIPLE_ROWS = 'multipleRows';\nconst SINGLE_CELL = 'singleCell';\nconst MULTIPLE_CELLS = 'multipleCells';\n\nclass Selector {\n    constructor(dataGroup) {\n        this._dataGroup = dataGroup;\n        this._selectionCells = [];\n        this._maxBounds = null;\n        this._cells = [];\n        this._rows = [];\n        this._needUpdateMaxBounds = true;\n        this._needUpdateCells = true;\n\n        this.mode = SINGLE_ROW;\n    }\n\n    get isRowMode() {\n        return this.mode === SINGLE_ROW || this.mode === MULTIPLE_ROWS;\n    }\n\n    get isCellMode() {\n        return this.mode === SINGLE_CELL || this.mode === MULTIPLE_CELLS;\n    }\n\n    get isMultipleMode() {\n        return this.mode === MULTIPLE_ROWS || this.mode === MULTIPLE_CELLS;\n    }\n\n    get isSingleSelection() {\n        return this._selectionCells.length === 1 && this._selectionCells[0].isAdded;\n    }\n\n    get selectedCells() {\n        return this._selectionCells;\n    }\n\n    getSingleCell() {\n        if (this.isSingleSelection) {\n            return this._selectionCells[0].clone();\n        }\n        return null;\n    }\n\n    getRows() {\n        const rows = [];\n        const maxBounds = this._getMaxBounds();\n        const top = maxBounds.top;\n        const bottom = maxBounds.bottom;\n        const tempCell = new CellPosition(0, 0);\n        for (let index = top; index <= bottom; index++) {\n            tempCell.y = index;\n            if (this.containsCell(tempCell)) {\n                rows.push(index);\n            }\n        }\n        return rows;\n    }\n\n    getCells() {\n        if (this._needUpdateCells) {\n            const bounds = this._getMaxBounds();\n            const rowIndex = bounds.rowIndex;\n            const endRowIndex = bounds.endRowIndex;\n            const columnIndex = bounds.columnIndex;\n            const endColumnIndex = bounds.endColumnIndex;\n            const cells = [];\n            const mergedCells = [];\n            const hasMergedCell = (rowIndex, columnIndex) => {\n                for (let i = 0; i < mergedCells.length; i++) {\n                    if (mergedCells[i].contains(columnIndex, rowIndex)) {\n                        return true;\n                    }\n                }\n                return false;\n            };\n            for (let r = rowIndex; r <= endRowIndex; r++) {\n                for (let c = columnIndex; c <= endColumnIndex; c++) {\n                    if (!hasMergedCell(r, c)) {\n                        let cell = this._dataGroup.findMergeCellPosition(r, c);\n                        const x = cell && cell.x || c;\n                        const y = cell && cell.y || r;\n                        const w = cell && cell.width || 0;\n                        const h = cell && cell.height || 0;\n                        if (this.containsBounds(x, y, w, h)) {\n                            if (!cell) {\n                                cell = new CellPosition(r, c);\n                            }\n                            cells.push(cell);\n                            if (cell.isMerged) {\n                                mergedCells.push(cell);\n                            }\n                        }\n                    }\n                }\n            }\n            this._cells = cells;\n            this._needUpdateCells = false;\n        }\n\n        return this._cells;\n    }\n\n    setCell(cell) {\n        return this.setCells(cell ? [cell] : []);\n    }\n\n    setCells(cells) {\n        this.removeAll();\n        this.addCells(cells);\n        return true;\n    }\n\n    addCells(cells) {\n        return this.addCellsAt(cells, this._selectionCells.length);\n    }\n\n    addCellsAt(cells, index) {\n        let numCells = cells && cells.length || 0,\n            i, flag = false;\n        for (i = 0; i < numCells; i++) {\n            if (this.addCellAt(cells[i], index + i)) {\n                flag = true;\n            }\n        }\n        return flag;\n    }\n\n    addCell(cell) {\n        return this.addCellAt(cell, this._selectionCells.length);\n    }\n\n    addCellAt(cell, index) {\n        if (cell && !this.containsCell(cell)) {\n            let selectionCell = this._cellToSelectionCell(cell, true);\n            this._selectionCells.splice(index, 0, selectionCell);\n            this._needUpdateMaxBounds = true;\n            this._needUpdateCells = true;\n            return true;\n        }\n        return false;\n    }\n\n    removeCell(cell) {\n        if (cell && this.containsCell(cell)) {\n            const selectionCell = this._cellToSelectionCell(cell, false);\n            this._selectionCells.push(selectionCell);\n            this._needUpdateMaxBounds = true;\n            this._needUpdateCells = true;\n            return true;\n        }\n        return false;\n    }\n\n    removeAll() {\n        if (this._selectionCells.length <= 0) {\n            return false;\n        }\n        this._selectionCells = [];\n        this._needUpdateMaxBounds = true;\n        this._needUpdateCells = true;\n        return true;\n    }\n\n    itemsAdded(index, items) {\n        if (!items) {\n            return;\n        }\n        const numCells = this._selectionCells.length;\n        const numItems = items.length;\n        for (let i = 0; i < numCells; i++) {\n            const cell = this._selectionCells[i];\n            if (index <= cell.y) {\n                cell.y += numItems;\n            }\n        }\n        this._needUpdateMaxBounds = true;\n        this._needUpdateCells = true;\n    }\n\n    itemsRemoved(index, items) {\n        const numCells = this._selectionCells.length;\n        const numItems = items.length;\n        for (let i = numCells - 1; i >= 0; i--) {\n            const cell = this._selectionCells[i];\n            if (index < cell.y) {\n                cell.y -= numItems;\n            } else if (index <= cell.y && cell.height <= numItems) {\n                this._selectionCells.splice(i, 1);\n            } else if (index <= cell.y + cell.height && cell.y <= index + numItems) ;\n        }\n        this._needUpdateMaxBounds = true;\n        this._needUpdateCells = true;\n    }\n\n    containsCell(cell) {\n        return cell && this.containsBounds(cell.x, cell.y, cell.width, cell.height);\n    }\n\n    containsBounds(x, y, width, height) {\n        const cells = this._selectionCells;\n        const numCells = cells.length;\n        let index = -1;\n        for (let i = numCells - 1; i >= 0; i--) {\n            let cell = cells[i];\n            if (cell.isAdded && cell.contains(x, y, width, height)) {\n                index = i;\n                break;\n            }\n        }\n\n        if (index === -1) {\n            return false;\n        }\n\n        for (let i = index + 1; i < numCells; i++) {\n            let cell = cells[i];\n            if (!cell.isAdded && cell.contains(x, y, width, height)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    clear() {\n        this._selectionCells = [];\n        this._cells = [];\n        this._maxBounds = null;\n        this._needUpdateMaxBounds = true;\n        this._needUpdateCells = true;\n    }\n\n    _cellToSelectionCell(cell, isAdded) {\n        if (cell instanceof SelectionCellPosition) {\n            cell.isAdded = isAdded;\n            return cell;\n        }\n        return new SelectionCellPosition(cell.rowIndex, cell.columnIndex, cell.endRowIndex, cell.endColumnIndex, isAdded);\n    }\n\n    _getMaxBounds() {\n        if (this._needUpdateMaxBounds) {\n            const numCells = this._selectionCells.length;\n            let maxBounds;\n            if (numCells > 0) {\n                maxBounds = this._selectionCells[0].clone();\n                for (let i = 1, bounds; i < numCells; i++) {\n                    bounds = this._selectionCells[i];\n                    if (bounds.isAdded) {\n                        maxBounds.left = Math.min(maxBounds.left, bounds.left);\n                        maxBounds.right = Math.max(maxBounds.right, bounds.right);\n                        maxBounds.top = Math.min(maxBounds.top, bounds.top);\n                        maxBounds.bottom = Math.max(maxBounds.bottom, bounds.bottom);\n                    }\n                }\n            } else {\n                maxBounds = new CellPosition(0, 0, 0, 0);\n            }\n            this._maxBounds = maxBounds;\n            this._needUpdateMaxBounds = false;\n        }\n        return this._maxBounds;\n    }\n}\n\nconst Selectable = {\n    get selector() {\n        if (!this._selector) {\n            this._selector = new Selector(this);\n            this._counter = new EventCounter((kind, cell) => {\n                return this._dispatchSelectionEvent('selection-changing', kind, cell, true);\n            }, (kind, cell) => {\n                return this._dispatchSelectionEvent('selection-change', kind, cell, false);\n            });\n        }\n        return this._selector;\n    },\n    get hasSelectionMode() {\n        return this.isRowSelectionMode || this.isCellSelectionMode;\n    },\n    get isRowSelectionMode() {\n        return this.selector.isRowMode;\n    },\n    get isCellSelectionMode() {\n        return this.selector.isCellMode;\n    },\n    get isMultipleSelectionMode() {\n        return this.selector.isMultipleMode;\n    },\n    get isSingleSelection() {\n        return this.selector.isSingleSelection;\n    },\n    get selectionMode() {\n        return this.selector.mode;\n    },\n    set selectionMode(value) {\n        this.selector.mode = value;\n    },\n\n    get selectedIndices() {\n        let indices;\n        if (this.isRowSelectionMode) {\n            indices = this.selector.getRows();\n        } else {\n            indices = [];\n        }\n        return indices;\n    },\n    set selectedIndices(indices) {\n        this.setSelectedIndices(indices);\n    },\n    get selectedIndex() {\n        let indices = this.selectedIndices;\n        if (indices && indices.length > 0) {\n            return indices[0];\n        }\n        return -1;\n    },\n    set selectedIndex(value) {\n        if (this.selectedIndex !== value) {\n            this.setSelectedIndices([value]);\n        }\n    },\n    get selectedItems() {\n        return this.indicesToItems(this.selectedIndices);\n    },\n    set selectedItems(items) {\n        if (this.collection) {\n            this.selectedIndices = items.reduce((indices, item) => {\n                const index = this.collection.indexOf(item);\n                if (index >= 0) {\n                    indices.push(index);\n                }\n                return indices;\n            }, []);\n        }\n    },\n    get selectedItem() {\n        const items = this.selectedItems;\n        return items && items.length > 0 && items[0] || null;\n    },\n    set selectedItem(value) {\n        if (value !== this.selectedItem) {\n            this.selectedItems = value && [value] || [];\n        }\n    },\n    get selectedCells() {\n        return this.selector.getCells();\n    },\n    set selectedCells(cells) {\n        this.setSelectedCells(cells);\n    },\n    get selectedCell() {\n        const cells = this.selectedCells;\n        return cells && cells.length > 0 && cells[0] || null;\n    },\n    set selectedCell(cell) {\n        if (!(this.selectedCell && this.selectedCell.equals(cell))) {\n            if (cell) {\n                this.setSelectedCells([cell]);\n            } else {\n                this.removeSelectedAll();\n            }\n        }\n    },\n    getSingleCell() {\n        return this.selector.getSingleCell();\n    },\n    containsSelectedCell(cell) {\n        return this.selector.containsCell(cell);\n    },\n    containsSelectedPosition(rowIndex, columnIndex) {\n        return this.selector.containsBounds(columnIndex, rowIndex);\n    },\n    setSelectedIndices(indices) {\n        let cells = [];\n        indices.forEach(index => {\n            cells.push(new CellPosition(index, 0));\n        });\n        return this.setSelectedCells(cells);\n    },\n    addSelectedRow(index) {\n        return this.addSelectedCell(new CellPosition(index, 0));\n    },\n    removeSelectedRow(index) {\n        return this.removeSelectedCell(new CellPosition(index, 0));\n    },\n    setSelectedCell(cell) {\n        return this.setSelectedCells(cell ? [cell] : []);\n    },\n    setSelectedCells(cells) {\n        if (!this.isMultipleSelectionMode && cells && cells.length > 0) {\n            cells = cells.slice(0, 1);\n        }\n        if (shallowEquals(this.selector.selectedCells, cells, (a, b) => a && b && a.equals(b))) {\n            return false;\n        }\n        return this._executeSelectionFunction('setCells', 'set', cells);\n    },\n    addSelectedCell(cell) {\n        if (!this.isMultipleSelectionMode) {\n            return this.setSelectedCell(cell);\n        }\n        return this._executeSelectionFunction('addCell', 'add', cell);\n    },\n    removeSelectedCell(cell) {\n        return this._executeSelectionFunction('removeCell', 'remove', cell);\n    },\n    removeSelectedAll() {\n        return this._executeSelectionFunction('removeAll', 'remove');\n    },\n    indicesToItems(indices) {\n        if (this.collection) {\n            const numIndices = indices && indices.length || 0;\n            const items = [];\n            for (let i = 0; i < numIndices; i++) {\n                const index = indices[i];\n                const item = this.collection.get(index);\n                if (item) {\n                    items.push(item);\n                }\n            }\n            return items;\n        }\n        return null;\n    },\n    clearSelection() {\n        this.selector.clear();\n    },\n    collectionChangedForSelection(e) {\n        let detail = e.detail;\n        switch (detail.kind) {\n            case 'add':\n                this._itemsAddedForSelection(detail.index, detail.items);\n                break;\n            case 'remove':\n                this._itemsRemovedForSelection(detail.index, detail.items);\n                break;\n        }\n    },\n    _executeSelectionFunction(funcName, kind, value) {\n        const helper = this.selector;\n        const eventCounter = this._counter;\n        const prevented = eventCounter.start(kind, value);\n        if (prevented) {\n            const result = helper[funcName].call(helper, value);\n            eventCounter.end(kind, value);\n            this.invalidateFor(Reason.SELECTION_CHANGE);\n            return result;\n        }\n        eventCounter.cancel();\n        return false;\n    },\n    _itemsAddedForSelection(index, items) {\n        this.selector.itemsAdded(index, items);\n    },\n    _itemsRemovedForSelection(index, items) {\n        this.selector.itemsRemoved(index, items);\n    },\n    _dispatchSelectionEvent(type, kind, cell, cancelable) {\n        const cells = Array.isArray(cell) ? cell : (cell ? [cell] : []);\n        return this.dispatchEvent(new CustomEvent(type, {\n            bubbles: false,\n            cancelable: cancelable,\n            detail: {\n                kind: kind,\n                cell: cells[0] || null,\n                cells: cells\n            }\n        }));\n    }\n};\n\nfunction createRootNode(source, childField) {\r\n    let node = Object.create({__ROOT_NODE__: true});\r\n    node[childField] = source;\r\n    return node;\r\n}\r\n\r\nfunction createChildrenField(node, childrenField) {\r\n    if (node && !(childrenField in node)) {\r\n        node[childrenField] = [];\r\n    }\r\n}\r\n\r\nfunction arrayInsert(array, index, items) {\r\n    Array.prototype.splice.apply(array, [index, 0].concat(items));\r\n}\r\n\r\nfunction arrayRemove(array, index, items) {\r\n    array.splice(index, items.length);\r\n}\r\n\r\nfunction find(parent, children, callback, isPostOrder, onlyOne) {\r\n    let numChildren = children && children.length || 0,\r\n        result = [];\r\n\r\n    for (let i = 0; i < numChildren; ++i) {\r\n        let child = children[i];\r\n        if (!isPostOrder) {\r\n            if (callback(child, parent, children)) {\r\n                result.push(child);\r\n                if (onlyOne) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n\r\n        let childChildren = this.getChildren(child);\r\n        if (childChildren && childChildren.length > 0) {\r\n            result = result.concat(find.call(this, child, childChildren, callback, isPostOrder, onlyOne));\r\n            if (result.length > 0 && onlyOne) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        if (isPostOrder) {\r\n            if (callback(child, parent, children)) {\r\n                result.push(child);\r\n                if (onlyOne) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\nfunction getDepth(node) {\r\n    let depth = 1;\r\n    node && node.children && node.children.forEach(child => {\r\n        depth = Math.max(depth, getDepth(child) + 1);\r\n    });\r\n    return depth;\r\n}\r\n\r\nconst NO_PARENT = 'noParent';\r\nconst PARENT_TO_ABOVE = 'parentToAbove';\r\n\r\nclass HierarchyList extends IList {\r\n    constructor(source) {\r\n        super();\r\n        this.nodeEventCounter = new EventCounter(this.dispatchNodeEvent.bind(this));\r\n\r\n        this._rootNode = null;\r\n        this._displayableNodes = [];\r\n        this._openNodesMap = new Map();\r\n        this._parentMap = new Map();\r\n        this._childrenMap = new Map();\r\n        this._childrenField = 'children';\r\n        this._displayPolicy = PARENT_TO_ABOVE;\r\n        this.source = source || [];\r\n    }\r\n\r\n    get displayableNodes() {\r\n        return this._displayableNodes;\r\n    }\r\n\r\n    get childrenField() {\r\n        return this._childrenField;\r\n    }\r\n\r\n    set childrenField(v) {\r\n        if (this._childrenField !== v) {\r\n            this._childrenField = v;\r\n            this._reset();\r\n        }\r\n    }\r\n\r\n    get displayPolicy() {\r\n        return this._displayPolicy;\r\n    }\r\n\r\n    set displayPolicy(v) {\r\n        if (this._displayPolicy !== v) {\r\n            this._displayPolicy = v;\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 부모 노드를 반환합니다.\r\n     * @param node 자식 노드입니다.\r\n     * @returns {*}\r\n     */\r\n    getParentNode(node) {\r\n        let parent = this._internalGetParentNode(node);\r\n        if (parent === this._rootNode) {\r\n            parent = null;\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 조상 노드 목록을 반환합니다.\r\n     * @param node\r\n     * @returns {Array}\r\n     */\r\n    getAncestorNodes(node) {\r\n        const pNodes = [];\r\n        let active = this.getParentNode(node);\r\n        while (active) {\r\n            pNodes.unshift(active);\r\n            active = this.getParentNode(active);\r\n        }\r\n        return pNodes;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 후손 노드 목록을 반환합니다.\r\n     * @param node\r\n     * @returns {Array}\r\n     */\r\n    getDescendantNodes(node) {\r\n        return this.find(o => node !== o, node);\r\n    }\r\n\r\n    /**\r\n     * @param node\r\n     * @return {null|unknown}\r\n     * @private\r\n     */\r\n    _internalGetParentNode(node) {\r\n        let parent = this._parentMap.get(node);\r\n        if (!parent && this._rootNode) {\r\n            let children = this.getNativeChildren(this._rootNode);\r\n            if (children && children.indexOf(node) >= 0) {\r\n                return null;\r\n            }\r\n            this._addAllParentMapping();\r\n            parent = this._parentMap.get(node);\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 자식노드들을 반환합니다.\r\n     * @param node 부모 노드입니다.\r\n     * @returns {Array} 자식노드 배열입니다.\r\n     */\r\n    getChildren(node) {\r\n        if (node == null) {\r\n            node = this._rootNode;\r\n        }\r\n\r\n        let children = [];\r\n        if (!this._childrenMap.has(node)) {\r\n            if (node === this._rootNode || (this.childrenField in node)) {\r\n                children = this.getNativeChildren(node);\r\n                this._addChildrenMapping(node, children);\r\n            }\r\n        }\r\n\r\n        children = this._childrenMap.get(node);\r\n        return children || [];\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 가공되지 않은 원본 자식노드들을 반환합니다.\r\n     * @param node 부모 노드입니다.\r\n     * @returns {Array} 자식노드 배열입니다.\r\n     */\r\n    getNativeChildren(node) {\r\n        if (!node) {\r\n            node = this._rootNode;\r\n        }\r\n\r\n        if (node && this.childrenField in node) {\r\n            return node[this.childrenField] || [];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * 해당노드 하위의 열린 노드들을 배열형태로 반환합니다.\r\n     * @param node 부모 노드입니다.\r\n     * @returns {Array} 자식노드 배열입니다.\r\n     */\r\n    getDisplayableChildren(node) {\r\n        return this._internalGetDisplayableChildren(node, false);\r\n    }\r\n\r\n    /**\r\n     * 해당노드의 형제노드들을 반환합니다.\r\n     * @returns {Array} 형제노드 배열입니다.\r\n     */\r\n    getSiblingNodes(node) {\r\n        const parentNode = this.getParentNode(node);\r\n        return this.getChildren(parentNode);\r\n    }\r\n\r\n    /**\r\n     * 해당 노드 부모의 기준으로 인덱스를 반환합니다.\r\n     * @param node\r\n     * @returns {Number} 형제 노드목록에서의 인덱스.\r\n     */\r\n    getNodeIndex(node) {\r\n        const nodes = this.getSiblingNodes(node) || [];\r\n        return nodes.indexOf(node);\r\n    }\r\n\r\n    _internalGetDisplayableChildren(node, doParentMapping) {\r\n        let result = [];\r\n        if (this.isOpenNode(node)) {\r\n            let children = this.getChildren(node);\r\n            children.forEach(child => {\r\n                if (doParentMapping) {\r\n                    this._addParentMapping(node, child);\r\n                }\r\n\r\n                if (this._displayPolicy === NO_PARENT) {\r\n                    if (!this.isOpenNode(child) || !this.hasChildren(child)) {\r\n                        result.push(child);\r\n                    }\r\n                } else if (this._displayPolicy === PARENT_TO_ABOVE) {\r\n                    result.push(child);\r\n                }\r\n\r\n                result = result.concat(this._internalGetDisplayableChildren(child, doParentMapping));\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드에 자식이 있는지 확인합니다.\r\n     * @param node\r\n     * @returns {boolean}\r\n     */\r\n    hasChildren(node) {\r\n        let children = this.getChildren(node);\r\n        return children && children.length > 0 || false;\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param node 추가할 자식 노드\r\n     * @returns {boolean}\r\n     */\r\n    addNode(parent, node) {\r\n        let children = this.getNativeChildren(parent),\r\n            numChildren = children && children.length || 0;\r\n        return this.addNodeAt(parent, node, numChildren);\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param node 추가할 자식 노드.\r\n     * @param index 자식 노드 삽입 위치의 인덱스.\r\n     * @returns {boolean}\r\n     */\r\n    addNodeAt(parent, node, index) {\r\n        return this.addNodesAt(parent, [node], index);\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param nodes 추가할 자식 노드 목록\r\n     * @returns {boolean}\r\n     */\r\n    addNodes(parent, nodes) {\r\n        const children = this.getNativeChildren(parent);\r\n        return this.addNodesAt(parent, nodes, children.length);\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 노드목록을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param nodes 추가할 자식 노드 목록\r\n     * @param index 자식 노드 삽입 위치의 인덱스.\r\n     * @returns {boolean}\r\n     */\r\n    addNodesAt(parent, nodes, index) {\r\n        if (!nodes || nodes.length <= 0) {\r\n            return false;\r\n        }\r\n\r\n        this.nodeEventCounter.start();\r\n\r\n        if (!parent) {\r\n            parent = this._rootNode;\r\n        }\r\n\r\n        index = Math.max(index, 0);\r\n\r\n        createChildrenField(parent, this.childrenField);\r\n\r\n        let displayableChildren = this.getChildren(parent),\r\n            children = this.getNativeChildren(parent),\r\n            numChildren = children && children.length || 0,\r\n            numNodes = nodes.length;\r\n\r\n        if (displayableChildren !== children) {\r\n            let node = displayableChildren[index];\r\n            index = children.indexOf(node);\r\n            if (index < 0) {\r\n                index = numChildren;\r\n            }\r\n        }\r\n\r\n        index = Math.min(index, numChildren);\r\n\r\n        //1. 부모 노드 닫기.\r\n        this._internalCloseNode(parent);\r\n\r\n        //2. 노드 추가\r\n        for (let i = 0; i < numNodes; i++) {\r\n            let node = nodes[i];\r\n            this._removeParentMapping(node);\r\n            children.splice(index + i, 0, node);\r\n            this._addParentMapping(parent, node);\r\n        }\r\n        //3. 차일드 목록 삭제.\r\n        this._removeChildrenMapping(parent);\r\n\r\n        //4. 부모 노드 다시 열기.\r\n        this._internalOpenNode(parent, true);\r\n        this.nodeEventCounter.end('add', false, false, nodes, parent);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param node\r\n     * @param toParent\r\n     * @param toIndex\r\n     * @returns {boolean}\r\n     */\r\n    moveNode(node, toParent, toIndex) {\r\n        //대상 위치가 자신 하위 레벨일때.\r\n        if (this.getAncestorNodes(toParent).find(o => o === node)) {\r\n            return false;\r\n        }\r\n\r\n        const parent = this.getParentNode(node);\r\n        if (this.dispatchNodeEvent('moving', false, true, [node], parent, {toParent: toParent, toIndex: toIndex})) {\r\n\r\n            this.nodeEventCounter.start();\r\n            this.removeNode(parent, node);\r\n            this.addNodeAt(toParent, node, toIndex);\r\n            this.nodeEventCounter.end('move', false, false, [node], parent, {\r\n                toParent: toParent,\r\n                toIndex: toIndex\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * 부모 노드에서 자식 노드를 삭제합니다.\r\n     * @param parent 부모 노드입니다.\r\n     * @param node 삭제할 자식 노드 입니다.\r\n     * @returns {boolean}\r\n     */\r\n    removeNode(parent, node) {\r\n        if (!parent) {\r\n            parent = this._rootNode;\r\n        }\r\n\r\n        let children = this.getNativeChildren(parent),\r\n            removeIndex = children ? children.indexOf(node) : -1;\r\n        if (removeIndex < 0) {\r\n            return false;\r\n        }\r\n\r\n        this.nodeEventCounter.start();\r\n\r\n        //부모노드 맵 삭제.\r\n        let removedNodes = this.find((o) => {\r\n            return true;\r\n        }, node);\r\n\r\n        // 부모 노드 닫기.\r\n        this._internalCloseNode(parent);\r\n\r\n        //차일드 목록 삭제.\r\n        this._removeChildrenMapping(parent);\r\n\r\n        removedNodes && removedNodes.forEach((o) => {\r\n            this._removeOpenNodeMapping(o);\r\n            this._removeChildrenMapping(o);\r\n            this._removeParentMapping(o);\r\n        });\r\n\r\n        children.splice(removeIndex, 1);\r\n\r\n        // 부모 노드 다시 열기.\r\n        this._internalOpenNode(parent, true);\r\n\r\n        this.nodeEventCounter.end('remove', false, false, [node], parent);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에서 자식 노드를 삭제합니다.\r\n     * @param parent 부모 노드입니다.\r\n     * @param nodes 자식 노드 목록입니다.\r\n     * @returns {boolean}\r\n     */\r\n    removeNodes(parent, nodes) {\r\n        if (nodes) {\r\n            this.nodeEventCounter.start();\r\n            const removedItems = [];\r\n            nodes.forEach(node => {\r\n                if (this.removeNode(parent, node)) {\r\n                    removedItems.push(node);\r\n                }\r\n            });\r\n            if (removedItems.length > 0) {\r\n                this.nodeEventCounter.end('remove', false, false, removedItems, parent);\r\n                return true;\r\n            } else {\r\n                this.nodeEventCounter.cancel();\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * 해당 node가 있는지 확인합니다.\r\n     * @param node\r\n     * @return {boolean} 노드가 포함되어 있으면 true.\r\n     */\r\n    contains(node) {\r\n        const found = this.findOne((o) => {\r\n            return node === o;\r\n        });\r\n\r\n        return !!found;\r\n    }\r\n\r\n    /**\r\n     * 해당 node 목록 있는지 확인합니다.\r\n     * @param nodes {Array}\r\n     * @return {boolean} 노드가 포함되어 있으면 true.\r\n     */\r\n    containsAll(nodes) {\r\n        const num = nodes && nodes.length || 0;\r\n        if (num <= 0) {\r\n            return false;\r\n        }\r\n        nodes = nodes.slice(0);\r\n        this.find((node, parent) => {\r\n            const index = nodes.indexOf(node);\r\n            if (index >= 0) {\r\n                nodes.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        return nodes.length === 0;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드가 확장되어 있는지 확인합니다.\r\n     * @param node\r\n     * @return {boolean} 노드가 확장되어 있으면 true.\r\n     */\r\n    isOpenNode(node) {\r\n        if (node === this._rootNode) {\r\n            return true;\r\n        }\r\n        return this._openNodesMap.has(node);\r\n    }\r\n\r\n    /**\r\n     * 해당 노느가 출력된 노드인지 확인합니다.\r\n     * @param node\r\n     * @return {boolean} 출련된 노드면 true.\r\n     */\r\n    isDisplayableNode(node) {\r\n\r\n        let p = node;\r\n        while (p) {\r\n            if (!this.isOpenNode(p)) {\r\n                return false;\r\n            }\r\n            p = this.getParentNode(p);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드를 확장합니다.\r\n     * @param node\r\n     * @return {boolean} 해당 노드가 확장되면 true.\r\n     */\r\n    openNode(node) {\r\n        if (node !== null && !this.isOpenNode(node)) {\r\n            const parent = this.getParentNode(node);\r\n            if (this.dispatchNodeEvent('expanding', false, true, [node], parent)) {\r\n                this._addOpenNodeMapping(node);\r\n                this._internalOpenNode(node, true);\r\n                this.dispatchNodeEvent('expand', false, false, [node], parent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _internalOpenNode(node, dispatch) {\r\n        if (this.isDisplayableNode(node)) {\r\n            let children = this._internalGetDisplayableChildren(node, true);\r\n            if (children && children.length > 0) {\r\n                let nodes = this._displayableNodes,\r\n                    index = (node === this._rootNode ? nodes.length : nodes.indexOf(node));\r\n\r\n                if (index >= 0) {\r\n                    index += 1;\r\n                    arrayInsert(nodes, index, children);\r\n                    if (dispatch) {\r\n                        this.dispatchCollectionEvent('add', children, index);\r\n                    }\r\n\r\n                    if (this._displayPolicy === NO_PARENT && node && node !== this._rootNode) {\r\n                        arrayRemove(nodes, index - 1, [node]);\r\n                        this.dispatchCollectionEvent('remove', [node], index - 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 해당 노드를 축소합니다.\r\n     * @param node\r\n     * @return {boolean} 해당 노드가 축소되면 true.\r\n     */\r\n    closeNode(node) {\r\n        if (node !== null && this.isOpenNode(node)) {\r\n            const parent = this.getParentNode(node);\r\n            if (this.dispatchNodeEvent('collapsing', false, true, [node], parent)) {\r\n                this._internalCloseNode(node);\r\n                this._removeOpenNodeMapping(node);\r\n                this.dispatchNodeEvent('collapse', false, false, [node], parent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _internalCloseNode(node) {\r\n        if (this.isDisplayableNode(node)) {\r\n            let children = this._internalGetDisplayableChildren(node, false);\r\n            if (children && children.length > 0) {\r\n                let index = this._displayableNodes.indexOf(children[0]);\r\n                if (index >= 0) {\r\n                    arrayRemove(this._displayableNodes, index, children);\r\n                    this.dispatchCollectionEvent('remove', children, index);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 해당 노드 배열을 확장합니다.\r\n     * @param nodes\r\n     */\r\n    openNodes(nodes) {\r\n        let numNodes = nodes && nodes.length,\r\n            node, i;\r\n        this._openNodesMap.clear();\r\n        for (i = 0; i < numNodes; i++) {\r\n            node = nodes[i];\r\n            this._addOpenNodeMapping(node);\r\n        }\r\n        this._resetDisplayableNodes();\r\n        this._active = this._displayableNodes;\r\n        this.dispatchCollectionEvent('refresh');\r\n    }\r\n\r\n    /**\r\n     * 확장되어있는 노드목록을 반환합니다.\r\n     * @returns {Array} 확장된 노드 목록\r\n     */\r\n    getOpenedNodes() {\r\n        let nodes = [];\r\n        this._openNodesMap.forEach((value, key) => {\r\n            nodes.push(key);\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 레벨을 반환합니다.\r\n     * @returns {Number} 노드 레벨\r\n     */\r\n    getNodeLevel(node) {\r\n        if (node == null) {\r\n            return -1;\r\n        }\r\n        let level = -1,\r\n            active = this._internalGetParentNode(node);\r\n        while (active) {\r\n            active = this._internalGetParentNode(active);\r\n            level++;\r\n        }\r\n        return level;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 깊이를 반환합니다.\r\n     * @param node\r\n     */\r\n    getNodeDepth(node) {\r\n        let nodes = !node ? this.toArray() : [node];\r\n        return nodes.reduce((max, item) => {\r\n            return Math.max(max, getDepth(item));\r\n        }, 1);\r\n    }\r\n\r\n    forEach(callback) {\r\n        this.find((node, parent, children) => {\r\n            callback.call(this, node, parent, children);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 탐색합니다.\r\n     * 지정된 함수(callBack)에 대해 true를 반환하는 모든 항목이 포함된 새 배열을 만듭니다\r\n     * @param callback  function callback(node, parent, children)\r\n     * @param prefetchNode 시작 기준 노드입니다. 지정되지 않으면 루트노드를 기준으로 합니다.\r\n     * @param postOrder true 이면 후위탐색, false 이면 전위탐색\r\n     * @return {Array} callback true 반환하는 항목의 배열입니다.\r\n     */\r\n    find(callback, prefetchNode, postOrder) {\r\n        if (this.source && callback) {\r\n            let parent = prefetchNode && this.getParentNode(prefetchNode) || null;\r\n            let children = (prefetchNode && [prefetchNode]) || this.getNativeChildren(parent);\r\n            return find.call(this, parent, children, callback, postOrder, false);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 탐색합니다.\r\n     * 지정된 함수(callBack)에 대해 처음으로 true를 반환하는 항목을 반환하고 탐색을 중지합니다.\r\n     * @param callback  function callback(node, parent, children)\r\n     * @param prefetchNode 시작 기준 노드입니다. 지정되지 않으면 루트노드를 기준으로 합니다.\r\n     * @param postOrder true 이면 후위탐색, false 이면 전위탐색\r\n     * @return {*} 처음으로 true 반환하는 항목입니다.\r\n     */\r\n    findOne(callback, prefetchNode, postOrder) {\r\n        if (this.source && callback) {\r\n            let parent = prefetchNode && this.getParentNode(prefetchNode) || null,\r\n                children = (prefetchNode && [prefetchNode]) || this.getNativeChildren(parent),\r\n                result = find.call(this, parent, children, callback, postOrder, true);\r\n\r\n            if (result && result.length > 0) {\r\n                return result[0];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 확장합니다.\r\n     */\r\n    expandAll() {\r\n        this.openNodes(this._getParentsInNodes(this.getNativeChildren(null)));\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 축소합니다.\r\n     */\r\n    collapseAll() {\r\n        this.openNodes([]);\r\n    }\r\n\r\n    _resetDisplayableNodes() {\r\n        this._displayableNodes = [];\r\n        this._internalOpenNode(this._rootNode, false);\r\n    }\r\n\r\n    _internalRefresh() {\r\n        this._openNodesMap.clear();\r\n        this._parentMap.clear();\r\n        this._childrenMap.clear();\r\n\r\n        //루트 노드 생성.\r\n        //외부에서는 사용되지 않음.\r\n        this._rootNode = createRootNode(this.source, this.childrenField);\r\n        this._resetDisplayableNodes();\r\n        this._active = this._displayableNodes;\r\n    }\r\n\r\n    _getParentsInNodes(nodes) {\r\n        let numNodes = nodes && nodes.length || 0,\r\n            parents = [],\r\n            node, children, i;\r\n        for (i = 0; i < numNodes; i++) {\r\n            node = nodes[i];\r\n            children = this.getChildren(node);\r\n            if (children && children.length > 0) {\r\n                parents.push(node);\r\n                parents = parents.concat(this._getParentsInNodes(children));\r\n            }\r\n        }\r\n        return parents;\r\n    }\r\n\r\n    _addOpenNodeMapping(node) {\r\n        this._openNodesMap.set(node, true);\r\n    }\r\n\r\n    _removeOpenNodeMapping(node) {\r\n        this._openNodesMap.delete(node);\r\n    }\r\n\r\n    _addAllParentMapping() {\r\n        if (!this._lockAllParentMapping) {\r\n            this._lockAllParentMapping = true;\r\n            this.find((node, parent) => {\r\n                if (!parent) {\r\n                    parent = this._rootNode;\r\n                }\r\n                this._addParentMapping(parent, node);\r\n            }, null, false);\r\n\r\n            this._lockAllParentMapping = false;\r\n        }\r\n    }\r\n\r\n    _addParentMapping(parent, node) {\r\n        this._parentMap.set(node, parent);\r\n        if (!parent) {\r\n            console.warn('HierarchyList._addParentMapping !!!', node);\r\n        }\r\n    }\r\n\r\n    _removeParentMapping(node) {\r\n        this._parentMap.delete(node);\r\n    }\r\n\r\n    _addChildrenMapping(node, children) {\r\n        this._childrenMap.set(node, children);\r\n    }\r\n\r\n    _removeChildrenMapping(node) {\r\n        this._childrenMap.delete(node);\r\n    }\r\n\r\n    dispatchNodeEvent(kind, bubbles, cancelable, nodes, parent, optionalParams = null) {\r\n        const detail = {\r\n            collection: this,\r\n            kind: kind,\r\n            nodes: nodes,\r\n            parent: parent,\r\n            ...optionalParams\r\n        };\r\n\r\n        return this.dispatchEvent(new CustomEvent('node-change', {\r\n            bubbles: bubbles,\r\n            cancelable: cancelable,\r\n            detail: detail\r\n        }));\r\n    }\r\n}\n\nclass ColumnCollection extends HierarchyList {\n    constructor(source) {\n        super(source);\n        this._leafColumnsMap = new Map();\n        const boundCollectionChange = this._onCollectionChange.bind(this);\n        this.addEventListener('collection-change', boundCollectionChange);\n        this.addEventListener('node-change', boundCollectionChange);\n    }\n\n    updateColumns() {\n        this.source && this.source.forEach(column => {\n            column.updateChildren();\n        });\n    }\n\n    getLeafColumns(column) {\n        return getLeafNodes(column);\n    }\n\n    getVisibleLeafColumns(column) {\n        let nodes = this._leafColumnsMap.get(column);\n        if (!nodes) {\n            nodes = getLeafNodes(column).filter(c => c.visible);\n            this._leafColumnsMap.set(column, nodes);\n        }\n        return nodes || [];\n    }\n\n    clearCache() {\n        this._leafColumnsMap = new Map();\n    }\n\n    _onCollectionChange(event) {\n        const {type, detail: {kind}} = event;\n        if (type === 'collection-change' && kind === 'reset') {\n            this.clearCache();\n        } else if (type === 'node-change' && (kind === 'move' || kind === 'remove' || kind === 'add')) {\n            this.clearCache();\n        }\n    }\n}\n\nconst BLOCK_SIZE = 128;\nconst BLOCK_SHIFT = 7;\nconst BLOCK_MASK = 127;\n\nclass Block {\n    constructor(index, factory) {\n        this._index = index;\n        this._itemFactory = factory;\n        this._items = new Array(BLOCK_SIZE);\n        this._total = 0;\n        this._empty = BLOCK_SIZE;\n    }\n\n    get empty() {\n        return this._empty;\n    }\n\n    getTotal() {\n        return this._total;\n    }\n\n    getItem(index) {\n        return this._items[index];\n    }\n\n    addSize(index, value) {\n        const lastValue = this.getSize(BLOCK_MASK);\n        //공간확보\n        this._items.splice(index, 0, null);\n        if (value != null) {\n            this.setSize(index, value);\n        }\n\n        this._total -= (lastValue || 0);\n        this._items.length = BLOCK_SIZE;\n    }\n\n    removeSize(index) {\n        const removedValue = this.getSize(index);\n        this._items.splice(index, 1);\n        if (removedValue != null) {\n            this._total -= (removedValue || 0);\n            this._empty = Math.min(BLOCK_SIZE, this._empty + 1);\n        }\n        return removedValue;\n    }\n\n    getSize(index) {\n        const item = this._items[index];\n        if (item) {\n            return item.value;\n        }\n        return undefined;\n    }\n\n    setSize(index, value) {\n        let item = this.getItem(index);\n        if (!item) {\n            item = this._itemFactory();\n            this._items[index] = item;\n            this._empty--;\n        }\n\n        let old = item.value || 0;\n        item.value = value;\n        this._total += value - old;\n\n        return item;\n    }\n}\n\n\nclass LinearVector {\n    constructor() {\n        this._defaultSize = 30;\n        this._blocks = [];\n        this._gap = 0;\n        this._maxIndex = -1;\n    }\n\n    get itemFactory() {\n        return function () {\n            return {\n                value: 0\n            };\n        };\n    }\n\n    get gap() {\n        return this._gap;\n    }\n\n    set gap(value) {\n        this._gap = value;\n    }\n\n    get defaultSize() {\n        return this._defaultSize;\n    }\n\n    set defaultSize(value) {\n        if (value !== this._defaultSize) {\n            this._defaultSize = value;\n            this.clear();\n        }\n    }\n\n    /**\n     * 사이즈 설정된 최대 인덱스.\n     * @returns {number}\n     */\n    get maxIndex() {\n        return this._maxIndex;\n    }\n\n    get length() {\n        return Math.max(this._length > 0 ? this._length : this._maxIndex + 1, 0);\n    }\n\n    set length(value) {\n        if (this._length !== value) {\n            this._length = value;\n\n            if (this._length <= this._maxIndex) {\n                this._maxIndex = this._length - 1;\n            }\n        }\n    }\n\n    clear() {\n        this._blocks = [];\n        this._maxIndex = -1;\n    }\n\n    setSize(index, value) {\n        const blockIndex = index >> BLOCK_SHIFT;\n        const offset = index & BLOCK_MASK;\n        const block = this._getBlock(blockIndex);\n\n        const old = this.getSize(index);\n        block.setSize(offset, value);\n        this._maxIndex = Math.max(index, this._maxIndex);\n\n        return old !== value;\n    }\n\n    getSize(index) {\n        return this.getItemValue(this.getItem(index));\n    }\n\n    indexOf(size) {\n        let index = 0;//recent.index;\n        let startY = 0;//recent.startY;\n\n        let blockIndex = index >> BLOCK_SHIFT;\n        let blockOffset = index & BLOCK_MASK;\n        let block = this._getBlock(blockIndex);\n\n        //블록 총 height\n        let total = 0;\n        let value = 0;\n        let item;\n        while (startY < size) {\n\n            item = block.getItem(blockOffset);\n            value = this.getItemValue(item) + this.gap;\n\n            if (startY + value > size) {\n                break;\n            }\n\n            startY += value;\n            blockOffset++;\n            if (blockOffset >= BLOCK_SIZE) {\n                blockOffset = 0;\n                blockIndex += 1;\n                total = this._getBlockTotalAt(blockIndex);\n                while (total + startY < size) {\n                    startY += total;\n                    index += BLOCK_SIZE;\n\n                    blockIndex += 1;\n                    total = this._getBlockTotalAt(blockIndex);\n                }\n\n                block = this._getBlock(blockIndex);\n            }\n            index++;\n        }\n        //recent.index = index;\n        //recent.startY = startY;\n        return index;\n    }\n\n    getTotal(from, to) {\n        from = from || 0;\n        to = to != null ? to : this.length - 1;\n\n        let total = 0,\n            blockIndex,\n            index = from;\n\n        while (index <= to) {\n            while ((index & BLOCK_MASK) === 0 && (index + BLOCK_SIZE < to)) {\n                blockIndex = index >> BLOCK_SHIFT;\n                total += this._getBlockTotalAt(blockIndex);\n                index += BLOCK_SIZE;\n            }\n\n            total += this.getSize(index) + this.gap;\n            index++;\n        }\n\n        if (to > 0) {\n            total -= this.gap;\n        }\n        return total;\n    }\n\n    addSize(index, value) {\n\n        const blocks = this._blocks;\n        const numBlocks = blocks && blocks.length || 0;\n        let blockIndex = index >> BLOCK_SHIFT,\n            blockOffset = index & BLOCK_MASK,\n            i = blockIndex,\n            block, nextValue;\n        for (; i < numBlocks; i++) {\n            block = this._getBlock(i);\n            //마지막 값\n            nextValue = block.removeSize(BLOCK_MASK);\n            block.addSize(blockOffset, value);\n\n            //다음 블록으로 이동할 아이템\n            value = nextValue;\n            blockOffset = 0;\n        }\n\n        //캐스팅 비교\n        if (nextValue != null) {\n            block = this._getBlock(numBlocks);\n            block.addSize(0, nextValue);\n        }\n        this.length++;\n        this._maxIndex++;\n    }\n\n    removeSize(index) {\n        const blocks = this._blocks;\n        const numBlocks = blocks && blocks.length || 0;\n\n        let blockIndex = index >> BLOCK_SHIFT,\n            blockOffset = index & BLOCK_MASK,\n            i, block, value, preValue = null;\n\n        block = this._getBlock(blockIndex);\n        block.removeSize(blockOffset);\n\n        for (i = numBlocks - 1; i >= blockIndex; i--) {\n            block = this._getBlock(i);\n\n            if (i !== blockIndex) {\n                value = block.removeSize(0);\n            }\n\n            if (preValue != null) {\n                block.setSize(BLOCK_MASK, preValue);\n            }\n            preValue = value;\n        }\n        this.length--;\n        this._maxIndex--;\n    }\n\n\n    getItem(index) {\n        const blockIndex = index >> BLOCK_SHIFT;\n        const offset = index & BLOCK_MASK;\n\n        if (blockIndex >= 0 && blockIndex < this._blocks.length) {\n            const block = this._getBlock(blockIndex);\n            return block.getItem(offset);\n        }\n        return null;\n    }\n\n    getItemValue(item) {\n        return item && !isNaN(item.value) ? item.value : this.defaultSize;\n    }\n\n    _createBlock(index) {\n        return new Block(index, this.itemFactory);\n    }\n\n    _getBlock(index) {\n        let block = this._blocks[index];\n        if (!block) {\n            block = this._blocks[index] = this._createBlock(index);\n        }\n        return block;\n    }\n\n    _getBlockTotal(block) {\n        return block.getTotal() + (block.empty * this.defaultSize) + this.gap * BLOCK_SIZE;\n    }\n\n    _getBlockTotalAt(index) {\n        return this._getBlockTotal(this._getBlock(index));\n    }\n}\n\n\nfunction createEmptyArray(count) {\n    const array = [];\n    while (0 < count--) {\n        array.push(0);\n    }\n    return array;\n}\n\nclass RowLinearVector extends LinearVector {\n    constructor(index) {\n        super();\n    }\n\n    get itemFactory() {\n        return function () {\n            return {\n                value: 0,\n                cellHeights: [],\n                maxCellHeight: 0\n            };\n        }\n    }\n\n    getMaxCellHeight(rowIndex) {\n        let item = this.getItem(rowIndex);\n        return item && item.maxCellHeight || 0;\n    }\n\n    setCellHeight(rowIndex, columnIndex, height) {\n        if (isNaN(height)) {\n            return false;\n        }\n        let item = this.getItem(rowIndex);\n        if (!item) {\n            this.setSize(rowIndex, this.defaultSize);\n            item = this.getItem(rowIndex);\n        }\n\n        let heights = item.cellHeights;\n        if (heights[columnIndex] !== height) {\n            heights[columnIndex] = height;\n            this._updateMaxCellHeight(item);\n            return true;\n        }\n        return false;\n    }\n\n    insertColumns(index, count) {\n        const num = this.length;\n        const spliceFunc = Array.prototype.splice;\n        const emptyArray = createEmptyArray(count);\n\n        for (let i = 0; i < num; i++) {\n            let item = this.getItem(i);\n            let cellHeights = item.cellHeights;\n            if (cellHeights.length < index) {\n                cellHeights.length = index;\n            }\n            spliceFunc.apply(cellHeights, [index, 0].concat(emptyArray));\n\n            this._updateMaxCellHeight(item);\n        }\n    }\n\n    removeColumns(index, count) {\n        const num = this.length;\n        let item, i;\n        for (i = 0; i < num; i++) {\n            item = this.getItem(i);\n            item.cellHeights.splice(index, count);\n            this._updateMaxCellHeight(item);\n        }\n    }\n\n    _updateMaxCellHeight(item) {\n        item.maxCellHeight = item.cellHeights.reduce((previous, current) => {\n            return previous > current ? previous : current;\n        });\n    }\n}\n\nclass Row {\n    constructor(dimension, index = -1) {\n        this._dimension = dimension;\n        this._cells = [];\n        this._layout = null;\n        this._height = 0;\n        this._index = index;\n    }\n\n    get index() {\n        return this._index;\n    }\n\n    get columnIndices() {\n        return this._dimension.isColumnChanging ? this._dimension.oldColumnIndices : this._dimension.columnIndices;\n    }\n\n    get cells() {\n        return this._cells;\n    }\n\n    get layout() {\n        return this._layout;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    setIndex(index) {\n        this._index = index;\n    }\n\n    setCells(cells) {\n        this._cells = cells;\n        return this;\n    }\n\n    setHeight(value) {\n        this._height = value;\n        return this;\n    }\n\n    setLayout(layout) {\n        this._layout = layout;\n        return this;\n    }\n\n    getCellAt(columnIndex) {\n        const offset = this.columnIndices.indexOf(columnIndex);\n        return offset >= 0 ? this._cells[offset] : null;\n    }\n\n    takeCellAt(columnIndex) {\n        const offset = this.columnIndices.indexOf(columnIndex);\n        if (offset >= 0) {\n            const cell = this._cells[offset];\n            this._cells[offset] = null;\n            return cell;\n        }\n        return null;\n    }\n}\n\nclass ChildColumn extends GridColumn {\r\n    constructor(hostColumn) {\r\n        super();\r\n        this.hostColumn = hostColumn;\r\n        this.draggable = false;\r\n        this.sortable = false;\r\n        this.editable = false;\r\n        this.open = false;\r\n    }\r\n\r\n    get boxMode() {\r\n        return this.hostColumn.boxMode;\r\n    }\r\n\r\n    get indent() {\r\n        return this.hostColumn.indent;\r\n    }\r\n\r\n    get itemRenderer() {\r\n        return this.hostColumn.itemRenderer;\r\n    }\r\n\r\n    get dataField() {\r\n        return this.hostColumn.dataField;\r\n    }\r\n\r\n    set dataField(v) {\r\n    }\r\n\r\n    get dataFieldPath() {\r\n        return this.hostColumn.dataFieldPath;\r\n    }\r\n\r\n    get headerText() {\r\n        return '' + (this.hostColumn.children.indexOf(this) + 1);\r\n    }\r\n\r\n    set headerText(v) {\r\n    }\r\n\r\n    itemToLabel(item) {\r\n        const children = this.hostColumn.children;\r\n        const columnLevel = children.indexOf(this);\r\n        const itemLevel = this.grid.collection.getNodeLevel(item);\r\n        if (itemLevel > columnLevel) {\r\n            return null;\r\n        }\r\n        return super.itemToLabel(item);\r\n    }\r\n}\r\n\r\n/**\r\n * TreeGridColumn 클래스는 트리 그리드의 컬럼을 정의합니다.\r\n */\r\nclass TreeGridColumn extends GridColumn {\r\n    /**\r\n     * @param dataField 값이 표시되는 항목의 필드\r\n     * @param headerText 헤더 타이틀\r\n     */\r\n    constructor(dataField = null, headerText = '') {\r\n        super(dataField, headerText);\r\n        this._indent = 20;\r\n        this._boxMode = false;\r\n    }\r\n\r\n    get indent() {\r\n        return this._indent;\r\n    }\r\n\r\n    set indent(v) {\r\n        if (this._indent !== v) {\r\n            this._indent = v;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 노드 모양을 '┌' 보이게 합니다.\r\n     * @returns {Boolean}\r\n     */\r\n    get boxMode() {\r\n        return this._boxMode;\r\n    }\r\n\r\n    set boxMode(v) {\r\n        if (this._boxMode !== v) {\r\n            this._boxMode = v;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return [\r\n            'minWidth',\r\n            'width',\r\n            'dataField',\r\n            'headerText',\r\n            'children',\r\n            'visible',\r\n            'boxMode',\r\n            'indent',\r\n            'open'].reduce((cur, next) => {\r\n            if (next === 'children') {\r\n                cur[next] = this.children.map(child => child.toJSON());\r\n            } else {\r\n                cur[next] = this[next];\r\n                if (next === 'width' && cur[next] === undefined) ;\r\n            }\r\n            return cur;\r\n        }, {});\r\n    }\r\n}\n\nfunction normalizeInterval(indices, startFrozenOffset, endFrozenOffset, startIndex, endIndex) {\r\n    const minIndex = indices[startFrozenOffset];\r\n    const maxIndex = indices[indices.length - 1 - endFrozenOffset];\r\n    const startOffset = indices.indexOf(startIndex);\r\n    const endOffset = indices.indexOf(endIndex);\r\n\r\n    let snIndex = startIndex;\r\n    if (startOffset < 0) {\r\n        if (startIndex >= maxIndex) {\r\n            if (endFrozenOffset > 0) {\r\n                snIndex = indices[indices.length - endFrozenOffset];\r\n            } else if (endOffset >= 0) {\r\n                snIndex = endIndex;\r\n            } else {\r\n                snIndex = maxIndex;\r\n            }\r\n        } else {\r\n            snIndex = minIndex;\r\n        }\r\n    }\r\n\r\n    let enIndex = endIndex;\r\n    if (endOffset < 0) {\r\n        if (endIndex < minIndex) {\r\n            if (startFrozenOffset > 0) {\r\n                enIndex = indices[startFrozenOffset - 1];\r\n            } else if (startOffset >= 0) {\r\n                enIndex = startIndex;\r\n            } else {\r\n                enIndex = minIndex;\r\n            }\r\n        } else {\r\n            enIndex = maxIndex;\r\n        }\r\n    }\r\n    return [snIndex, enIndex];\r\n}\r\n\r\nfunction containLine(from1, to1, from2, to2) {\r\n    return !(from1 > to2 || to1 < from2);\r\n}\r\n\r\nfunction containInterval(indices, startFrozenOffset, endFrozenOffset, startIndex, endIndex) {\r\n    if (startFrozenOffset > 0) {\r\n        if (containLine(startIndex, endIndex, indices[0], indices[startFrozenOffset - 1])) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    if (endFrozenOffset > 0) {\r\n        if (containLine(startIndex, endIndex, indices[indices.length - endFrozenOffset], indices[indices.length - 1])) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    if (containLine(startIndex, endIndex, indices[startFrozenOffset], indices[indices.length - endFrozenOffset - 1])) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nclass DataDimensions {\r\n    constructor(dataGroup) {\r\n        this.dataGroup = dataGroup;\r\n        this.columnLinearVector = new LinearVector();\r\n        this.rowLinearVector = new RowLinearVector();\r\n        //컬럼\r\n        this._columnIndices = [];\r\n        this._columnLayouts = [];\r\n        this._oldColumnIndices = null;\r\n\r\n        this._rows = [];\r\n        this._rowIndices = [];\r\n\r\n        this._mergeCells = [];\r\n        this._mergeCellPositions = [];\r\n        this._mergeCellLayouts = [];\r\n\r\n        this._pendingRows = null;\r\n        this._pendingIndices = null;\r\n        this._pendingMergeCellPositions = null;\r\n\r\n        this._visibleFrozenIndexRect = new Rectangle();\r\n        this._visibleFrozenSizeRect = new Rectangle();\r\n        //  this._recentOffset = -1;\r\n    }\r\n\r\n    get columnIndices() {\r\n        return this._columnIndices;\r\n    }\r\n\r\n    get columnLayouts() {\r\n        return this._columnLayouts;\r\n    }\r\n\r\n    get oldColumnIndices() {\r\n        return this._oldColumnIndices;\r\n    }\r\n\r\n    get mergeCellLayouts() {\r\n        return this._mergeCellLayouts;\r\n    }\r\n\r\n    get rows() {\r\n        return this._rows;\r\n    }\r\n\r\n    get rowIndices() {\r\n        return this._rowIndices;\r\n    }\r\n\r\n    get mergeCellPositions() {\r\n        return this._mergeCellPositions;\r\n    }\r\n\r\n    get mergeCells() {\r\n        return this._mergeCells;\r\n    }\r\n\r\n    get cells() {\r\n        return this._rows.reduce((cells, row) => {\r\n            cells = cells.concat(row.cells);\r\n            return cells;\r\n        }, []);\r\n    }\r\n\r\n    get visibleFrozenIndexRect() {\r\n        return this._visibleFrozenIndexRect;\r\n    }\r\n\r\n    get visibleFrozenSizeRect() {\r\n        return this._visibleFrozenSizeRect;\r\n    }\r\n\r\n    get firstColumnIndex() {\r\n        return this._columnIndices.length > 0 ? this._columnIndices[0] : -1;\r\n    }\r\n\r\n    get lastColumnIndex() {\r\n        return this._columnIndices.length > 0 ? this._columnIndices[this._columnIndices.length - 1] : -1;\r\n    }\r\n\r\n    get isColumnChanging() {\r\n        return !!this._oldColumnIndices;\r\n    }\r\n\r\n    getRowDefaultHeight() {\r\n        return this.rowLinearVector.defaultSize;\r\n    }\r\n\r\n    setRowDefaultHeight(value) {\r\n        this.rowLinearVector.defaultSize = value;\r\n    }\r\n\r\n    setRowSize(value) {\r\n        this.rowLinearVector.length = value;\r\n    }\r\n\r\n    createRow(index) {\r\n        return new Row(this, index);\r\n    }\r\n\r\n    /**\r\n     * index 행 반환\r\n     * @param index\r\n     */\r\n    getRow(index) {\r\n        const offset = this._rowIndices.indexOf(index);\r\n        if (offset >= 0) {\r\n            return this._rows[offset];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getRowIndexOf(row) {\r\n        const offset = this._rows.indexOf(row);\r\n        if (offset >= 0) {\r\n            return this._rowIndices[offset];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setRow(index, row, height) {\r\n        const indices = this._pendingIndices || this._rowIndices;\r\n        const rows = this._pendingRows || this._rows;\r\n        /*\r\n          const recentIndex = indices[this._recentOffset] || 0;\r\n          const delta = index - recentIndex;\r\n\r\n          let offset = Math.Math.max(0, this._recentOffset);\r\n          while (offset >= 0 && offset < indices.length) {\r\n              const v = indices[offset];\r\n              if (delta >= 0) {\r\n                  if (index < v) {\r\n                      break;\r\n                  }\r\n              } else {\r\n                  if (index > v) {\r\n                      break;\r\n                  }\r\n              }\r\n              offset += delta >= 0 ? +1 : -1;\r\n          }\r\n          */\r\n\r\n        let offset = 0;\r\n        for (let num = indices.length; offset < num; offset++) {\r\n            if (index < indices[offset]) {\r\n                break;\r\n            }\r\n        }\r\n        indices.splice(offset, 0, index);\r\n        rows.splice(offset, 0, row);\r\n        this.rowLinearVector.setSize(index, height);\r\n        //this._recentOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스 행정보를 삭제 후 반환합니다. 전체 행의 위치와 개수는 변하지 않습니다.\r\n     * @param index\r\n     * @returns {null|*}\r\n     */\r\n    takeRow(index) {\r\n        const offset = this._rowIndices.indexOf(index);\r\n        if (offset >= 0) {\r\n            this._rowIndices.splice(offset, 1);\r\n            return this._rows.splice(offset, 1)[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    insertRow(index, row, height) {\r\n        const indices = this._rowIndices;\r\n        indices.forEach((rowIndex, i) => {\r\n            if (index <= rowIndex) {\r\n                indices[i] = rowIndex + 1;\r\n            }\r\n        });\r\n        this.rowLinearVector.addSize(index, height);\r\n        this.setRow(index, row, height);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스 행정보를 삭제 후 반환합니다. 행의 개수와 각 인덱스는 변경됩니다.\r\n     * @param index\r\n     * @returns {null|*}\r\n     */\r\n    removeRow(index) {\r\n        const row = this.takeRow(index);\r\n        const indices = this._rowIndices;\r\n        this.rowLinearVector.removeSize(index);\r\n        indices.forEach((rowIndex, i) => {\r\n            if (index <= rowIndex) {\r\n                indices[i] = rowIndex - 1;\r\n            }\r\n        });\r\n        return row;\r\n    }\r\n\r\n    insertColumn(index) {\r\n        const indices = this._columnIndices;\r\n        indices.forEach((columnIndex, i) => {\r\n            if (index <= columnIndex) {\r\n                indices[i] = columnIndex + 1;\r\n            }\r\n        });\r\n    }\r\n\r\n    removeColumn(index) {\r\n        const indices = this._columnIndices;\r\n        const offset = indices.indexOf(index);\r\n        const removed = [];\r\n        if (offset >= 0) {\r\n            indices.splice(offset, 1);\r\n            this._rows.forEach(row => {\r\n                Array.prototype.push.apply(removed, row.cells.splice(offset, 1));\r\n            });\r\n\r\n            this._columnLayouts.splice(offset, 1);\r\n            indices.forEach((columnIndex, i) => {\r\n                if (index <= columnIndex) {\r\n                    indices[i] = columnIndex - 1;\r\n                }\r\n            });\r\n        }\r\n        return removed;\r\n    }\r\n\r\n    createCell(item, column, cellPosition) {\r\n        if (column instanceof TreeGridColumn) {\r\n            return new TreeCell(item, column, cellPosition)\r\n        }\r\n        return new DataCell(item, column, cellPosition);\r\n    }\r\n\r\n    getCell(rowIndex, columnIndex) {\r\n        const offset = this._rowIndices.indexOf(rowIndex);\r\n        return offset >= 0 ? this._rows[offset].getCellAt(columnIndex) : null;\r\n    }\r\n\r\n    getMergeCell(cellPosition) {\r\n        const offset = this._mergeCellPositions.indexOf(cellPosition);\r\n        return offset >= 0 ? this._mergeCells[offset] : null;\r\n    }\r\n\r\n    removeMergeCellPosition(cellPosition) {\r\n        const offset = this._mergeCellPositions.indexOf(cellPosition);\r\n        if (offset >= 0) {\r\n            this._mergeCellPositions.splice(offset, 1);\r\n            this._mergeCellLayouts.splice(offset, 1);\r\n            return this._mergeCells.splice(offset, 1)[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    hasPendingMergeCellPosition(cellPosition) {\r\n        return (this._pendingMergeCellPositions || []).indexOf(cellPosition) >= 0;\r\n    }\r\n\r\n    setMergeCell(cellPosition, cell) {\r\n        const cellPositions = this._pendingMergeCellPositions || this._mergeCellPositions;\r\n        const cells = this._pendingMergeCells || this._mergeCells;\r\n        cellPositions.push(cellPosition);\r\n        cells.push(cell);\r\n    }\r\n\r\n    /**\r\n     * 지정된 행의 위치 정보를 반환\r\n     * @param rowIndex\r\n     * @returns {*}\r\n     */\r\n    getRowLayout(rowIndex) {\r\n        const offset = this._rowIndices.indexOf(rowIndex);\r\n        return offset >= 0 ? this._rows[offset].layout : null;\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼의 위치 정보를 반환\r\n     * @param columnIndex\r\n     * @returns {*}\r\n     */\r\n    getColumnLayout(columnIndex) {\r\n        const offset = this._columnIndices.indexOf(columnIndex);\r\n        return offset >= 0 ? this._columnLayouts[offset] : null;\r\n    }\r\n\r\n    getColumnLayouts(from, to) {\r\n        if (from === to) {\r\n            return this.getColumnLayout(from);\r\n        }\r\n\r\n        const frozenRect = this._visibleFrozenIndexRect;\r\n        if (!containInterval(this._columnIndices, frozenRect.left, frozenRect.right, from, to)) {\r\n            return null;\r\n        }\r\n\r\n        const columnInterval = normalizeInterval(this._columnIndices, frozenRect.left, frozenRect.right, from, to);\r\n        const scl = this.getColumnLayout(columnInterval[0]);\r\n        const ecl = this.getColumnLayout(columnInterval[1]);\r\n        //스크롤 만큼 이동\r\n        const layout = {\r\n            x: this.getColumnX(from),\r\n            width: this.getColumnsWidth(from, to),\r\n            sx: scl.sx + this.getColumnsWidth(from, columnInterval[0] - 1),\r\n            sw: ecl.dx + ecl.dw - scl.dx,\r\n            dx: scl.dx,\r\n            dw: ecl.dx + ecl.dw - scl.dx,\r\n        };\r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 지정된 셀의 위치 정보 반환\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @returns {{}|null}\r\n     */\r\n    getCellLayout(rowIndex, columnIndex) {\r\n        const rl = this.getRowLayout(rowIndex);\r\n        const cl = this.getColumnLayout(columnIndex);\r\n        if (rl && cl) {\r\n            const layout = {...rl, ...cl};\r\n            delete layout['index'];\r\n            return layout;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getCellLayoutByCellPosition(cellPosition) {\r\n        if (!cellPosition.isMerged) {\r\n            return this.getCellLayout(cellPosition.rowIndex, cellPosition.columnIndex);\r\n        }\r\n        const offset = this._mergeCellPositions.indexOf(cellPosition);\r\n        return offset >= 0 ? this._mergeCellLayouts[offset] : null;\r\n    }\r\n\r\n    calculateCellLayoutByCellPosition(cellPosition) {\r\n        const {rowIndex, columnIndex, endRowIndex, endColumnIndex} = cellPosition;\r\n        if (!cellPosition.isMerged) {\r\n            return this.getCellLayout(rowIndex, columnIndex);\r\n        }\r\n\r\n        const frozenRect = this._visibleFrozenIndexRect;\r\n        const rowInterval = normalizeInterval(this._rowIndices, frozenRect.top, frozenRect.bottom, rowIndex, endRowIndex);\r\n        const columnInterval = normalizeInterval(this._columnIndices, frozenRect.left, frozenRect.right, columnIndex, endColumnIndex);\r\n\r\n        const srl = this.getRowLayout(rowInterval[0]);\r\n        const erl = this.getRowLayout(rowInterval[1]);\r\n\r\n        const scl = this.getColumnLayout(columnInterval[0]);\r\n        const ecl = this.getColumnLayout(columnInterval[1]);\r\n\r\n        /*   x: this.getColumnX(from),\r\n               width: this.getColumnsWidth(from, to),\r\n               sx: scl.sx + this.getColumnsWidth(from, columnInterval[0] - 1),\r\n           */\r\n\r\n        const layout = {\r\n            x: this.getColumnX(columnIndex),\r\n            y: this.getRowY(columnIndex),\r\n            width: this.getColumnsWidth(columnIndex, endColumnIndex),\r\n            height: this.getRowsHeight(rowIndex, endRowIndex),\r\n            sx: scl.sx + this.getColumnsWidth(columnIndex, columnInterval[0] - 1),\r\n            sy: srl.sy + this.getRowsHeight(rowIndex, rowInterval[0] - 1),\r\n            sw: ecl.dx + ecl.dw - scl.dx,\r\n            sh: erl.dy + erl.dh - srl.dy,\r\n            dx: scl.dx,\r\n            dy: srl.dy,\r\n            dw: ecl.dx + ecl.dw - scl.dx,\r\n            dh: erl.dy + erl.dh - srl.dy,\r\n        };\r\n        return layout;\r\n    }\r\n\r\n    isVisibleRow(rowIndex) {\r\n        return this._rowIndices.indexOf(rowIndex) >= 0;\r\n    }\r\n\r\n    isVisibleColumn(columnIndex) {\r\n        return this._columnIndices.indexOf(columnIndex) >= 0;\r\n    }\r\n\r\n    isVisiblePosition(rowIndex, columnIndex) {\r\n        return this.isVisibleRow(rowIndex) && this.isVisibleColumn(columnIndex);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    isVisibleCell(cellPosition) {\r\n        const {rowIndex, columnIndex, endRowIndex, endColumnIndex} = cellPosition;\r\n        const frozenRect = this._visibleFrozenIndexRect;\r\n        const rowVisible = containInterval(this._rowIndices, frozenRect.top, frozenRect.bottom, rowIndex, endRowIndex);\r\n        const columnVisible = containInterval(this._columnIndices, frozenRect.left, frozenRect.right, columnIndex, endColumnIndex);\r\n        return rowVisible && columnVisible;\r\n    }\r\n\r\n    /**\r\n     * 지정된 행을 구성하는 셀 목록을 반환\r\n     * @param index\r\n     * @returns {*}\r\n     */\r\n    getCellsByRow(index) {\r\n        const offset = this._rowIndices.indexOf(index);\r\n        return offset >= 0 ? this._rows[offset].cells : [];\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼을 구성하는 셀 목록을 반환\r\n     * @param index\r\n     * @returns {*}\r\n     */\r\n    getCellsByColumn(index) {\r\n        const offset = this._columnIndices.indexOf(index);\r\n        if (offset >= 0) {\r\n            return this._rows.map(row => row.cells[offset]);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * 주어진 callback 함수를 행 위치데이타 각각에 대해 실행합니다.\r\n     * @param callback(layout, rowIndex)\r\n     */\r\n    forEachRowLayouts(callback) {\r\n        this._rows.forEach((row, index) => callback(row.layout, this._rowIndices[index], row));\r\n    }\r\n\r\n    /**\r\n     * 주어진 callback 함수를 컬럼 위치데이타 각각에 대해 실행합니다.\r\n     * @param callback(layout, columnIndex)\r\n     */\r\n    forEachColumnLayouts(callback) {\r\n        this._columnLayouts.forEach((layout, index) => callback(layout, this._columnIndices[index]));\r\n    }\r\n\r\n    /**\r\n     * 주어진 callback 함수를 셀 위치데이타 각각에 대해 실행합니다.\r\n     * @param callback(layout, rowIndex, columnIndex, cell)\r\n     */\r\n    forEachCellLayouts(callback) {\r\n        const numRows = this._rowIndices.length;\r\n        const numColumns = this._columnIndices.length;\r\n        for (let i = 0; i < numRows; i++) {\r\n            const rowIndex = this._rowIndices[i];\r\n            const row = this._rows[i];\r\n            const rl = row.layout;\r\n            const cells = row.cells;\r\n            for (let j = 0; j < numColumns; j++) {\r\n                const columnIndex = this._columnIndices[j];\r\n                const cl = this._columnLayouts[j];\r\n                const cell = cells[j];\r\n                callback({...rl, ...cl}, rowIndex, columnIndex, cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 주어진 callback 함수를 셀 위치데이타 각각에 대해 실행합니다.\r\n     * @param callback(layout, rowIndex, columnIndex)\r\n     */\r\n    forEachMergeCellLayouts(callback) {\r\n        this._mergeCellLayouts.forEach((layout, index) => {\r\n            callback(layout, this._mergeCellPositions[index]);\r\n        });\r\n    }\r\n\r\n    updateStart() {\r\n        this._isUpdating = true;\r\n        this._pendingRows = [];\r\n        this._pendingIndices = [];\r\n        this._pendingMergeCellPositions = [];\r\n        this._pendingMergeCellLayouts = [];\r\n        this._pendingMergeCells = [];\r\n    }\r\n\r\n    updateEnd() {\r\n\r\n        this._isUpdating = false;\r\n\r\n        const oldRows = this._rows;\r\n        const oldMergeCells = this._mergeCells;\r\n\r\n        this._rows = this._pendingRows;\r\n        this._rowIndices = this._pendingIndices;\r\n        this._mergeCellPositions = this._pendingMergeCellPositions;\r\n        this._mergeCells = this._pendingMergeCells;\r\n\r\n        this._pendingRows = null;\r\n        this._pendingIndices = null;\r\n        this._pendingMergeCellPositions = null;\r\n        this._pendingMergeCells = null;\r\n\r\n        this._mergeCellLayouts = this._mergeCellPositions.map(cp => this.calculateCellLayoutByCellPosition(cp));\r\n        this._mergeCells = this._mergeCells.map(cell => cell instanceof Function ? cell() : cell);\r\n\r\n        this._oldColumnIndices = null;\r\n        return {\r\n            rows: oldRows,\r\n            mergeCells: oldMergeCells,\r\n        };\r\n    }\r\n\r\n    clear() {\r\n        //컬럼\r\n        this._columnIndices = [];\r\n        this._columnLayouts = [];\r\n\r\n        this._rows = [];\r\n        this._rowIndices = [];\r\n\r\n        this._mergeCells = [];\r\n        this._mergeCellPositions = [];\r\n        this._mergeCellLayouts = [];\r\n\r\n        this._visibleFrozenIndexRect = new Rectangle();\r\n        this._visibleFrozenSizeRect = new Rectangle();\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼인덱스의 x좌표를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getColumnX(index) {\r\n        return this.columnLinearVector.getTotal(0, index - 1);\r\n    }\r\n\r\n    /**\r\n     * 지정된 x좌표에 해당하는 컬럼 인덱스를 반환합니다. 범위 안에 없으면 -1을 반환합니다.\r\n     * @param x\r\n     * @returns {Number}\r\n     */\r\n    getColumnIndexByDistance(x) {\r\n        return this.columnLinearVector.indexOf(x);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스의 너비를 반환합니다.\r\n     * @param index 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnWidth(index) {\r\n        return this.columnLinearVector.getSize(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스 너비를 설정합니다.\r\n     * @param index\r\n     * @param size\r\n     */\r\n    setColumnWidth(index, size) {\r\n        const width = this.getColumnWidth(index);\r\n        if (width !== size) {\r\n            this.columnLinearVector.setSize(index, size);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * from 컬럼부터 to 컬럼까지의 너비의 합을 반환합니다.\r\n     * @param from 시작 컬럼 인덱스\r\n     * @param to 종료 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnsWidth(from, to) {\r\n        if (from < 0 || to < 0 || from == null) {\r\n            return 0;\r\n        }\r\n        return this.columnLinearVector.getTotal(from, to);\r\n    }\r\n\r\n    getRowY(index) {\r\n        return this.rowLinearVector.getTotal(0, index - 1);\r\n    }\r\n\r\n    /**\r\n     * 지정된 y좌표에 해당하는 행 인덱스를 반환합니다. 범위 안에 없으면 -1을 반환합니다.\r\n     * @param y\r\n     * @returns {Number}\r\n     */\r\n    getRowIndexByDistance(y) {\r\n        return this.rowLinearVector.indexOf(y);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스 행 높이를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getRowHeight(index) {\r\n        return this.rowLinearVector.getSize(index);\r\n    }\r\n\r\n    /**\r\n     * from 부터 to 높이의 합을 반환합니다.\r\n     * @param from\r\n     * @param to\r\n     * @returns {*}\r\n     */\r\n    getRowsHeight(from, to) {\r\n        return this.rowLinearVector.getTotal(from, to);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스의 행 높이를 설정합니다.\r\n     * @param index\r\n     * @param height\r\n     * @returns {boolean}\r\n     */\r\n    setRowHeight(index, height) {\r\n        return this.rowLinearVector.setSize(index, height);\r\n    }\r\n\r\n\r\n    setCellHeight(rowIndex, columnIndex, height) {\r\n        return this.rowLinearVector.setCellHeight(rowIndex, columnIndex, height);\r\n    }\r\n\r\n\r\n    /**\r\n     * 컨텐츠 너비를 반환합니다.\r\n     * @returns {Number}\r\n     */\r\n    getColumnsTotal() {\r\n        return this.columnLinearVector.getTotal();\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠 높이를 반환합니다.\r\n     * @returns {Number}\r\n     */\r\n    getRowsTotal() {\r\n        return this.rowLinearVector.getTotal();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    updateTypicalColumnSizes() {\r\n        const columns = this.dataGroup.normalizedColumns;\r\n\r\n        this.columnLinearVector.clear();\r\n        this.columnLinearVector.length = columns.length;\r\n\r\n        columns.forEach(column => {\r\n            const width = column.visible ? clampValue(column.width || 0, column.minWidth) : 0;\r\n            this.columnLinearVector.setSize(column.index, width);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 고정영역(상, 하, 좌, 우) 인덱스 업데이트\r\n     * @private\r\n     */\r\n    updateVisibleFrozenIndexRect() {\r\n        const {normalizedColumns: columns, frozenLeft, frozenRight, frozenTop, frozenBottom} = this.dataGroup;\r\n        const numColumns = columns.length;\r\n        const rect = new Rectangle();\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < frozenLeft && i < numColumns; i++) {\r\n            let column = columns[i];\r\n            if (column.visible) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        rect.left = count;\r\n\r\n        //right\r\n        count = 0;\r\n        for (let i = Math.max(0, numColumns - frozenRight); i < numColumns; i++) {\r\n            let column = columns[i];\r\n            if (column.visible) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        rect.right = count;\r\n        rect.top = frozenTop;\r\n        rect.bottom = frozenBottom;\r\n\r\n        this._visibleFrozenIndexRect = rect;\r\n    }\r\n\r\n    updateVisibleFrozenSizeRect() {\r\n        const {normalizedColumns: columns, frozenLeft, frozenRight, frozenTop, frozenBottom} = this.dataGroup;\r\n        const numColumns = columns.length;\r\n        const numRows = this.dataGroup.numRows;\r\n\r\n        this._visibleFrozenSizeRect.top = this.getRowsHeight(0, frozenTop - 1);\r\n        this._visibleFrozenSizeRect.bottom = this.getRowsHeight(numRows - frozenBottom, numRows - 1);\r\n\r\n        this._visibleFrozenSizeRect.left = this.getColumnsWidth(0, frozenLeft - 1);\r\n        this._visibleFrozenSizeRect.right = this.getColumnsWidth(numColumns - frozenRight, numColumns - 1);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param isNeed\r\n     * @returns {boolean}\r\n     */\r\n    updateVisibleColumns(isNeed) {\r\n        const {\r\n            normalizedColumns: columns,\r\n            clientWidth: width,\r\n            scrollLeft,\r\n            frozenLeft, frozenRight,\r\n        } = this.dataGroup;\r\n\r\n        this.updateVisibleFrozenIndexRect();\r\n\r\n        let isChanged = false;\r\n        if (isNeed) {\r\n            const defaultWidth = this.columnLinearVector.defaultSize;\r\n            const numColumns = columns.length;\r\n\r\n            let visibleIndices = [];\r\n            let flexibleIndices = [];\r\n\r\n            const calculateWidth = (column) => {\r\n                let cw;\r\n                if (column.visible) {\r\n                    if (isNaN(column.width)) {\r\n                        cw = clampValue(defaultWidth, column.minWidth);\r\n                        flexibleIndices.push(column.index);\r\n                    } else {\r\n                        cw = clampValue(column.width, column.minWidth);\r\n                    }\r\n                    visibleIndices.push(column.index);\r\n                } else {\r\n                    cw = 0;\r\n                }\r\n\r\n                this.columnLinearVector.setSize(column.index, cw);\r\n                return cw;\r\n            };\r\n\r\n            let activeTotal = 0;\r\n            let leftColumnsWidth = 0;\r\n            //left\r\n            for (let i = 0; i < frozenLeft && i < numColumns; i++) {\r\n                let column = columns[i];\r\n                let columnWidth = calculateWidth(column);\r\n                activeTotal += columnWidth;\r\n                leftColumnsWidth += columnWidth;\r\n            }\r\n\r\n            //right\r\n            for (let i = Math.max(0, numColumns - frozenRight); i < numColumns; i++) {\r\n                let column = columns[i];\r\n                if (visibleIndices.indexOf(column.index) < 0) {\r\n                    let columnWidth = calculateWidth(column);\r\n                    activeTotal += columnWidth;\r\n                }\r\n            }\r\n\r\n            //center\r\n            let startColumnIndex = this.getColumnIndexByDistance(leftColumnsWidth + scrollLeft);\r\n            activeTotal += this.getColumnX(startColumnIndex) - leftColumnsWidth - scrollLeft;\r\n\r\n            for (let i = startColumnIndex; i < numColumns - frozenRight && activeTotal < width; i++) {\r\n                let column = columns[i];\r\n                let columnWidth = calculateWidth(column);\r\n                activeTotal += columnWidth;\r\n            }\r\n\r\n            if (scrollLeft <= 0 && activeTotal < width && flexibleIndices.length > 0) {\r\n                const nWidth = width - 1;\r\n                let delta;\r\n                let i = 0;\r\n                while (activeTotal < nWidth - 1 && flexibleIndices.length > 0) {\r\n                    if (i === 0) {\r\n                        delta = Math.floor((nWidth - activeTotal) / flexibleIndices.length);\r\n                    }\r\n\r\n                    let columnIndex = flexibleIndices[i];\r\n                    let oldColumnWidth = this.getColumnWidth(columnIndex);\r\n                    let columnWidth = oldColumnWidth + Math.min(nWidth - activeTotal, delta);\r\n\r\n                    this.columnLinearVector.setSize(columnIndex, columnWidth);\r\n\r\n                    columnWidth = this.getColumnWidth(columnIndex);\r\n\r\n                    activeTotal += columnWidth - oldColumnWidth;\r\n                    if (oldColumnWidth === columnWidth) {\r\n                        flexibleIndices.splice(i, 1);\r\n                    }\r\n\r\n                    i = i < flexibleIndices.length - 1 ? i + 1 : 0;\r\n                }\r\n            }\r\n\r\n            visibleIndices = visibleIndices.sort(numericCompare);\r\n\r\n            if (this._columnIndices.length !== visibleIndices.length || this._columnIndices.some((columnIndex, i) => (columnIndex !== visibleIndices[i]))) {\r\n                this._oldColumnIndices = this._columnIndices;\r\n                this._columnIndices = visibleIndices;\r\n                isChanged = true;\r\n            }\r\n        }\r\n\r\n        this.updateVisibleColumnLayouts();\r\n\r\n        return isChanged;\r\n    }\r\n\r\n    /**\r\n     * 컬럼 위치 정보를 갱신합니다.(절대좌표 및 뷰포트 상대좌표)\r\n     */\r\n    updateVisibleColumnLayouts() {\r\n        const width = this.dataGroup.clientWidth;\r\n        const scrollLeft = this.dataGroup.scrollLeft;\r\n        const frozenRect = this._visibleFrozenIndexRect;\r\n        const vIndices = this._columnIndices;\r\n        const numVIndices = vIndices.length;\r\n\r\n        //center 기준\r\n        const startCenterOffset = frozenRect.left;\r\n        const endCenterOffset = numVIndices - frozenRect.right - 1;\r\n\r\n        const leftWidth = frozenRect.left > 0 ? this.getColumnsWidth(0, vIndices[startCenterOffset - 1]) : 0;\r\n        const rightWidth = frozenRect.right > 0 ? this.getColumnsWidth(vIndices[endCenterOffset + 1]) : 0;\r\n        const centerWidth = width - (leftWidth + rightWidth);\r\n\r\n        const startCenterX = frozenRect.left > 0 ? this.getColumnX(vIndices[frozenRect.left - 1] + 1) : 0;\r\n        const startRightX = frozenRect.right > 0 ? this.getColumnX(vIndices[endCenterOffset + 1]) : 0;\r\n\r\n        let xx = 0;\r\n        let baseX = 0;\r\n        this._columnLayouts = vIndices.map((columnIndex, offset) => {\r\n            const cx = this.getColumnX(columnIndex);\r\n            const cw = this.getColumnWidth(columnIndex);\r\n            let sx = 0;\r\n            let sw = cw;\r\n            let dx = xx;\r\n            if (offset === startCenterOffset) {//중간 영역 시작점\r\n                sx = scrollLeft - (this.getColumnX(columnIndex) - leftWidth);\r\n                sw = cw - sx;\r\n                baseX = cx;\r\n            } else if (offset === endCenterOffset && offset < numVIndices) {//중간 영역 끝점\r\n                sx = 0;\r\n                sw = leftWidth + centerWidth - xx;\r\n            }\r\n\r\n            if (offset === startCenterOffset) {\r\n                baseX = startCenterX;\r\n            } else if (offset === endCenterOffset + 1) {\r\n                baseX = startRightX;\r\n            }\r\n\r\n            xx += sw;\r\n            return {\r\n                index: columnIndex,\r\n                baseX,\r\n                x: cx, width: cw,\r\n                sx, sw, dx, dw: sw,\r\n            };\r\n        });\r\n    }\r\n}\n\n//import tachyon from '../tachyon';\nconst TOKEN = '#';\nconst PROPERTIES_KEY = '74616368796f6e6c6963-6c6f636174696f6e-686f73746e616d65';\nconst COMPANY_URL_KEY = '7777772E78656E6F696D706163742E636F6D';\nconst TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst GLOBAL = window;\nlet __isLicense = -1;\n\nfunction generate(value, d) {\n\tif (value) {\n\t\tlet num = value && value.length || 0,\n\t\t\tlen = 2,\n\t\t\ti = 0, c, r = '';\n\t\twhile (i < num) {\n\t\t\tc = value.substr(i, len);\n\t\t\tc = String.fromCharCode(parseInt(c.toString(d), d));\n\t\t\tr += c;\n\t\t\ti += len;\n\t\t}\n\t\treturn r;\n\t}\n\treturn null;\n}\n\nconst COMPANY_URL = (function (value) {\n\tconst r = value.split(String.fromCharCode(45));\n\tconst m = [];\n\tfor (let i = 0; i < r.length; i++) {\n\t\tm[i] = generate(r[i], 16);\n\t}\n\treturn m[0];\n})(COMPANY_URL_KEY);\n\nconst KEY_MAP = (function (value) {\n\tconst r = value.split(String.fromCharCode(45));\n\tconst m = [];\n\tfor (let i = 0; i < r.length; i++) {\n\t\tm[i] = generate(r[i], 16);\n\t}\n\treturn m;\n})(PROPERTIES_KEY);\n\nfunction keyCharAt(key, i) {\n\treturn key.charCodeAt(Math.floor(i % key.length));\n}\n\nfunction parse(data, callback) {\n\tif (typeof data === 'string') {\n\t\tdata = data.split('');\n\t}\n\tlet num = data && data.length || 0,\n\t\ti, r = [];\n\tfor (i = 0; i < num; i++) {\n\t\tr.push(callback(data[i], i));\n\t}\n\treturn r;\n}\n\nfunction decrypt(data) {\n\tconst key = KEY_MAP[0];\n\n\tfunction b64Decode(data) {\n\t\tlet o1, o2, o3, h1, h2, h3, h4, bits, i = 0, result = [];\n\t\tif (!data) {\n\t\t\treturn data;\n\t\t}\n\t\tdata += '';\n\t\tdo {\n\t\t\th1 = TABLE.indexOf(data.charAt(i++));\n\t\t\th2 = TABLE.indexOf(data.charAt(i++));\n\t\t\th3 = TABLE.indexOf(data.charAt(i++));\n\t\t\th4 = TABLE.indexOf(data.charAt(i++));\n\t\t\tbits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n\t\t\to1 = bits >> 16 & 0xff;\n\t\t\to2 = bits >> 8 & 0xff;\n\t\t\to3 = bits & 0xff;\n\t\t\tresult.push(o1);\n\t\t\tif (h3 !== 64) {\n\t\t\t\tresult.push(o2);\n\t\t\t\tif (h4 !== 64) {\n\t\t\t\t\tresult.push(o3);\n\t\t\t\t}\n\t\t\t}\n\t\t} while (i < data.length);\n\t\treturn result;\n\t}\n\n\treturn parse(b64Decode(data), function (c, i) {\n\t\treturn String.fromCharCode(c ^ keyCharAt(key, i));\n\t}).join('');\n}\n\n\nfunction isLicense() {\n\tif (__isLicense === -1) {\n\t\t__isLicense = false;\n\t\ttry {\n\t\t\tconst ip = ('' + GLOBAL[KEY_MAP[1]][KEY_MAP[2]]).toLowerCase();\n\t\t\tconst keys = decrypt(GLOBAL[KEY_MAP[0]]).split(TOKEN) || [];\n\t\t\tconst version = keys[0];\n\t\t\tconst content = (keys[1] || '').toLowerCase();\n\t\t\tif (ip && content && /*values[0] === ('' + VERSION) &&*/ content.indexOf(ip) >= 0) {\n\t\t\t\t__isLicense = true;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t__isLicense = -2;\n\t\t}\n\t}\n\treturn __isLicense;\n}\n\nfunction paintLicenseMark(context, width, height) {\n\tif (!isLicense()) {\n\t\tcontext.save();\n\t\tcontext.font = '20px Arial';\n\t\tcontext.color = '#000000';\n\t\tcontext.textBaseline = 'bottom';\n\t\tcontext.textAlign = 'right';\n\t\tcontext.strokeText(COMPANY_URL, width - 10, height - 10);\n\t\tcontext.restore();\n\t}\n}\n\nconst NONE_MODE = 'none';\r\nconst DOUBLE_CLICK_DELAY = 400;\r\nconst dummyCellPosition = new CellPosition();\r\n\r\nclass GroupData {\r\n    constructor(data = {}) {\r\n        this.data = data;\r\n    }\r\n\r\n    union(data) {\r\n        for (const key in data) {\r\n            const value = data[key];\r\n            if (Array.isArray(value)) {\r\n                if (!this.data[key]) {\r\n                    this.data[key] = [];\r\n                }\r\n                this.data[key] = this.data[key].concat(value);\r\n            } else if (value && typeof value === 'object') ; else {\r\n                this.data[key] = value;\r\n            }\r\n        }\r\n        return this.data;\r\n    }\r\n\r\n    get(name) {\r\n        return this.data[name];\r\n    }\r\n}\r\n\r\nfunction createContext() {\r\n    return document.createElement('canvas').getContext('2d');\r\n}\r\n\r\nfunction containsCellPosition(cellPosition, rowIndex, columnIndex) {\r\n    return cellPosition.isMerged && (cellPosition.contains(columnIndex, rowIndex) || (cellPosition instanceof CrossCellPosition && cellPosition.containsCross(columnIndex, rowIndex)));\r\n}\r\n\r\nconst findCell = row => {\r\n    const cells = row.cells;\r\n    for (let i = 0, num = cells.length; i < num; i++) {\r\n        const cell = cells[i];\r\n        if (!cell.cellPosition.isCrossed) {\r\n            return cell;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nclass DataGroup extends Group {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this._dimensions = new DataDimensions(this);\r\n        this._normalizedColumns = [];\r\n        this._bufferContexts = [];\r\n\r\n        this._backgroundLayer = this._addLayer(new Layer('background'));\r\n        this._selectionLayer = this._addLayer(new Layer('selection'));\r\n        /**\r\n         * @private\r\n         * @return {RendererLayer}\r\n         */\r\n        this._rendererLayer = this._addLayer(new RendererLayer('renderer'));\r\n        this._separatorLayer = this._addLayer(new Layer('separator'));\r\n\r\n        this._needGeneratedColumns = true;\r\n        this._frozenLeft = 0;\r\n        this._frozenRight = 0;\r\n        this._frozenTop = 0;\r\n        this._frozenBottom = 0;\r\n\r\n        this._itemRenderer = defaultConfig.itemRenderer || defaultItemRenderer;\r\n        this._nullItemRenderer = defaultConfig.nullItemRenderer || nullItemRenderer;\r\n        this._useNullItemRenderer = false;\r\n        this._autoRowHeight = false;\r\n        this._maxRowCount = -1;\r\n        this._rowCount = -1;\r\n\r\n        this._cacheStyle = null;\r\n\r\n        this._boundCollectionChange = this._onCollectionChange.bind(this);\r\n        this._boundColumnCollectionChange = this._onColumnCollectionChange.bind(this);\r\n        this._boundDocumentMouseMove = this._onDocumentMouseMove.bind(this);\r\n        this._boundDocumentMouseUp = this._onDocumentMouseUp.bind(this);\r\n\r\n        this.rowHeight = 30;\r\n        this.overRowIndex = -1;\r\n        this.overColumnIndex = -1;\r\n        this.overCell = null;\r\n        this.anchorRowIndex = -1;\r\n        this.anchorColumnIndex = -1;\r\n        this.autoMerge = false;\r\n        this.autoGenerateColumns = true;\r\n\r\n        this._oldScrollLeft = 0;\r\n        this._oldScrollTop = 0;\r\n\r\n        this.options = {\r\n            clipMode: 'clip',\r\n            hiddenElementMode: NONE_MODE/*'none'*/,\r\n            mergeMode: 'lazy',\r\n            alwaysShowMergeCell: true,\r\n        };\r\n\r\n        this.addEventListener('mousedown', this._onMouseDown.bind(this));\r\n        this.addEventListener('mousemove', this._onMouseMove.bind(this));\r\n        this.addEventListener('mouseenter', this._onMouseEnter.bind(this));\r\n        this.addEventListener('mouseleave', this._onMouseLeave.bind(this));\r\n    }\r\n\r\n    /**\r\n     * 그리드의 컬럼을 관리하는 컬렉션입니다.\r\n     * HierarchyCollection 속성 및 함수수 사용 수 있습니다.\r\n     * @returns {*}\r\n     */\r\n    get columnCollection() {\r\n        return this._columnCollection;\r\n    }\r\n\r\n    set columnCollection(value) {\r\n        this._setColumnCollection(value);\r\n        this._needGeneratedColumns = !value || value.length <= 0;\r\n    }\r\n\r\n    get collection() {\r\n        return this._collection;\r\n    }\r\n\r\n    set collection(value) {\r\n        if (this._collection) {\r\n            this._collection.removeEventListener('collection-change', this._boundCollectionChange);\r\n        }\r\n        this._collection = value;\r\n        if (this._collection) {\r\n            this._collection.addEventListener('collection-change', this._boundCollectionChange);\r\n            this._collection.dispatchCollectionEvent('reset');\r\n        }\r\n    }\r\n\r\n    get numRows() {\r\n        return this.collection && this.collection.length || 0;\r\n    }\r\n\r\n    get normalizedColumns() {\r\n        return this._normalizedColumns.slice(0);\r\n    }\r\n\r\n    get caretRowIndex() {\r\n        return this._caretRowIndex;\r\n    }\r\n\r\n    set caretRowIndex(index) {\r\n        if (index !== this.caretRowIndex) {\r\n            this._setCaretIndex(index, this.caretColumnIndex);\r\n        }\r\n        this._anchorRowIndex = index;\r\n    }\r\n\r\n    get caretColumnIndex() {\r\n        return this._caretColumnIndex;\r\n    }\r\n\r\n    set caretColumnIndex(index) {\r\n        if (index !== this.caretColumnIndex) {\r\n            this._setCaretIndex(this.caretRowIndex, index);\r\n        }\r\n        this._anchorColumnIndex = index;\r\n    }\r\n\r\n    get rowHeight() {\r\n        return this._dimensions.getRowDefaultHeight();\r\n    }\r\n\r\n    set rowHeight(value) {\r\n        if (this.rowHeight !== value) {\r\n            this._dimensions.setRowDefaultHeight(value);\r\n            this.invalidateFor(Reason.ROW_HEIGHT_CHANGE);\r\n        }\r\n    }\r\n\r\n    get autoRowHeight() {\r\n        return this._autoRowHeight;\r\n    }\r\n\r\n    set autoRowHeight(value) {\r\n        if (this.autoRowHeight !== value) {\r\n            this._autoRowHeight = value;\r\n            this.scrollTop = 0;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get maxRowCount() {\r\n        return this._maxRowCount;\r\n    }\r\n\r\n    set maxRowCount(value) {\r\n        if (this._maxRowCount !== value) {\r\n            this._maxRowCount = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get rowCount() {\r\n        return this._rowCount;\r\n    }\r\n\r\n    set rowCount(value) {\r\n        if (this._rowCount !== value) {\r\n            this._rowCount = value;\r\n            //  this.invalidate();\r\n        }\r\n    }\r\n\r\n    get normalizedRowCount() {\r\n        let count = this.rowCount;\r\n        if (count > 0 && this.maxRowCount > 0 && count > this.maxRowCount) {\r\n            count = this.maxRowCount;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    get itemRenderer() {\r\n        return this._itemRenderer;\r\n    }\r\n\r\n    set itemRenderer(value) {\r\n        if (this._itemRenderer !== value) {\r\n            this._itemRenderer = value;\r\n            this._itemRendererChanged();\r\n        }\r\n    }\r\n\r\n    get nullItemRenderer() {\r\n        return this._nullItemRenderer;\r\n    }\r\n\r\n    set nullItemRenderer(value) {\r\n        if (this._nullItemRenderer !== value) {\r\n            this._nullItemRenderer = value;\r\n            this._itemRendererChanged();\r\n        }\r\n    }\r\n\r\n    get mergeItemRenderer() {\r\n        return this._mergeItemRenderer;\r\n    }\r\n\r\n    set mergeItemRenderer(value) {\r\n        if (this._mergeItemRenderer !== value) {\r\n            this._mergeItemRenderer = value;\r\n            this._itemRendererChanged();\r\n        }\r\n    }\r\n\r\n    get frozenLeft() {\r\n        return this._frozenLeft;\r\n    }\r\n\r\n    set frozenLeft(value) {\r\n        value = Math.max(value, 0);\r\n        if (this._frozenLeft !== value) {\r\n            this._frozenLeft = value;\r\n            this._frozenCountChanged();\r\n        }\r\n    }\r\n\r\n    get frozenRight() {\r\n        return this._frozenRight;\r\n    }\r\n\r\n    set frozenRight(value) {\r\n        value = Math.max(value, 0);\r\n        if (this._frozenRight !== value) {\r\n            this._frozenRight = value;\r\n            this._frozenCountChanged();\r\n        }\r\n    }\r\n\r\n    get frozenTop() {\r\n        return this._frozenTop;\r\n    }\r\n\r\n    set frozenTop(value) {\r\n        value = Math.max(value, 0);\r\n        if (this._frozenTop !== value) {\r\n            this._frozenTop = value;\r\n            this._frozenCountChanged();\r\n        }\r\n    }\r\n\r\n    get frozenBottom() {\r\n        return this._frozenBottom;\r\n    }\r\n\r\n    set frozenBottom(value) {\r\n        value = Math.max(value, 0);\r\n        if (this._frozenBottom !== value) {\r\n            this._frozenBottom = value;\r\n            this._frozenCountChanged();\r\n        }\r\n    }\r\n\r\n    get mergeCompare() {\r\n        return this._mergeCompare;\r\n    }\r\n\r\n    set mergeCompare(value) {\r\n        if (this._mergeCompare !== value) {\r\n            this._mergeCompare = value;\r\n            this.invalidateFor(Reason.ITEMS_CHANGE);\r\n        }\r\n    }\r\n\r\n    get useNullItemRenderer() {\r\n        return this._useNullItemRenderer;\r\n    }\r\n\r\n    set useNullItemRenderer(value) {\r\n        if (this._useNullItemRenderer !== value) {\r\n            this._useNullItemRenderer = value;\r\n            this.invalidateFor(Reason.ALL);\r\n        }\r\n    }\r\n\r\n    _itemRendererChanged() {\r\n        this.clearCache();\r\n        this.invalidateFor(Reason.ALL);\r\n    }\r\n\r\n    _frozenCountChanged(v) {\r\n        this.invalidateFor(Reason.ALL);\r\n    }\r\n\r\n    _setColumnCollection(value) {\r\n        let events = ['collection-change', 'node-change'];\r\n        let handler = this._boundColumnCollectionChange;\r\n        if (this._columnCollection) {\r\n            events.forEach(type => {\r\n                this._columnCollection.removeEventListener(type, handler);\r\n            });\r\n        }\r\n        this._columnCollection = value;\r\n        if (this._columnCollection) {\r\n            events.forEach(type => {\r\n                this._columnCollection.addEventListener(type, handler);\r\n            });\r\n            this._columnCollection.dispatchCollectionEvent('reset');\r\n        } else {\r\n            this._resetColumns();\r\n        }\r\n    }\r\n\r\n    clearItemRenderers() {\r\n        const dimensions = this._dimensions;\r\n        this._freeCells(dimensions.cells.concat(dimensions.mergeCells));\r\n    }\r\n\r\n    clearCache() {\r\n        this.clearItemRenderers();\r\n        this._dimensions.clear();\r\n\r\n        this.scrollLeft = 0;\r\n        this.scrollTop = 0;\r\n\r\n        this.clearElementCache();\r\n        this.clearCellMerger();\r\n        this.clearSelection();\r\n\r\n        this._caretColumnIndex = -1;\r\n        this._caretRowIndex = -1;\r\n        this._anchorRowIndex = -1;\r\n        this._anchorColumnIndex = -1;\r\n        this.invalidateFor(Reason.ALL);\r\n    }\r\n\r\n    _clearCacheForIndicator() {\r\n        this.clearItemRenderers();\r\n        this._dimensions.clear();\r\n\r\n        this.clearCellMerger();\r\n        this.clearSelection();\r\n\r\n        this._caretColumnIndex = -1;\r\n        this._caretRowIndex = -1;\r\n        this._anchorRowIndex = -1;\r\n        this._anchorColumnIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * 전체 컬럼 갱신\r\n     * @private\r\n     */\r\n    _resetColumns() {\r\n        const grid = this.grid;\r\n        const collection = this.columnCollection;\r\n        const oldColumns = this.normalizedColumns;\r\n        const newColumns = [];\r\n        if (collection) {\r\n            collection.updateColumns();\r\n            collection.find(column => {\r\n                column.setGrid(grid);\r\n                if (column.isLeaf) {\r\n                    column.index = newColumns.length;\r\n                    newColumns.push(column);\r\n                }\r\n            });\r\n        }\r\n\r\n        this._normalizedColumns = newColumns;\r\n        this._dimensions.updateTypicalColumnSizes();\r\n\r\n        this._dispatchChangeEvent('normalized-columns-change', newColumns, oldColumns);\r\n        this.invalidateFor(Reason.COLUMNS_CHANGE);\r\n    }\r\n\r\n    _measureSize() {\r\n        const columns = this.normalizedColumns;\r\n        const numColumns = columns.length;\r\n        let cw = 0;\r\n        for (let i = 0; i < this.frozenLeft; i++) {\r\n            cw += this.getColumnWidth(i);\r\n        }\r\n\r\n        for (let i = numColumns - this.frozenRight; i < numColumns; i++) {\r\n            cw += this.getColumnWidth(i);\r\n        }\r\n\r\n        if (cw >= 0) {\r\n            this.style.minWidth = cw + 'px';\r\n        }\r\n    }\r\n\r\n    _updateDisplay() {\r\n        this._dispatchDataGroupEvent('render-updating', this._reasonsMask);\r\n        const dimensions = this._dimensions;\r\n        const width = this.clientWidth;\r\n        const height = this.clientHeight;\r\n        const scrollX = this.scrollLeft;\r\n        const scrollY = this.scrollTop;\r\n\r\n        const isItemsChanged = this.isInvalidateReason(Reason.ITEMS_CHANGE);\r\n        const isColumnsChanged = this.isInvalidateReason(Reason.COLUMNS_CHANGE);\r\n        const isVisibleColumnsChanged = isItemsChanged || isColumnsChanged || this.isInvalidateReason(Reason.VISIBLE_COLUMNS_CHANGE, Reason.COLUMN_UPDATE, Reason.GROUP_SIZE_CHANGE);\r\n        const isMergedChanged = isColumnsChanged || isItemsChanged;\r\n\r\n        if (this.autoMerge && isMergedChanged) {\r\n            this.merger.analysisReady();\r\n            if (this.options.mergeMode === 'all') {\r\n                this.merger.analysisAll();\r\n            }\r\n        }\r\n\r\n        if (isItemsChanged || isColumnsChanged) {\r\n            this._measureSize();\r\n            this._generateColumns();\r\n        }\r\n\r\n        this._beginLayers();\r\n\r\n        const oldColumnIndices = dimensions.columnIndices;\r\n        if (dimensions.updateVisibleColumns(isVisibleColumnsChanged) || isColumnsChanged) {\r\n            this._dispatchChangeEvent('visible-columns-change', dimensions.columnIndices, oldColumnIndices);\r\n        }\r\n\r\n        if (isColumnsChanged || isItemsChanged) {\r\n            this._resetCaret();\r\n        }\r\n\r\n        this._cacheStyle = this.grid.getStyle('cellBackgroundColor', 'rowColors', 'backgroundColor', 'cellSelectionColor', 'cellOverColor', 'rowLine', 'columnLine', 'frozenLine', 'caretLine');\r\n\r\n        //4. 레이어 업데이트.\r\n        this._prepareLayers(scrollX, scrollY, width, height);\r\n\r\n        //3. 행기준 셀생성.\r\n        this._createGrid(scrollX, scrollY, width, height);\r\n        this.setContentSize(this.getContentWidth(), this.getContentHeight());\r\n\r\n        this._paintBackgrounds(scrollX, scrollY, width, height);\r\n        this._paintSelectionIndicators(scrollX, scrollY, width, height);\r\n        this._paintHighlightIndicators(scrollX, scrollY, width, height);\r\n        this._paintSeparators(scrollX, scrollY, width, height);\r\n        this._paintCaretIndicators(scrollX, scrollY, width, height);\r\n\r\n        this._updateLayers(scrollX, scrollY, width, height, this.getContentWidth(), this.getContentHeight(), this.getVisibleFrozenSizeRect());\r\n        this._endLayers();\r\n\r\n        if (this._oldWidth !== width || this._oldHeight !== height) {\r\n            this._dispatchDataGroupEvent('group-size-change', this._reasonsMask);\r\n            this._oldWidth = width;\r\n            this._oldHeight = height;\r\n        }\r\n\r\n        this._dispatchDataGroupEvent('render-update', this._reasonsMask);\r\n        /*\r\n        if (this.collection && this.collection.length > 0) {\r\n            let endTime = Date.now();\r\n            let time = endTime - startTime;\r\n            this._count = (this._count && this._count + 1) || 1;\r\n            this._min = Math.min(this._min || 999999, time);\r\n            this._max = Math.max(this._max || 0, time);\r\n            this._total = (this._total || 0) + time;\r\n            console.log('render ', time, this._min, this._max, parseInt(this._total / this._count));\r\n        }\r\n        */\r\n    }\r\n\r\n    _resetCaret() {\r\n        let rowIndex = -1,\r\n            columnIndex = -1;\r\n\r\n        this._setCaretIndex(rowIndex, columnIndex);\r\n        this._anchorRowIndex = rowIndex;\r\n        this._anchorColumnIndex = columnIndex;\r\n    }\r\n\r\n    _setCaretIndex(rowIndex, columnIndex) {\r\n        let isChanged = false;\r\n        let cell = this.findMergeCellPosition(rowIndex, columnIndex);\r\n        if (cell) {\r\n            rowIndex = cell.rowIndex;\r\n            columnIndex = cell.columnIndex;\r\n        }\r\n\r\n        if (this._caretRowIndex !== rowIndex) {\r\n            this._caretRowIndex = rowIndex;\r\n            isChanged = true;\r\n        }\r\n\r\n        if (this._caretColumnIndex !== columnIndex) {\r\n            this._caretColumnIndex = columnIndex;\r\n            isChanged = true;\r\n        }\r\n\r\n        if (isChanged) {\r\n            this._dispatchCaretChangeEvent(this._caretRowIndex, this._caretColumnIndex);\r\n            this.invalidateFor(Reason.CARET_CHANGE);\r\n        }\r\n        return isChanged;\r\n    }\r\n\r\n    _generateColumns() {\r\n        if (this.autoGenerateColumns && this._needGeneratedColumns && this.numRows > 0) {\r\n            const keys = Object.keys(this.collection.get(0));\r\n            const columns = keys.map(key => new GridColumn(key));\r\n            this._setColumnCollection(new ColumnCollection(columns));\r\n            this._needGeneratedColumns = false;\r\n        }\r\n    }\r\n\r\n    _createGrid(scrollX, scrollY, width, height) {\r\n\r\n        const dimensions = this._dimensions;\r\n        const frozenIndexRect = dimensions.visibleFrozenIndexRect;\r\n        const numRows = this.numRows;\r\n        //수평 정보 갱신 완료인 상태\r\n        dimensions.updateStart();\r\n\r\n        let startRowIndex, endRowIndex, startY, startOffsetY;\r\n        //1. 상단\r\n        if (frozenIndexRect.top > 0) {\r\n            startRowIndex = 0;\r\n            endRowIndex = Math.min(frozenIndexRect.top - 1, numRows - 1);\r\n            startY = 0;\r\n            startOffsetY = 0;\r\n            this._createRows(Section.TOP, startRowIndex, endRowIndex, startY, startOffsetY, width, height, 0);\r\n        }\r\n\r\n        //2. 하단\r\n        if (frozenIndexRect.bottom > 0) {\r\n            startRowIndex = Math.max(frozenIndexRect.top, numRows - frozenIndexRect.bottom);\r\n            endRowIndex = numRows - 1;\r\n            startY = 0;\r\n            startOffsetY = height - this.getRowsHeight(numRows - this.frozenBottom, numRows - 1);\r\n            this._createRows(Section.BOTTOM, startRowIndex, endRowIndex, startY, startOffsetY, width, height, 0);\r\n        }\r\n\r\n        dimensions.updateVisibleFrozenSizeRect();\r\n\r\n        const frozenSizeRect = dimensions.visibleFrozenSizeRect;\r\n        startRowIndex = this.getRowIndexByDistance(scrollY + frozenSizeRect.top);\r\n        endRowIndex = numRows - (frozenIndexRect.bottom + 1);\r\n        startY = this.getRowY(startRowIndex) - frozenSizeRect.top;\r\n        startOffsetY = this.getRowsHeight(0, this.frozenTop - 1);\r\n        {\r\n            this._createRows(Section.MIDDLE, startRowIndex, endRowIndex, startY, startOffsetY, width, height - (frozenSizeRect.top + frozenSizeRect.bottom), scrollY);\r\n            const {rows: removedRows, mergeCells: removedMergeCells} = this._dimensions.updateEnd();\r\n            this._paintMergeCells();\r\n            this._freeRows(removedRows);\r\n            this._freeCells(removedMergeCells);\r\n            dimensions.updateVisibleFrozenSizeRect();\r\n\r\n        }\r\n    }\r\n\r\n    _asyncCreateRows(vSectionIndex, startRowIndex, endRowIndex, startRowY, width, height) {\r\n        const items = this.collection.toArray();\r\n        const scrollY = this.scrollTop;\r\n        const autoRowHeight = this.autoRowHeight;\r\n        const cellMerger = this.merger;\r\n        const autoMerge = this.autoMerge;\r\n        const groupData = new GroupData({\r\n            cellInfos: [],\r\n            mergeCells: [],\r\n        });\r\n\r\n        let viewHeight = this._calculateViewHeight(height);\r\n        const asyncCreateRow = (startIndex, startY) => {\r\n            return new Promise(resolve => {\r\n                const startTime = Date.now();\r\n                const TIME = 100;\r\n                let y = startY;\r\n                let index = startIndex;\r\n                while (Date.now() - startTime < TIME && y - scrollY < viewHeight) {\r\n                    if (autoMerge) {\r\n                        cellMerger.analysisRow(index);\r\n                    }\r\n\r\n                    const oldRowHeight = linearList.getSize(index);\r\n                    groupData.union(this._createRow(vSectionIndex, items[index], index, y));\r\n                    const height = linearList.getSize(index);\r\n\r\n                    if (autoRowHeight && height !== oldRowHeight) {\r\n                        viewHeight = this._calculateViewHeight(height);\r\n                    }\r\n\r\n                    y += height;\r\n                    index++;\r\n                }\r\n                resolve({\r\n                    lastIndex: index,\r\n                    lastY: y,\r\n                });\r\n            });\r\n        };\r\n\r\n        return new Promise(resolve => {\r\n            const execute = (rowIndex, startY) => {\r\n                asyncCreateRow(rowIndex, startY).then(result => {\r\n                    const {lastIndex, lastY} = result;\r\n\r\n                    if (lastIndex <= endRowIndex && (lastY - scrollY) < viewHeight) {\r\n                        execute(rowIndex, lastY);\r\n                    } else {\r\n                        resolve(groupData);\r\n                    }\r\n                });\r\n            };\r\n            execute(startRowIndex, startRowY);\r\n        });\r\n    }\r\n\r\n    _createRows(vSectionIndex, startRowIndex, endRowIndex, startRowY, startOffsetY, width, height, scrollTop) {\r\n\r\n        const dimensions = this._dimensions;\r\n        const items = this.collection && this.collection.toArray() || [];\r\n        const autoRowHeight = this.autoRowHeight;\r\n        const cellMerger = this.merger;\r\n        const autoMerge = this.autoMerge;\r\n\r\n        let rowIndex = startRowIndex;\r\n        let yy = startRowY;\r\n        let oy = startOffsetY;\r\n        let viewHeight = this._calculateViewHeight(height);\r\n\r\n        const preStartRow = rowIndex;\r\n        const preEndRow = Math.min(endRowIndex, startRowIndex + Math.ceil(viewHeight / this.rowHeight));\r\n        if (autoMerge) {\r\n            cellMerger.analysisRows(preStartRow, preEndRow);\r\n        }\r\n        this.setMergeVisibleRect(preStartRow, 0, preEndRow, this.normalizedColumns.length - 1);\r\n\r\n\r\n        function updateRow(rowIndex, row, rowHeight, rowY, offsetY) {\r\n            let sy = 0;\r\n            let sh = rowHeight;\r\n\r\n            if (startRowIndex === rowIndex) {\r\n                sy = scrollTop - startRowY;\r\n                sh = rowHeight - sy;\r\n            } else if (rowY - scrollTop + rowHeight >= viewHeight) {\r\n                sy = 0;\r\n                sh = viewHeight - (rowY - scrollTop);\r\n            }\r\n\r\n            row.setLayout({\r\n                index: rowIndex,\r\n                y: rowY, height: rowHeight,\r\n                sy, sh, dy: offsetY, dh: sh,\r\n            });\r\n        }\r\n\r\n        while (rowIndex <= endRowIndex && yy - scrollTop < viewHeight) {\r\n            if (autoMerge && preEndRow < rowIndex) {\r\n                cellMerger.analysisRow(rowIndex);\r\n            }\r\n\r\n            let rowHeight = dimensions.getRowHeight(rowIndex);\r\n            let row = this._createRow(items[rowIndex], rowIndex, yy, rowHeight);\r\n            if (autoRowHeight && row.height !== rowHeight) {\r\n                viewHeight = this._calculateViewHeight(height);\r\n                rowHeight = row.height;\r\n            }\r\n\r\n            updateRow(rowIndex, row, rowHeight, yy, oy);\r\n            this._paintRow(row);\r\n            oy += row.layout.sh;\r\n            yy += rowHeight;\r\n            ++rowIndex;\r\n        }\r\n    }\r\n\r\n    _createRow(item, rowIndex, rowY, rowHeight) {\r\n        const dimensions = this._dimensions;\r\n        this.autoRowHeight;\r\n        const columns = this._normalizedColumns;\r\n        const row = dimensions.takeRow(rowIndex) || dimensions.createRow(rowIndex);\r\n        const newCells = [];\r\n\r\n        row.setIndex(rowIndex);\r\n\r\n        dimensions.forEachColumnLayouts((layout, columnIndex) => {\r\n            const column = columns[columnIndex];\r\n            const cell = row.takeCellAt(columnIndex);\r\n            const cellPosition = this.findMergeCellPositionFromVisibleRect(rowIndex, columnIndex) || new CellPosition(rowIndex, columnIndex);\r\n            const newCell = this._createCell(item, column, cellPosition, layout.x - layout.baseX, rowY, layout.width, rowHeight, cell);\r\n\r\n            if (cellPosition.isMerged) {\r\n                if (!dimensions.hasPendingMergeCellPosition(cellPosition)) {\r\n                    const mergeCell = dimensions.getMergeCell(cellPosition);\r\n                    if (mergeCell) {\r\n                        dimensions.removeMergeCellPosition(cellPosition);\r\n                    }\r\n                    dimensions.setMergeCell(cellPosition, () => {\r\n                        return this._createMergeCell(cellPosition, mergeCell);\r\n                    });\r\n                }\r\n            }\r\n            newCells.push(newCell);\r\n        });\r\n\r\n        const removedCells = row.cells.slice(0);\r\n        row.setCells(newCells).setHeight(rowHeight);\r\n        dimensions.setRow(rowIndex, row, rowHeight);\r\n\r\n        this._freeCells(removedCells);\r\n\r\n        return row;\r\n    }\r\n\r\n\r\n    _setupCell(cell, item, column, cellPosition) {\r\n        if (!cell) {\r\n            cell = this._dimensions.createCell(item, column, cellPosition);\r\n        }\r\n\r\n        cell.item = item;\r\n        cell.column = column;\r\n        cell.cellPosition = cellPosition;\r\n        cell.value = this.itemToValue(item, column);\r\n        cell.label = this.itemToLabel(item, column, cellPosition);\r\n        cell.hovered = this.isCellSelectionMode ? cellPosition.contains(this.overColumnIndex, this.overRowIndex) : cellPosition.rowIndex === this.overRowIndex;\r\n        cell.selected = this.isCellSelectionMode ? this.containsSelectedCell(cellPosition) : this.containsSelectedPosition(cellPosition.rowIndex, 0);\r\n\r\n        return cell;\r\n    }\r\n\r\n    /**\r\n     * 셀 생성\r\n     */\r\n    _createCell(item, column, cellPosition, x, y, width, height, cellCache) {\r\n        const cell = this._setupCell(cellCache, item, column, cellPosition);\r\n        const isMerged = cell.isMerged;\r\n        let renderer = cell.renderer;\r\n        if (!isMerged && !renderer) {\r\n            renderer = this._createRenderer(item, column, cellPosition, cell);\r\n        }\r\n        cell.renderer = renderer;\r\n        cell.visible = !isMerged;\r\n\r\n        const element = renderer?.htmlElement;\r\n        if (element instanceof HTMLElement) {\r\n            if (isMerged) {\r\n                this._rendererLayer.removeElement(element);\r\n            } else {\r\n                this._rendererLayer.addElement(this.getVerticalSectionIndex(cellPosition.rowIndex), this.getHorizontalSectionIndex(cellPosition.columnIndex), element);\r\n                addClass(element, 'grid-cell');\r\n                setSize(element, width, height);\r\n                setTranslate(element, x, y);\r\n            }\r\n        }\r\n\r\n        if (cell.visible) {\r\n            callHook(renderer, 'prepare', this.grid, cell);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n\r\n    /**\r\n     * 병합셀 생성\r\n     * @param cellPosition\r\n     * @param cellCache\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    _createMergeCell(cellPosition, cellCache) {\r\n        const item = this.collection.get(cellPosition.rowIndex);\r\n        const column = this.normalizedColumns[cellPosition.columnIndex];\r\n        const cell = this._setupCell(cellCache, item, column, cellPosition);\r\n        const renderer = cell.renderer || this._createRenderer(item, column, cellPosition, cell);\r\n        cell.renderer = renderer;\r\n        cell.visible = true;\r\n\r\n        const element = renderer.htmlElement;\r\n        if (element instanceof HTMLElement) {\r\n            const layout = this._dimensions.getCellLayoutByCellPosition(cellPosition);\r\n            this._rendererLayer.addOverlayElement(element);\r\n            addClass(element, 'grid-cell');\r\n            setSize(element, layout.dw, layout.dh);\r\n            setTranslate(element, layout.dx, layout.dy);\r\n        }\r\n\r\n        if (cell.visible) {\r\n            callHook(renderer, 'prepare', this.grid, cell);\r\n        }\r\n\r\n        return cell;\r\n    }\r\n\r\n    _paintRow(row) {\r\n        const context = this._rendererLayer.context;\r\n        const rl = row.layout;\r\n        const columnLayouts = this._dimensions.columnLayouts;\r\n        const autoRowHeight = this.autoRowHeight;\r\n\r\n        row.cells.forEach((cell, index) => {\r\n            const column = cell.column;\r\n            const cl = columnLayouts[index];\r\n            const height = this._internalPaintCell(context, cell, cl.width, rl.height, cl.sx, rl.sy, cl.sw, rl.sh, cl.dx, rl.dy);\r\n            if (autoRowHeight && column.wordWrap && !cell.renderer.isDomRenderer) {\r\n                this._dimensions.setCellHeight(row.index, column.index, height);\r\n            }\r\n        });\r\n    }\r\n\r\n    _paintMergeCells() {\r\n        const context = this._rendererLayer.context;\r\n        const dimensions = this._dimensions;\r\n        dimensions.forEachMergeCellLayouts((layout, cellPosition) => {\r\n            const cell = dimensions.getMergeCell(cellPosition);\r\n            this._internalPaintCell(context, cell, layout.dw, layout.dh, 0, 0, layout.dw, layout.dh, layout.dx, layout.dy);\r\n        });\r\n    }\r\n\r\n    _paintCell(context, cell, layout) {\r\n        context.clearRect(layout.dx, layout.dy, layout.dw, layout.dh);\r\n        if (cell.cellPosition.isMerged) {\r\n            this._internalPaintCell(context, cell, layout.dw, layout.dh, 0, 0, layout.dw, layout.dh, layout.dx, layout.dy);\r\n        } else {\r\n            this._internalPaintCell(context, cell, layout.width, layout.height, layout.sx, layout.sy, layout.dw, layout.dh, layout.dx, layout.dy);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param context\r\n     * @param cell\r\n     * @param width cell 실 가로 크기\r\n     * @param height  cell 실 세로 크기\r\n     * @param sx\r\n     * @param sy\r\n     * @param sw\r\n     * @param sh\r\n     * @param dx\r\n     * @param dy\r\n     * @private\r\n     */\r\n    _internalPaintCell(context, cell, width, height, sx, sy, sw, sh, dx, dy) {\r\n        if (cell.visible) {\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(dx, dy, sw, sh);\r\n            context.clip();\r\n\r\n            context.translate(dx - sx, dy - sy);\r\n            const result = cell.renderer.paint(context, cell, width, height);\r\n            context.restore();\r\n            return result\r\n        }\r\n        return height;\r\n    }\r\n\r\n    _freeRows(rows) {\r\n        rows.forEach(row => this._freeCells(row.cells));\r\n    }\r\n\r\n    _freeCells(cells) {\r\n        const layer = this._rendererLayer;\r\n        cells.forEach(cell => {\r\n            const renderer = cell && cell.renderer;\r\n            if (renderer) {\r\n                const element = renderer.htmlElement;\r\n                callHook(renderer, 'dispose');\r\n\r\n                if (element) {\r\n                    layer.removeElement(element);\r\n                }\r\n                this._freeRenderer(renderer);\r\n                cell.renderer = null;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    itemToLabel(item, column, cellPosition) {\r\n        let func = this.grid.labelFunction;\r\n        if (func) {\r\n            return func(item, column, cellPosition);\r\n        }\r\n        return column.itemToLabel(item);\r\n    }\r\n\r\n    itemToValue(item, column) {\r\n        return column.itemToValue(item);\r\n    }\r\n\r\n    getViewMinHeight() {\r\n        return this._calculateViewHeight(0);\r\n    }\r\n\r\n    /**\r\n     * TO DO\r\n     */\r\n    _getBufferContext(width, height) {\r\n        let DEFAULT_WIDTH = 200, DEFAULT_HEIGHT = 100,\r\n            context, canvas;\r\n        if (width <= DEFAULT_WIDTH && height <= DEFAULT_HEIGHT) {\r\n            context = this._bufferContexts.length > 0 ? this._bufferContexts[0] : null;\r\n            if (!context) {\r\n                context = createContext();\r\n                canvas = context.canvas;\r\n                canvas.width = DEFAULT_WIDTH;\r\n                canvas.height = DEFAULT_HEIGHT;\r\n                this._bufferContexts[0] = context;\r\n            }\r\n        } else {\r\n            context = this._bufferContexts.length > 1 ? this._bufferContexts[1] : null;\r\n            if (!context) {\r\n                context = createContext();\r\n                this._bufferContexts[1] = context;\r\n            }\r\n            canvas = context.canvas;\r\n            if (canvas.width < width || canvas.height < height) {\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n            }\r\n        }\r\n        return context;\r\n    }\r\n\r\n    _paintBackgrounds(scrollX, scrollY, width, height) {\r\n        const dimensions = this._dimensions;\r\n        const context = this._backgroundLayer.context;\r\n        const {rowColors, backgroundColor} = this._cacheStyle;\r\n\r\n        context.save();\r\n        context.beginPath();\r\n\r\n        if (backgroundColor) {\r\n            context.fillStyle = backgroundColor;\r\n            context.fillRect(0, 0, width, height);\r\n        }\r\n\r\n        //행 백그라운드\r\n        dimensions.forEachRowLayouts((layout, rowIndex) => {\r\n            let color;\r\n            if (rowColors instanceof Function) {\r\n                color = callValue(rowColors, rowIndex);\r\n            } else if (Array.isArray(rowColors)) {\r\n                color = rowColors[rowIndex % rowColors.length];\r\n            } else if (typeof rowColors === 'string') {\r\n                color = rowColors;\r\n            }\r\n\r\n            context.fillStyle = color;\r\n            context.fillRect(0, layout.dy, width, layout.dh);\r\n        });\r\n        context.restore();\r\n\r\n        //컬럼 백그라운드\r\n        context.save();\r\n        const columns = this.normalizedColumns;\r\n        dimensions.forEachColumnLayouts((layout, columnIndex) => {\r\n            const color = columns[columnIndex].getStyle('backgroundColor');\r\n            if (color) {\r\n                context.fillStyle = color;\r\n                context.fillRect(layout.dx, 0, layout.dw, height);\r\n            }\r\n        });\r\n        context.restore();\r\n\r\n        const cellBackgroundColor = this._cacheStyle['cellBackgroundColor'];\r\n        if (cellBackgroundColor instanceof Function) {\r\n            dimensions.forEachCellLayouts((layout, rowIndex, columnIndex) => {\r\n                const color = cellBackgroundColor(rowIndex, columnIndex);\r\n                if (color) {\r\n                    context.fillStyle = color;\r\n                    context.fillRect(layout.dx, layout.dy, layout.dw, layout.dh);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    _paintSelectionIndicators(scrollX, scrollY, width, height) {\r\n        if (!this.hasSelectionMode) {\r\n            return;\r\n        }\r\n\r\n        const context = this._selectionLayer.context;\r\n        const isRowSelection = this.isRowSelectionMode;\r\n        const dimensions = this._dimensions;\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.fillStyle = this._cacheStyle['cellSelectionColor'];\r\n\r\n        if (isRowSelection) {\r\n            dimensions.forEachRowLayouts((layout, index, row) => {\r\n                const cell = findCell(row);\r\n                if (cell && cell.selected) {\r\n                    context.fillRect(0, layout.dy, width, layout.dh);\r\n                }\r\n            });\r\n        } else {\r\n            dimensions.forEachCellLayouts((layout, rowIndex, columnIndex, cell) => {\r\n                if (cell && cell.selected) {\r\n                    context.fillRect(layout.dx, layout.dy, layout.dw, layout.dh);\r\n                }\r\n            });\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * 셀 오버시 표시\r\n     * @param scrollX\r\n     * @param scrollY\r\n     * @param width\r\n     * @param height\r\n     * @private\r\n     */\r\n    _paintHighlightIndicators(scrollX, scrollY, width, height) {\r\n        const dimensions = this._dimensions;\r\n        const context = this._selectionLayer.context;\r\n        const rowIndex = this.overRowIndex;\r\n        const columnIndex = this.overColumnIndex;\r\n\r\n        let layout;\r\n        if (this.isRowSelectionMode) {\r\n            if (!dimensions.isVisibleRow(rowIndex)) {\r\n                return;\r\n            }\r\n            layout = {...dimensions.getRowLayout(rowIndex), ...{dx: 0, dw: this.clientWidth}};\r\n        } else {\r\n            const cellPosition = this.findMergeCellPosition(rowIndex, columnIndex) || new CellPosition(rowIndex, columnIndex);\r\n            if (!dimensions.isVisibleCell(cellPosition)) {\r\n                return;\r\n            }\r\n            layout = dimensions.getCellLayoutByCellPosition(cellPosition);\r\n        }\r\n\r\n        if (layout) {\r\n            context.save();\r\n            context.beginPath();\r\n            context.fillStyle = this._cacheStyle['cellOverColor'];\r\n            context.fillRect(layout.dx, layout.dy, layout.dw, layout.dh);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 셀 구분선 그리기\r\n     * @param scrollX\r\n     * @param scrollY\r\n     * @param width\r\n     * @param height\r\n     * @private\r\n     */\r\n    _paintSeparators(scrollX, scrollY, width, height) {\r\n        const context = this._separatorLayer.context;\r\n        const dimensions = this._dimensions;\r\n        const frozenSizeRect = dimensions.visibleFrozenSizeRect;\r\n        const columnLayouts = dimensions.columnLayouts;\r\n        const numColumnLayouts = columnLayouts.length;\r\n        const rowLineStyle = this._cacheStyle['rowLine'];\r\n        const rowDrawLine = (y, fromOffset, toOffset) => {\r\n            const sl = columnLayouts[fromOffset];\r\n            const el = columnLayouts[toOffset];\r\n            lineTo(context, sl.dx, y, el.dx + el.dw, y, rowLineStyle);\r\n        };\r\n\r\n        //행 구분선\r\n        context.save();\r\n        dimensions.forEachRowLayouts((layout, rowIndex) => {\r\n            const cells = dimensions.getCellsByRow(rowIndex);\r\n            let start = 0;\r\n            let i = 0;\r\n            for (; i < numColumnLayouts; i++) {\r\n                const cell = cells[i];\r\n                const column = cell.column;\r\n                if (containsCellPosition(cell.cellPosition, rowIndex + 1, column.index)) {\r\n                    if (start < i) {\r\n                        rowDrawLine(layout.dy + layout.dh, start, i - 1);\r\n                    }\r\n                    start = i + 1;\r\n                }\r\n            }\r\n            if (start < i) {\r\n                rowDrawLine(layout.dy + layout.dh, start, i - 1);\r\n            }\r\n        });\r\n\r\n        //가상행\r\n        if (this.getContentHeight() < height) {\r\n            const frozenBottom = dimensions.visibleFrozenSizeRect.bottom;\r\n            const rowHeight = this.rowHeight;\r\n            let y = this.getContentHeight() - frozenBottom;\r\n            while (y < height - frozenBottom) {\r\n                lineTo(context, 0, y, width, y, rowLineStyle);\r\n                y += rowHeight;\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        //컬럼 구분선.\r\n        const columns = this._normalizedColumns;\r\n        const rows = dimensions.rows;\r\n        const numRows = rows.length;\r\n        const columnLineStyle = this._cacheStyle['columnLine'];\r\n        const columnDrawLine = (x, fromOffset, toOffset, style) => {\r\n            const sl = rows[fromOffset].layout;\r\n            const el = rows[toOffset].layout;\r\n            lineTo(context, x, sl.dy, x, el.dy + el.dh, style);\r\n        };\r\n\r\n        //컬럼 구분선\r\n        context.save();\r\n        dimensions.forEachColumnLayouts((layout, columnIndex) => {\r\n            const column = columns[columnIndex];\r\n            const style = column.getStyle('columnLine') || columnLineStyle;\r\n            const cells = dimensions.getCellsByColumn(columnIndex);\r\n            let start = 0;\r\n            let i = 0;\r\n            for (; i < numRows; i++) {\r\n                const row = rows[i];\r\n                const cellPosition = cells[i].cellPosition;\r\n                if (containsCellPosition(cellPosition, row.index, columnIndex + 1)) {\r\n                    if (start < i) {\r\n                        columnDrawLine(layout.dx + layout.dw, start, i - 1, style);\r\n                    }\r\n                    start = i + 1;\r\n                }\r\n            }\r\n            if (start < i) {\r\n                columnDrawLine(layout.dx + layout.dw, start, i - 1, style);\r\n            }\r\n        });\r\n\r\n        //마지막 컬럼 행\r\n        const lastColumnLayout = dimensions.getColumnLayout(this.normalizedColumns.length - 1);\r\n        const lastRight = lastColumnLayout && lastColumnLayout.x + lastColumnLayout.width || -1;\r\n        if (lastRight > 0 && lastRight < width) {\r\n            lineTo(context, lastRight, 0, lastRight, height, columnLineStyle);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        //고정 컬럼, 행 구분선.\r\n        const frozenLineStyle = this._cacheStyle['frozenLine'];\r\n        context.save();\r\n        if (frozenSizeRect.left > 0) {\r\n            lineTo(context, frozenSizeRect.left, 0, frozenSizeRect.left, height, frozenLineStyle);\r\n        }\r\n\r\n        if (frozenSizeRect.right > 0) {\r\n            lineTo(context, width - frozenSizeRect.right, 0, width - frozenSizeRect.right, height, frozenLineStyle);\r\n        }\r\n\r\n        if (frozenSizeRect.top > 0) {\r\n            lineTo(context, 0, frozenSizeRect.top, width, frozenSizeRect.top, frozenLineStyle);\r\n        }\r\n\r\n        if (frozenSizeRect.bottom > 0) {\r\n            lineTo(context, 0, height - frozenSizeRect.bottom, width, height - frozenSizeRect.bottom, frozenLineStyle);\r\n        }\r\n        context.restore();\r\n\r\n        paintLicenseMark(context, width, height);\r\n    }\r\n\r\n    _paintCaretIndicators(scrollX, scrollY, width, height) {\r\n        const context = this._separatorLayer.context;\r\n        const rowIndex = this.caretRowIndex;\r\n        const columnIndex = this.caretColumnIndex;\r\n        if (!this.isValidPosition(rowIndex, columnIndex)) {\r\n            return;\r\n        }\r\n        const layout = this._dimensions.getCellLayoutByCellPosition(this.findMergeCellPosition(rowIndex, columnIndex) || new CellPosition(rowIndex, columnIndex));\r\n        if (layout) {\r\n            const lineStyle = this._cacheStyle['caretLine'];\r\n            const color = lineStyle.color;\r\n            const lineWidth = lineStyle.width;\r\n\r\n            const xx = layout.dx + Math.floor(lineWidth / 2);\r\n            const yy = layout.dy + Math.floor(lineWidth / 2);\r\n            const ww = layout.dw - lineWidth + 1;\r\n            const hh = layout.dh - lineWidth + 1;\r\n            context.save();\r\n            context.beginPath();\r\n            context.strokeStyle = color;\r\n            context.lineWidth = lineWidth;\r\n            context.rect(xx, yy, ww, hh);\r\n            context.stroke();\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    _invalidateOverAndOut() {\r\n        const width = this.clientWidth;\r\n        const height = this.clientHeight;\r\n        const scrollX = this.scrollLeft;\r\n        const scrollY = this.scrollTop;\r\n\r\n        if (this.hasSelectionMode) {\r\n            const cells = this._dimensions.cells.concat(this._dimensions.mergeCells);\r\n            const isCellMode = this.isCellSelectionMode;\r\n            const isRowMode = this.isRowSelectionMode;\r\n\r\n            cells.forEach(cell => {\r\n                const position = cell.cellPosition;\r\n                if (cell.visible &&\r\n                    (cell.hovered || (isRowMode && position.rowIndex === this.overRowIndex) || (isCellMode && position.contains(this.overColumnIndex, this.overRowIndex)))) {\r\n                    this.invalidateCell(position.rowIndex, position.columnIndex);\r\n                }\r\n            });\r\n        }\r\n\r\n        this._selectionLayer.begin();\r\n        this._paintSelectionIndicators(scrollX, scrollY, width, height);\r\n        this._paintHighlightIndicators(scrollX, scrollY, width, height);\r\n        this._selectionLayer.end();\r\n    }\r\n\r\n    _itemToTemplate(item, column, cellPosition) {\r\n        let isNullRenderer = this.useNullItemRenderer && (!item || !(column.dataField in item) || item[column.dataField] == null);\r\n        let itemRenderer = column.itemRenderer || this.itemRenderer;\r\n        let template = null;\r\n\r\n        if (cellPosition && cellPosition.isMerged && this.mergeItemRenderer) {\r\n            template = this.mergeItemRenderer instanceof Function ? this.mergeItemRenderer(item, column, cellPosition) : this.mergeItemRenderer;\r\n        } else if (itemRenderer instanceof Function) {\r\n            template = itemRenderer(item, column, cellPosition);\r\n        } else if (isNullRenderer) {\r\n            template = this.nullItemRenderer;\r\n        } else if (itemRenderer) {\r\n            template = itemRenderer;\r\n        }\r\n\r\n        if (!template) {\r\n            template = defaultItemRenderer;\r\n        }\r\n        return template;\r\n    }\r\n\r\n    _calculateViewHeight(height) {\r\n        if (this.normalizedRowCount > 0) {\r\n            return this.getRowsHeight(0, this.normalizedRowCount - 1);\r\n        }\r\n        return height;\r\n    }\r\n\r\n    getVisibleRowIndices() {\r\n        return this._dimensions.rowIndices.slice(0);\r\n    }\r\n\r\n    getVisibleColumnIndices() {\r\n        return this._dimensions.columnIndices.slice(0);\r\n    }\r\n\r\n    getCellLayout(rowIndex, columnIndex) {\r\n        return this._dimensions.getCellLayout(rowIndex, columnIndex);\r\n    }\r\n\r\n    getCellLayoutByCellPosition(position) {\r\n        return this._dimensions.getCellLayoutByCellPosition(position);\r\n    }\r\n\r\n    getVisibleFrozenIndexRect() {\r\n        return this._dimensions.visibleFrozenIndexRect;\r\n    }\r\n\r\n    getVisibleFrozenSizeRect() {\r\n        return this._dimensions.visibleFrozenSizeRect;\r\n    }\r\n\r\n    /**\r\n     * 지정된 행 인덱스의 y 좌표를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getRowY(index) {\r\n        return this._dimensions.getRowY(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 y좌표에 해당하는 행 인덱스를 반환합니다. 범위 안에 없으면 -1을 반환합니다.\r\n     * @param y\r\n     * @returns {Number}\r\n     */\r\n    getRowIndexByDistance(y) {\r\n        return this._dimensions.getRowIndexByDistance(y);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스 행 높이를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getRowHeight(index) {\r\n        return this._dimensions.getRowHeight(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스의 행 높이를 설정합니다.\r\n     * @param index\r\n     * @param height\r\n     * @returns {boolean}\r\n     */\r\n    setRowHeight(index, height) {\r\n        if (this._dimensions.setRowHeight(index, height)) {\r\n            this.invalidateFor(Reason.ROW_HEIGHT_CHANGE);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * from 행부터 to 행까지의 높이의 합을 반환합니다.\r\n     * @param from 시작행\r\n     * @param to 종료행.\r\n     * @returns {Number}\r\n     */\r\n    getRowsHeight(from, to) {\r\n        return this._dimensions.getRowsHeight(from, to);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼인덱스의 x좌표를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getColumnX(index) {\r\n        if (index > 0) {\r\n            return this._dimensions.getColumnX(index);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스의 보여지는 컬럼 레이아웃 정보를 반환합니다.\r\n     * @param index\r\n     * @returns {*}\r\n     */\r\n    getColumnLayout(index) {\r\n        return this._dimensions.getColumnLayout(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 x좌표에 해당하는 컬럼 인덱스를 반환합니다. 범위 안에 없으면 -1을 반환합니다.\r\n     * @param x\r\n     * @returns {Number}\r\n     */\r\n    getColumnIndexByDistance(x) {\r\n        return Math.min(this._dimensions.getColumnIndexByDistance(x), this.normalizedColumns.length - 1);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스의 너비를 반환합니다.\r\n     * @param index 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnWidth(index) {\r\n        return this._dimensions.getColumnWidth(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스 너비를 설정합니다.\r\n     * @param index\r\n     * @param size\r\n     */\r\n    setColumnWidth(index, size) {\r\n        const column = this.getColumnAt(index);\r\n        if (column) {\r\n            if (!isNaN(size)) {\r\n                size = clampValue(size, column.minWidth);\r\n            }\r\n            const oldValue = this.getColumnWidth(index);\r\n            if (oldValue !== size || column.width !== size) {\r\n                column.setWidth(size);\r\n                if (!isNaN(size)) {\r\n                    this._dimensions.setColumnWidth(index, size);\r\n                }\r\n\r\n                this.invalidateFor(Reason.COLUMN_UPDATE);\r\n                this._dispatchDataGroupEvent('column-size-change', {\r\n                    column: column,\r\n                    newValue: size,\r\n                    oldValue: oldValue,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * from 컬럼부터 to 컬럼까지의 너비의 합을 반환합니다.\r\n     * @param from 시작 컬럼 인덱스\r\n     * @param to 종료 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnsWidth(from, to) {\r\n        return this._dimensions.getColumnsWidth(from, to);\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠 너비를 반환합니다.\r\n     * @returns {Number}\r\n     */\r\n    getContentWidth() {\r\n        return this._dimensions.getColumnsTotal();\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠 높이를 반환합니다.\r\n     * @returns {Number}\r\n     */\r\n    getContentHeight() {\r\n        return this._dimensions.getRowsTotal();\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼을 보이거나 숨기게 합니다.\r\n     * @param column\r\n     * @param {Boolean} visible\r\n     */\r\n    setColumnVisible(column, visible) {\r\n        if (column.visible !== visible) {\r\n            column.setVisible(visible);\r\n            this.columnCollection.getLeafColumns(column).forEach(c => {\r\n                const index = this.normalizedColumns.indexOf(c);\r\n                if (index >= 0) {\r\n                    this._dimensions.setColumnWidth(index, visible ? c.width : 0);\r\n                }\r\n            });\r\n\r\n            this.columnCollection.clearCache();\r\n            this._dispatchDataGroupEvent('column-visible', column);\r\n            this.invalidateFor(Reason.COLUMN_UPDATE);\r\n            this.validateNow();\r\n        }\r\n    }\r\n\r\n    getHorizontalSectionIndex(columnIndex) {\r\n        if (columnIndex < this.frozenLeft) {\r\n            return Section.LEFT;\r\n        } else if (this.normalizedColumns.length - columnIndex <= this.frozenRight) {\r\n            return Section.RIGHT;\r\n        }\r\n        return Section.CENTER;\r\n    }\r\n\r\n    getVerticalSectionIndex(rowIndex) {\r\n        if (rowIndex < this.frozenTop) {\r\n            return Section.TOP;\r\n        } else if (this.numRows - rowIndex <= this.frozenBottom) {\r\n            return Section.BOTTOM;\r\n        }\r\n        return Section.MIDDLE;\r\n    }\r\n\r\n    getCell(rowIndex, columnIndex) {\r\n        const dimensions = this._dimensions;\r\n        const found = this.findMergeCellPosition(rowIndex, columnIndex);\r\n        if (found) {\r\n            return dimensions.getMergeCell(found);\r\n        }\r\n        return dimensions.getCell(rowIndex, columnIndex);\r\n    }\r\n\r\n    getItemRenderer(rowIndex, columnIndex) {\r\n        const cell = this.getCell(rowIndex, columnIndex);\r\n        return cell && cell.renderer || null;\r\n    }\r\n\r\n    /**\r\n     * 지정된 행 인덱스가 화면에 표시되는 경우 해당 렌더러를 갱신합니다.\r\n     * @param index\r\n     */\r\n    invalidateRow(index) {\r\n        this._dimensions.getCellsByRow(index).forEach(cell => {\r\n            this.invalidateCell(cell.cellPosition.rowIndex, cell.cellPosition.columnIndex);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스가 화면에 표시되는 경우 해당 렌더러를 갱신합니다.\r\n     * @param index 컬럼 인덱스\r\n     */\r\n    invalidateColumn(index) {\r\n        this._dimensions.getCellsByColumn(index).forEach(cell => {\r\n            this.invalidateCell(cell.cellPosition.rowIndex, cell.cellPosition.columnIndex);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 지정된 위치가 화면에 표시되는 경우 해당 렌더러를 갱신합니다.\r\n     * @param rowIndex 행 인덱스\r\n     * @param columnIndex 컬럼 인덱스\r\n     */\r\n    invalidateCell(rowIndex, columnIndex) {\r\n        const dimensions = this._dimensions;\r\n        const cellPosition = this.findMergeCellPosition(rowIndex, columnIndex);\r\n        const cell = cellPosition ? dimensions.getMergeCell(cellPosition) : dimensions.getCell(rowIndex, columnIndex);\r\n        const layout = cellPosition ? dimensions.getCellLayoutByCellPosition(cellPosition) : dimensions.getCellLayout(rowIndex, columnIndex);\r\n        if (cell && layout) {\r\n            if (cell.visible) {\r\n                callHook(cell.renderer, 'prepare', this.grid, cell);\r\n            }\r\n            this._paintCell(this._rendererLayer.context, cell, layout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 지정된 위치가 화면에 표시되는 경우 true 반환합니다.\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @returns {Boolean}\r\n     */\r\n    isVisiblePosition(rowIndex, columnIndex) {\r\n        return this._dimensions.isVisiblePosition(rowIndex, columnIndex);\r\n    }\r\n\r\n    /**\r\n     * 지정된 셀이 화면에 표시되는 경우 true 반환합니다.\r\n     * @param cellPosition\r\n     * @returns {Boolean}\r\n     */\r\n    isVisibleCell(cellPosition) {\r\n        return !!(cellPosition && this._dimensions.isVisibleCell(cellPosition));\r\n    }\r\n\r\n    isValidPosition(rowIndex, columnIndex) {\r\n        const numRows = this.numRows;\r\n        const numColumns = this.normalizedColumns.length;\r\n        return !(rowIndex < 0 || rowIndex >= numRows || columnIndex < 0 || columnIndex >= numColumns);\r\n    }\r\n\r\n    /**\r\n     * 지정된 행 인덱스의 아이템을 반환합니다.\r\n     * @param index 행 인덱스\r\n     * @returns {Object}\r\n     */\r\n    getItemAt(index) {\r\n        return this.collection && this.collection.get(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스의 컬럼을 반환합니다.\r\n     * @param index\r\n     * @returns {GridColumn}\r\n     */\r\n    getColumnAt(index) {\r\n        if (index >= 0 && index < this.normalizedColumns.length) {\r\n            return this.normalizedColumns[index];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    doLayout(needUpdate) {\r\n        this.invalidateFor(needUpdate ? Reason.ALL : 0);\r\n        this.validateNow();\r\n    }\r\n\r\n    updateScrollRect() {\r\n        const dimensions = this._dimensions;\r\n        const scrollLeft = this.scrollLeft;\r\n        const scrollTop = this.scrollTop;\r\n        const hChanged = scrollLeft !== this._oldScrollLeft;\r\n        const vChanged = scrollTop !== this._oldScrollTop;\r\n        const frozenIndex = dimensions.visibleFrozenIndexRect;\r\n        const frozenSize = dimensions.visibleFrozenSizeRect;\r\n        const columnIndices = dimensions.columnIndices;\r\n\r\n        let reason = 0;\r\n        if (hChanged) {\r\n            const leftIndex = this.getColumnIndexByDistance(scrollLeft + frozenSize.left);\r\n            const rightIndex = this.getColumnIndexByDistance(scrollLeft + this.clientWidth - frozenSize.right);\r\n            const numColumns = columnIndices.length;\r\n            const oldLeftIndex = numColumns > frozenIndex.left ? columnIndices[frozenIndex.left] : 0;\r\n            const oldRightIndex = numColumns > frozenIndex.right ? columnIndices[numColumns - frozenIndex.right - 1] : 0;\r\n\r\n            this._oldScrollLeft = scrollLeft;\r\n\r\n            reason |= Reason.HORIZONTAL_SCROLL_CHANGE;\r\n            if (leftIndex !== oldLeftIndex || rightIndex !== oldRightIndex) {\r\n                reason |= Reason.VISIBLE_COLUMNS_CHANGE;\r\n            }\r\n        }\r\n\r\n        if (vChanged) {\r\n            this._oldScrollTop = scrollTop;\r\n            reason |= Reason.VERTICAL_SCROLL_CHANGE;\r\n        }\r\n        this.invalidateFor(reason);\r\n    }\r\n\r\n    /**\r\n     * 병합영역 전체 체크\r\n     */\r\n    analysisMergeAll() {\r\n        this.merger.analysisAll();\r\n    }\r\n\r\n    getVerticalScrollPositionDelta(delta) {\r\n        let value = Math.max(this.rowHeight, 30);\r\n        return delta > 0 ? value : -value;\r\n    }\r\n\r\n    _mouseEventToContent(event) {\r\n        const point = this._mouseEventToLocal(event);\r\n        const width = this.clientWidth;\r\n        const height = this.clientHeight;\r\n        const frozenRect = this._dimensions.visibleFrozenSizeRect;\r\n\r\n        if (frozenRect.top > 0 && point.y <= frozenRect.top) ; else if (frozenRect.bottom > 0 && height - point.y <= frozenRect.bottom) {\r\n            point.y = this.contentHeight - (height - point.y);\r\n        } else {\r\n            if (this.contentHeight < height && this.contentHeight - frozenRect.bottom <= point.y) {\r\n                point.y = this.contentHeight;\r\n            } else {\r\n                point.y = point.y + this.scrollTop;\r\n            }\r\n        }\r\n\r\n        if (frozenRect.left > 0 && point.x <= frozenRect.left) ; else if (frozenRect.right > 0 && width - point.x <= frozenRect.right) {\r\n            point.x = this.contentWidth - (width - point.x);\r\n        } else {\r\n            point.x = point.x + this.scrollLeft;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 해당 위치로 스크롤을\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @param allowSelection\r\n     */\r\n    scrollToCell(rowIndex, columnIndex, allowSelection) {\r\n        if (this.isValidPosition(rowIndex, columnIndex)) {\r\n            let isHorizontal = columnIndex !== -1,\r\n                isVertical = rowIndex !== -1;\r\n            do {\r\n                if (!this._internalScrollToCell(rowIndex, columnIndex, isVertical, isHorizontal)) {\r\n                    break;\r\n                }\r\n            }\r\n            while (!this.isVisiblePosition(rowIndex, columnIndex));\r\n\r\n            this._internalScrollToCell(rowIndex, columnIndex, isVertical, isHorizontal);\r\n\r\n            if (allowSelection) {\r\n                this.updateSelection(rowIndex, columnIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * 지정된 영역을 선택합니다.\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @param shiftKey\r\n     * @param ctrlKey\r\n     */\r\n    updateSelection(rowIndex, columnIndex, shiftKey, ctrlKey) {\r\n        let result = false;\r\n        if (this.hasSelectionMode) {\r\n            let startRowIndex = rowIndex,\r\n                startColumnIndex = columnIndex,\r\n                endRowIndex = rowIndex,\r\n                endColumnIndex = columnIndex,\r\n                kind;\r\n\r\n            //행선택이면 컬럼 인덱스를 0으로 초기화.\r\n            if (this.isRowSelectionMode) {\r\n                startColumnIndex = 0;\r\n                endColumnIndex = 0;\r\n            }\r\n\r\n            if (shiftKey && this.isMultipleSelectionMode) {\r\n                kind = 'set';\r\n                endRowIndex = this._anchorRowIndex;\r\n                endColumnIndex = this._anchorColumnIndex;\r\n            } else if (ctrlKey) {\r\n                if (!this.containsSelectedCell(new CellPosition(startRowIndex, startColumnIndex))) {\r\n                    if (!this.isMultipleSelectionMode) {\r\n                        kind = 'set';\r\n                    } else {\r\n                        kind = 'add';\r\n                    }\r\n                } else {\r\n                    kind = 'remove';\r\n                }\r\n            } else {\r\n                kind = 'set';\r\n            }\r\n\r\n            const cellPosition = this.unionCellPosition(startRowIndex, startColumnIndex, endRowIndex, endColumnIndex, this.isMultipleSelectionMode);\r\n\r\n            if (kind === 'set') {\r\n                result = this.setSelectedCell(cellPosition);\r\n            } else if (kind === 'add') {\r\n                result = this.addSelectedCell(cellPosition);\r\n            } else if (kind === 'remove') {\r\n                result = this.removeSelectedCell(cellPosition);\r\n            }\r\n\r\n            if (!(shiftKey && this.isMultipleSelectionMode)) {\r\n                this._anchorRowIndex = startRowIndex;\r\n                this._anchorColumnIndex = startColumnIndex;\r\n            }\r\n        }\r\n\r\n        this._setCaretIndex(rowIndex, columnIndex);\r\n\r\n        return result;\r\n    }\r\n\r\n    getCellStyle(rowIndex, columnIndex, ...props) {\r\n        const column = this.getColumnAt(columnIndex);\r\n        let result = null;\r\n        if (column) {\r\n            result = column.getStyle.apply(column, props);\r\n        } else {\r\n            result = this.getStyle.apply(this, props);\r\n        }\r\n\r\n        if (!result) ; else if (result instanceof Function) {\r\n            result = result(rowIndex, columnIndex);\r\n        } else if (typeof result === 'object') {\r\n            for (let p in result) {\r\n                result[p] = callValue(result[p], rowIndex, columnIndex);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    destroy() {\r\n        this.clearCache();\r\n    }\r\n\r\n    _internalScrollToCell(rowIndex, columnIndex, isVertical, isHorizontal) {\r\n        const delta = this._calculateScrollPositionDelta(rowIndex, columnIndex);\r\n        let scrollChanged = false;\r\n        if (delta) {\r\n            if (isVertical && delta.y !== 0) {\r\n                const oldValue = this.scrollTop;\r\n                this.scrollTop += delta.y;\r\n                if (this.scrollTop !== oldValue) {\r\n                    scrollChanged = true;\r\n                }\r\n            }\r\n\r\n            if (isHorizontal && delta.x !== 0) {\r\n                const oldValue = this.scrollLeft;\r\n                this.scrollLeft += delta.x;\r\n                if (this.scrollLeft !== oldValue) {\r\n                    scrollChanged = true;\r\n                }\r\n            }\r\n        }\r\n        return scrollChanged;\r\n    }\r\n\r\n    _calculateScrollPositionDelta(rowIndex, columnIndex) {\r\n\r\n        const left = this.getColumnX(columnIndex);\r\n        const top = this.getRowY(rowIndex);\r\n        const right = left + this.getColumnWidth(columnIndex);\r\n        const bottom = top + this.getRowHeight(rowIndex);\r\n\r\n        let scrollRect = this.getScrollRect(),\r\n            frozenSizeRect = this._dimensions.visibleFrozenSizeRect,\r\n            scrollLeft = frozenSizeRect.left + scrollRect.left,\r\n            scrollRight = scrollLeft + this.clientWidth - (frozenSizeRect.left + frozenSizeRect.right),\r\n            scrollTop = frozenSizeRect.top + scrollRect.top,\r\n            scrollBottom = scrollTop + this.clientHeight - (frozenSizeRect.top + frozenSizeRect.bottom),\r\n            dxl = (left - frozenSizeRect.left) - scrollRect.left,\r\n            dxr = right - (scrollRect.right - frozenSizeRect.right),\r\n            dyt = (top - frozenSizeRect.top) - scrollRect.top,\r\n            dyb = bottom - (scrollRect.bottom - frozenSizeRect.bottom),\r\n            dx = (Math.abs(dxl) < Math.abs(dxr)) ? dxl : dxr,\r\n            dy = (Math.abs(dyt) < Math.abs(dyb)) ? dyt : dyb;\r\n\r\n        if (right <= frozenSizeRect.left || left >= this.getContentWidth() - frozenSizeRect.right || scrollLeft <= left && right <= scrollRight) {\r\n            dx = 0;\r\n        }\r\n\r\n        if (bottom <= frozenSizeRect.top || top >= this.getContentHeight() - frozenSizeRect.bottom || scrollTop <= top && bottom <= scrollBottom) {\r\n            dy = 0;\r\n        }\r\n        return new Point(dx, dy);\r\n    }\r\n\r\n    /**\r\n     * 아이템 추가, 뷰포인트 관련 추가된 만큼 데이타 갱신\r\n     * @param rowIndex\r\n     * @param items\r\n     * @private\r\n     */\r\n    _itemsAdded(rowIndex, items) {\r\n        const dimensions = this._dimensions;\r\n        items.forEach((item, i) => {\r\n            const ri = rowIndex + i;\r\n            dimensions.insertRow(ri, dimensions.createRow(ri), this.rowHeight);\r\n        });\r\n\r\n        if (this.autoMerge) {\r\n            this.clearCellMerger();\r\n        }\r\n\r\n        this.invalidateFor(Reason.ITEM_UPDATE);\r\n    }\r\n\r\n    /**\r\n     * 아이템 삭제, 뷰포인트 관련 삭제된 만큼 데이타 갱신\r\n     * @param rowIndex\r\n     * @param items\r\n     * @private\r\n     */\r\n    _itemsRemoved(rowIndex, items) {\r\n        const dimensions = this._dimensions;\r\n        items.forEach((item, i) => {\r\n            const index = rowIndex + i;\r\n            const row = dimensions.removeRow(index);\r\n            if (row) {\r\n                this._freeCells(row.cells);\r\n            }\r\n        });\r\n\r\n        const removeCellPosition = new CellPosition(rowIndex, 0, rowIndex + items.length - 1, this.normalizedColumns.length - 1);\r\n        dimensions.mergeCells.slice(0).forEach(cell => {\r\n            const position = cell.cellPosition;\r\n            if (removeCellPosition.intersects(position)) {\r\n                dimensions.removeMergeCellPosition(position);\r\n                this._freeCells([cell]);\r\n            }\r\n        });\r\n\r\n        if (this.autoMerge) {\r\n            this.clearCellMerger();\r\n        }\r\n\r\n        this.invalidateFor(Reason.ITEM_UPDATE);\r\n    }\r\n\r\n    _columnsAdded(index, columns) {\r\n        const dimensions = this._dimensions;\r\n        columns.forEach((column, i) => {\r\n            dimensions.insertColumn(index + i);\r\n        });\r\n        this.invalidateFor(Reason.COLUMNS_CHANGE);\r\n\r\n        /*\r\n        if (this.autoRowHeight) {\r\n            rowVector.insertColumns(index, columns.length);\r\n        }\r\n        */\r\n    }\r\n\r\n    /**\r\n     * 컬럼삭제 셀 캐쉬 이동\r\n     * @param index\r\n     * @param columns 순차적인 컬럼 목록\r\n     * @private\r\n     */\r\n    _columnsRemoved(index, columns) {\r\n        const dimensions = this._dimensions;\r\n        const removed = [];\r\n        columns.forEach((column, i) => {\r\n            Array.prototype.push.apply(removed, dimensions.removeColumn(index));\r\n        });\r\n        this._freeCells(removed);\r\n        this.invalidateFor(Reason.COLUMNS_CHANGE);\r\n    }\r\n\r\n    _dispatchDataGroupEvent(type, value) {\r\n        return this.dispatchEvent(new CustomEvent(type, {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: value,\r\n        }));\r\n    }\r\n\r\n    _dispatchChangeEvent(type, newValue, oldValue) {\r\n        return this.dispatchEvent(new CustomEvent(type, {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: {\r\n                newValue: newValue,\r\n                oldValue: oldValue,\r\n            },\r\n        }));\r\n    }\r\n\r\n    _dispatchItemEvent(type, rowIndex, columnIndex, trigger, cancelable = false, bubbles = false) {\r\n        return this.dispatchEvent(new CustomEvent(type, {\r\n            cancelable: cancelable,\r\n            bubbles: bubbles,\r\n            detail: {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex,\r\n                item: this.getItemAt(rowIndex),\r\n                column: this.getColumnAt(columnIndex),\r\n                trigger: trigger,\r\n            },\r\n        }));\r\n    }\r\n\r\n    _dispatchCaretChangeEvent(caretRowIndex, caretColumnIndex) {\r\n        return this.dispatchEvent(new CustomEvent('caret-change', {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: {\r\n                caretRowIndex: caretRowIndex,\r\n                caretColumnIndex: caretColumnIndex,\r\n            },\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * mousedown event handler\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onMouseDown(event) {\r\n        if (event.defaultPrevented) {\r\n            return;\r\n        }\r\n\r\n        const point = this._mouseEventToContent(event);\r\n        const rowIndex = this.getRowIndexByDistance(point.y);\r\n        const columnIndex = this.getColumnIndexByDistance(point.x);\r\n\r\n        if (this.isValidPosition(rowIndex, columnIndex) && this._dispatchItemEvent('item-down', rowIndex, columnIndex, event, true)) {\r\n            this._mouseDownColumnIndex = columnIndex;\r\n            this._mouseDownRowIndex = rowIndex;\r\n\r\n            document.addEventListener('mousemove', this._boundDocumentMouseMove);\r\n            document.addEventListener('mouseup', this._boundDocumentMouseUp);\r\n\r\n            this.updateSelection(rowIndex, columnIndex, event.shiftKey, event.ctrlKey);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * mousemove event handler\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onMouseMove(event) {\r\n        const point = this._mouseEventToContent(event);\r\n        const rowIndex = this.getRowIndexByDistance(point.y);\r\n        const columnIndex = this.getColumnIndexByDistance(point.x);\r\n        if (rowIndex !== this.overRowIndex || columnIndex !== this.overColumnIndex) {\r\n            let cell = this.findMergeCellPosition(rowIndex, columnIndex);\r\n            if (!cell) {\r\n                dummyCellPosition.rowIndex = rowIndex;\r\n                dummyCellPosition.columnIndex = columnIndex;\r\n                cell = dummyCellPosition;\r\n            }\r\n\r\n            if (!cell.equals(this.overCell)) {\r\n                if ((this.overRowIndex >= 0 || this.overColumnIndex >= 0)) {\r\n                    this._dispatchItemEvent('item-out', this.overRowIndex, this.overColumnIndex, event);\r\n                }\r\n\r\n                if (rowIndex >= 0 && columnIndex >= 0) {\r\n                    this._dispatchItemEvent('item-over', rowIndex, columnIndex, event);\r\n                }\r\n\r\n                this.overRowIndex = rowIndex;\r\n                this.overColumnIndex = columnIndex;\r\n                this.overCell = dummyCellPosition !== cell ? cell : null;\r\n\r\n                if (!this._boundInvalidateOverAndOut) {\r\n                    this._boundInvalidateOverAndOut = this._invalidateOverAndOut.bind(this);\r\n                }\r\n                nextFrameOnce(this._boundInvalidateOverAndOut);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * mouseenter event handler\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onMouseEnter(event) {\r\n        this._hasMouse = true;\r\n    }\r\n\r\n    /**\r\n     * mouseleave event handler\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onMouseLeave(event) {\r\n        this._hasMouse = false;\r\n        if (this.overRowIndex >= 0 || this.overColumnIndex >= 0) {\r\n            this._dispatchItemEvent('item-out', this.overRowIndex, this.overColumnIndex, event);\r\n            this.overRowIndex = -1;\r\n            this.overColumnIndex = -1;\r\n            this.overCell = null;\r\n            this.invalidateFor(Reason.DISPLAY_UPDATE);\r\n        }\r\n    }\r\n\r\n    _onDocumentMouseMove(event) {\r\n        try {\r\n            let point = this._mouseEventToContent(event);\r\n            if (point && this._mouseDownRowIndex >= 0 && this._mouseDownColumnIndex >= 0) {\r\n                let columnIndex = this.getColumnIndexByDistance(point.x);\r\n                let rowIndex = this.getRowIndexByDistance(point.y);\r\n                this._dispatchItemEvent('item-drag', rowIndex, columnIndex, event);\r\n            }\r\n        } catch (error) {\r\n            this._onDocumentMouseUp(event);\r\n        }\r\n    }\r\n\r\n    _onDocumentMouseUp(event) {\r\n        document.removeEventListener('mousemove', this._boundDocumentMouseMove);\r\n        document.removeEventListener('mouseup', this._boundDocumentMouseUp);\r\n\r\n        const point = this._mouseEventToContent(event);\r\n        const rowIndex = this.getRowIndexByDistance(point.y);\r\n        const columnIndex = this.getColumnIndexByDistance(point.x);\r\n\r\n        this._dispatchItemEvent('item-up', rowIndex, columnIndex, event);\r\n\r\n        //click, double click\r\n        if (this.isValidPosition(rowIndex, columnIndex) && rowIndex === this._mouseDownRowIndex && columnIndex === this._mouseDownColumnIndex) {\r\n            const newClickTime = Date.now();\r\n            if (this._lastClickTime >= 0 && newClickTime - this._lastClickTime < DOUBLE_CLICK_DELAY &&\r\n                this._lastMouseClickRowIndex === rowIndex && this._lastMouseClickColumnIndex === columnIndex) {\r\n\r\n                if (this._dispatchItemEvent('item-double-click', rowIndex, columnIndex, event)) ;\r\n                this._lastClickTime = -1;\r\n            } else {\r\n                if (this._dispatchItemEvent('item-click', rowIndex, columnIndex, event)) ;\r\n                this._lastClickTime = Date.now();\r\n            }\r\n            this._lastMouseClickRowIndex = rowIndex;\r\n            this._lastMouseClickColumnIndex = columnIndex;\r\n        }\r\n        this._mouseDownRowIndex = -1;\r\n        this._mouseDownColumnIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * ColumnCollection\r\n     * collection-change event handler\r\n     * @param event\r\n     */\r\n    _onColumnCollectionChange(event) {\r\n        const {type, detail, detail: {kind, nodes}} = event;\r\n        if (type === 'collection-change') {\r\n            if (kind === 'reset') {\r\n                this._resetColumns();\r\n                this.clearCache();\r\n                this.invalidateFor(Reason.COLUMNS_CHANGE);\r\n            }\r\n        } else if (type === 'node-change' && (kind === 'move' || kind === 'add' || kind === 'remove')) {\r\n            const collection = this.columnCollection;\r\n            const oldColumns = this.normalizedColumns.slice(0);\r\n            this._resetColumns();\r\n            const columns = this.normalizedColumns.slice(0);\r\n            //remove, move\r\n            if (kind !== 'add') {\r\n                nodes.forEach(node => {\r\n                    const leaves = collection.getLeafColumns(node);\r\n                    const index = oldColumns.indexOf(leaves[0]);\r\n                    this._columnsRemoved(index, leaves);\r\n                });\r\n            }\r\n\r\n            //add, move\r\n            if (kind !== 'remove') {\r\n                nodes.forEach(node => {\r\n                    const leaves = collection.getLeafColumns(node);\r\n                    const index = columns.indexOf(leaves[0]);\r\n                    this._columnsAdded(index, leaves);\r\n                });\r\n            }\r\n\r\n            if (this.autoMerge) {\r\n                this.clearCellMerger();\r\n            }\r\n        }\r\n\r\n        if (!this.dispatchEvent(new CustomEvent('column-' + type, {\r\n            bubbles: false,\r\n            cancelable: event.cancelable,\r\n            detail: detail,\r\n        })) && event.cancelable) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * collection collection-change event handler\r\n     */\r\n    _onCollectionChange(event, isDispatch = true) {\r\n        const detail = event.detail;\r\n        const kind = detail.kind;\r\n        switch (kind) {\r\n            case 'add':\r\n                this._itemsAdded(detail.index, detail.items);\r\n                break;\r\n            case 'remove':\r\n                this._itemsRemoved(detail.index, detail.items);\r\n                break;\r\n            case 'set':\r\n            case 'update':\r\n                this.invalidateFor(Reason.ITEM_UPDATE);\r\n                break;\r\n            case 'reset':\r\n                this.clearCache();\r\n                this.invalidateFor(Reason.ITEMS_CHANGE);\r\n                break;\r\n            case 'refresh':\r\n                this._clearCacheForIndicator();\r\n                this.invalidateFor(Reason.ITEMS_CHANGE);\r\n                break;\r\n        }\r\n\r\n        this._dimensions.setRowSize(this.numRows);\r\n\r\n        this.collectionChangedForCellMerger(event);\r\n        this.collectionChangedForSelection(event);\r\n\r\n        if (isDispatch !== false) {\r\n            this.dispatchEvent(new CustomEvent(event.type, {\r\n                bubbles: event.bubbles,\r\n                cancelable: event.cancelable,\r\n                detail: event.detail,\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nDataGroup.withDom('<div class=\"tachyon-group-body\"></div>').withBehavior(Mergeable, Selectable);\n\nconst TYPE_MAP = {\r\n\t'item-mouse-down': 'down',\r\n\t'item-click': 'click',\r\n\t'item-double-click': 'doubleClick'\r\n};\r\n\r\n//let KEY_F2 = 113;\r\nconst POSSIBLE_KEY_CODES = [9, 13, 27, 37, 38, 39, 40];\r\n\r\nclass DataGridEditor {\r\n\tconstructor(grid) {\r\n\t\tthis._grid = grid;\r\n\t\tthis._editedCell = null;\r\n\t\tthis._lastEditCellPosition = null;\r\n\t\tthis._boundOnDocumentKeyDown = this._onDocumentKeyDown.bind(this);\r\n\t\tthis._boundOnDocumentMouseEvent = this._onDocumentMouseEvent.bind(this);\r\n\r\n\t\tconst boundGridItemEvent = this._onGridItemEvent.bind(this);\r\n\t\tgrid.addEventListener('item-mouse-down', boundGridItemEvent);\r\n\t\tgrid.addEventListener('item-click', boundGridItemEvent);\r\n\t\tgrid.addEventListener('item-double-click', boundGridItemEvent);\r\n\t\tgrid.addEventListener('keydown', this._onGridKeyDown.bind(this));\r\n\t\tgrid.addEventListener('scroll', this._onGridScroll.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @returns {*}\r\n\t */\r\n\tget _dataGroup() {\r\n\t\treturn this._grid.dataGroup;\r\n\t}\r\n\r\n\t/**\r\n\t * 편집중인 렌더러 객체입니다.\r\n\t * @returns {*|HTMLElement}\r\n\t */\r\n\tget editedCell() {\r\n\t\treturn this._editedCell;\r\n\t}\r\n\r\n\t/**\r\n\t * 그리드 편집 중인지을 나타냅니다.\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEditing() {\r\n\t\treturn !!this._editedCell;\r\n\t}\r\n\r\n\t/**\r\n\t * 편집 가능한 셀인지 확인합니다.\r\n\t * @param rowIndex\r\n\t * @param columnIndex\r\n\t * @returns {boolean}\r\n\t */\r\n\tisCellEditable(rowIndex, columnIndex) {\r\n\t\tif (!this._grid.editable || !this._dataGroup.isValidPosition(rowIndex, columnIndex)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst column = this._dataGroup.getColumnAt(columnIndex);\r\n\t\treturn column && column.visible && column.editable;\r\n\t}\r\n\r\n\t/**\r\n\t * 지정된 셀에 편집을 시작합니다. 편집을 시작하면 'true'를 반환합니다.\r\n\t * 'item-edit-starting' 이벤트에서 'preventDefault()'호출시 편집을 취소합니다.\r\n\t * @param rowIndex\r\n\t * @param columnIndex\r\n\t * @param trigger\r\n\t * @returns {boolean}\r\n\t */\r\n\tstartEdit(rowIndex, columnIndex, trigger) {\r\n\t\t//에디트 중일때\r\n\t\tif (this.isEditing() && this._lastEditCellPosition.contains(columnIndex, rowIndex) || !this.isCellEditable(rowIndex, columnIndex)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//이미 에디터이 있는 상태이고\r\n\t\tif (this.isEditing() && !this.endEdit(trigger)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this._dispatchEditorEvent('item-edit-starting', true, rowIndex, columnIndex)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst cellPosition = this._findMergeCellPosition(rowIndex, columnIndex);\r\n\t\tthis._lastEditCellPosition = cellPosition;\r\n\r\n\t\t//스크롤 이동.\r\n\t\tthis._grid.scrollToCell(cellPosition.rowIndex, cellPosition.columnIndex, true);\r\n\t\tthis._grid.validateNow();\r\n\r\n\t\t//아이템 에디터 생성.\r\n\t\tthis._createEditor(cellPosition, trigger);\r\n\t\tthis._dispatchEditorEvent('item-edit-start', false, cellPosition.rowIndex, cellPosition.columnIndex);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 편집중이면 편집을 종료합니다.\r\n\t * 편집중인 내용이 저장됩니다.\r\n\t * @param trigger\r\n\t * @return {boolean}\r\n\t */\r\n\tendEdit(trigger = null) {\r\n\t\tif (this.isEditing()) {\r\n\t\t\tconst grid = this._grid;\r\n\t\t\tconst cell = this._editedCell;\r\n\t\t\tconst editor = cell.editor;\r\n\t\t\tconst cellPosition = this._lastEditCellPosition;\r\n\r\n\t\t\tif (editor.getSaveValue instanceof Function) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlet rowIndex = cellPosition.rowIndex,\r\n\t\t\t\t\t\tcolumnIndex = cellPosition.columnIndex,\r\n\t\t\t\t\t\titem = cell.item,\r\n\t\t\t\t\t\tcolumn = cell.column,\r\n\t\t\t\t\t\toldValue = getValue(item, column.dataFieldPath),\r\n\t\t\t\t\t\tnewValue = editor.getSaveValue();\r\n\r\n\t\t\t\t\tif (this._dispatchEditorEvent('item-edit-ending', true, rowIndex, columnIndex, oldValue, newValue, trigger)) {\r\n\t\t\t\t\t\tgrid.collection.setValue(rowIndex, column.dataField, newValue);\r\n\t\t\t\t\t\tthis._dispatchEditorEvent('item-edit-end', false, rowIndex, columnIndex, oldValue, newValue);\r\n\t\t\t\t\t\tthis._destroyEditor();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tthis.cancelEdit();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.cancelEdit();\r\n\t\t\t}\r\n\t\t\tgrid.invalidate();\r\n\t\t\tgrid.flush();\r\n\t\t\tgrid.focus();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * 편집을 취소합니다. 편집중인 내용은 저장되지 않습니다.\r\n\t * @returns {boolean}\r\n\t */\r\n\tcancelEdit() {\r\n\t\tif (this.isEditing()) {\r\n\t\t\tthis._dispatchEditorEvent('item-edit-cancel', false, this._lastEditCellPosition.rowIndex, this._lastEditCellPosition.columnIndex);\r\n\t\t\tthis._destroyEditor();\r\n\t\t\tthis._grid.focus();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t_itemToFactory(item, column, cellPosition) {\r\n\t\tlet template = column.itemEditor || this._grid.itemEditor;\r\n\t\tif (template instanceof Function) {\r\n\t\t\ttemplate = template(item, column, cellPosition);\r\n\t\t}\r\n\t\treturn Renderer.factory(template || defaultItemEditor);\r\n\t}\r\n\r\n\t_dataCellToEditCell(cell, inputtedKey, trigger) {\r\n\t\treturn Object.assign(new EditCell(), cell, {inputtedKey, trigger});\r\n\t}\r\n\r\n\t/**\r\n\t * 에디터를 생성합니다.\r\n\t * @param cellPosition\r\n\t * @param trigger\r\n\t * @private\r\n\t */\r\n\t_createEditor(cellPosition, trigger) {\r\n\t\tconst grid = this._grid;\r\n\t\tconst dataGroup = this._dataGroup;\r\n\t\tconst cell = dataGroup.getCell(cellPosition.rowIndex, cellPosition.columnIndex);\r\n\t\tconst item = cell.item;\r\n\t\tconst column = cell.column;\r\n\t\tconst inputtedKey = this._getPrintableKey(trigger);\r\n\t\tconst editCell = this._dataCellToEditCell(cell, inputtedKey, trigger);\r\n\r\n\t\t//에디트  타겟 렌더러.\r\n\t\tconst factory = this._itemToFactory(item, column, cellPosition);\r\n\t\tconst itemEditor = new factory(grid);\r\n\t\tcallHook(itemEditor, 'created', grid, editCell);\r\n\t\tconst element = itemEditor.htmlElement;\r\n\t\tif (element) {\r\n\t\t\taddClass(element, 'tachyon-editor');\r\n\t\t\tif (element.parentElement !== grid.htmlElement) {\r\n\t\t\t\tgrid.appendChild(element);\r\n\t\t\t}\r\n\t\t\tconst layout = dataGroup.getCellLayoutByCellPosition(cellPosition);\r\n\t\t\tsetLayout(element, layout.dx, layout.dy + grid.getHeaderHeight(), layout.dw, layout.dh);\r\n\t\t}\r\n\r\n\t\teditCell.editor = itemEditor;\r\n\t\tcallHook(itemEditor, 'prepare', grid, editCell);\r\n\t\tif (itemEditor.focus instanceof Function) {\r\n\t\t\titemEditor.focus();\r\n\t\t}\r\n\r\n\t\tthis._editedCell = editCell;\r\n\t\tdocument.addEventListener('keydown', this._boundOnDocumentKeyDown, true);\r\n\t\tdocument.addEventListener('mousedown', this._boundOnDocumentMouseEvent);\r\n\t\t//document.addEventListener('wheel', this._boundOnDocumentMouseEvent, true);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_destroyEditor() {\r\n\t\tconst editor = this._editedCell.editor;\r\n\t\tdocument.removeEventListener('keydown', this._boundOnDocumentKeyDown, true);\r\n\t\tdocument.removeEventListener('mousedown', this._boundOnDocumentMouseEvent);\r\n\t\t//document.removeEventListener('wheel', this._boundOnDocumentMouseEvent, true);\r\n\r\n\t\tif (editor) {\r\n\t\t\tcallHook(editor, 'dispose');\r\n\t\t\tif (this._grid.hookFreeElement instanceof Function) {\r\n\t\t\t\tthis._grid.hookFreeElement(editor);\r\n\t\t\t}\r\n\t\t\tif (editor.htmlElement) {\r\n\t\t\t\tthis._grid.removeChild(editor.htmlElement);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._lastEditCellPosition = null;\r\n\t\tthis._editedCell = null;\r\n\t}\r\n\r\n\t_findMergeCellPosition(rowIndex, columnIndex) {\r\n\t\tlet cell = this._dataGroup.findMergeCellPosition(rowIndex, columnIndex);\r\n\t\tif (!cell) {\r\n\t\t\tcell = new CellPosition(rowIndex, columnIndex);\r\n\t\t}\r\n\t\treturn cell;\r\n\t}\r\n\r\n\t/**\r\n\t * 다음 편집위치\r\n\t * @param rowIndex\r\n\t * @param columnIndex\r\n\t * @param isReverse\r\n\t * @param isVertical\r\n\t * @param trigger\r\n\t * @private\r\n\t */\r\n\t_startNextEdit(rowIndex, columnIndex, isReverse, isVertical, trigger) {\r\n\t\tif (!this._inStartNextEdit) {\r\n\t\t\tthis._inStartNextEdit = true;\r\n\t\t\twindow.requestAnimationFrame(() => {\r\n\t\t\t\tlet position, isEdited;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tposition = this._findNextEditablePosition(rowIndex, columnIndex, isReverse, isVertical);\r\n\t\t\t\t\tif (position) {\r\n\t\t\t\t\t\trowIndex = position.y;\r\n\t\t\t\t\t\tcolumnIndex = position.x;\r\n\t\t\t\t\t\tisEdited = this.startEdit(rowIndex, columnIndex, trigger);\r\n\t\t\t\t\t}\r\n\t\t\t\t} while (position && !isEdited);\r\n\r\n\t\t\t\tthis._inStartNextEdit = false;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t_findNextEditablePosition(rowIndex, columnIndex, shiftKey, isVertical) {\r\n\t\tconst columns = this._dataGroup.normalizedColumns;\r\n\t\tconst numColumns = columns.length;\r\n\t\tconst numItems = this._dataGroup.collection.length;\r\n\t\tconst increments = shiftKey ? -1 : 1;\r\n\r\n\t\tlet nextRowIndex = rowIndex;\r\n\t\tlet nextColumnIndex = columnIndex;\r\n\r\n\t\tdo {\r\n\t\t\tconst mergeCell = this._findMergeCellPosition(nextRowIndex, nextColumnIndex);\r\n\t\t\tif (isVertical) {\r\n\t\t\t\tnextRowIndex = shiftKey ? mergeCell.top : mergeCell.bottom;\r\n\t\t\t\tnextRowIndex += increments;\r\n\t\t\t} else {\r\n\t\t\t\tnextColumnIndex = shiftKey ? mergeCell.left : mergeCell.right;\r\n\t\t\t\tnextColumnIndex += increments;\r\n\r\n\t\t\t\tif (nextColumnIndex >= numColumns) {\r\n\t\t\t\t\tnextRowIndex++;\r\n\t\t\t\t\tnextColumnIndex = 0;\r\n\t\t\t\t} else if (nextColumnIndex < 0) {\r\n\t\t\t\t\tnextRowIndex--;\r\n\t\t\t\t\tnextColumnIndex = numColumns - 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (nextRowIndex < 0 || nextRowIndex >= numItems) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t} while (!this.isCellEditable(nextRowIndex, nextColumnIndex));\r\n\r\n\t\tif (nextRowIndex === rowIndex && nextColumnIndex === columnIndex) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn new Point(nextColumnIndex, nextRowIndex);\r\n\t}\r\n\r\n\t_dispatchEditorEvent(type, cancelable, rowIndex, columnIndex, oldValue = null, newValue = null, trigger = null) {\r\n\t\tconst cell = this._editedCell;\r\n\t\treturn this._grid.dispatchEvent(new CustomEvent(type, {\r\n\t\t\tbubbles: false,\r\n\t\t\tcancelable: cancelable,\r\n\t\t\tdetail: {\r\n\t\t\t\trowIndex: rowIndex,\r\n\t\t\t\tcolumnIndex: columnIndex,\r\n\t\t\t\titem: this._dataGroup.getItemAt(rowIndex),\r\n\t\t\t\tcolumn: this._dataGroup.getColumnAt(columnIndex),\r\n\t\t\t\trenderer: cell && cell.renderer || null,\r\n\t\t\t\teditor: cell && cell.editor || null,\r\n\t\t\t\toldValue: oldValue,\r\n\t\t\t\tnewValue: newValue,\r\n\t\t\t\ttrigger: trigger\r\n\t\t\t}\r\n\t\t}));\r\n\t}\r\n\r\n\t_getPrintableKey(event) {\r\n\t\tconst key = event && (event.char || event.key);\r\n\t\tif (this._grid.editOnKeys.indexOf(key) >= 0) {\r\n\t\t\treturn key;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t_onGridItemEvent(event) {\r\n\t\tconst rowIndex = event.detail.rowIndex;\r\n\t\tconst columnIndex = event.detail.columnIndex;\r\n\t\tconst isEditing = this.isEditing();\r\n\r\n\t\t//에디트 중일때\r\n\t\tif (isEditing && this._lastEditCellPosition.contains(columnIndex, rowIndex)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst column = this._dataGroup.getColumnAt(columnIndex);\r\n\t\tconst cellPosition = this._findMergeCellPosition(rowIndex, columnIndex);\r\n\t\tconst events = column.editOnEvents || this._grid.editOnEvents || [];\r\n\t\tconst kind = TYPE_MAP[event.type];\r\n\r\n\t\t//이미 에디터이 있는 상태이고\r\n\t\t//마지막 에디트한 상태가 현재 위치와 다르면 에디트 종료\r\n\t\tif (isEditing && !this.endEdit(event) || events.indexOf(kind) < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.startEdit(cellPosition.rowIndex, cellPosition.columnIndex, event);\r\n\t}\r\n\r\n\t_onGridKeyDown(event) {\r\n\t\tif (!this.isEditing() && !event.defaultPrevented) {\r\n\t\t\tconst caretRowIndex = this._dataGroup.caretRowIndex;\r\n\t\t\tconst caretColumnIndex = this._dataGroup.caretColumnIndex;\r\n\r\n\t\t\tif (!event.ctrlKey && !event.altKey && caretRowIndex >= 0 && caretColumnIndex >= 0) {\r\n\t\t\t\tconst key = this._getPrintableKey(event);\r\n\t\t\t\tif (key || event.keyCode === 113) {\r\n\t\t\t\t\tconst cp = this._findMergeCellPosition(caretRowIndex, caretColumnIndex);\r\n\t\t\t\t\tif (this.startEdit(cp.rowIndex, cp.columnIndex, event)) {\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_onGridScroll(event) {\r\n\t\tif (this.isEditing()) {\r\n\t\t\tthis.endEdit(event);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t_onDocumentKeyDown(event) {\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst {keyCode, shiftKey} = event;\r\n\t\tif (this.isEditing() && POSSIBLE_KEY_CODES.indexOf(keyCode) >= 0) {\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\tconst {rowIndex, columnIndex} = this._lastEditCellPosition;\r\n\t\t\tif (keyCode === 27) {//esc\r\n\t\t\t\tthis.cancelEdit();\r\n\t\t\t} else if (keyCode === 13) {\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._startNextEdit(rowIndex, columnIndex, shiftKey, true, event);\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode === 9) {//tab\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._startNextEdit(rowIndex, columnIndex, shiftKey, false, event);\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode === 37) {\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._grid.moveCaretLeft();\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode === 38) {\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._grid.moveCaretUp();\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode === 39) {\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._grid.moveCaretRight();\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode === 40) {\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._grid.moveCaretDown();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_onDocumentMouseEvent(event) {\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst editor = this._editedCell.editor;\r\n\t\tif (!editor) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst element = editor.htmlElement;\r\n\t\tif (element instanceof Element && element.contains(event.target)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst x = event.clientX;\r\n\t\tconst y = event.clientY;\r\n\t\tconst rect = element.getBoundingClientRect();\r\n\t\tif (!(x < rect.left || x > rect.right || y < rect.top || y > rect.bottom)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.endEdit(event);\r\n\t}\r\n}\n\nfunction createFunction(operator) {\n    return new Function('a', 'b', `return a ${operator} b`);\n}\n\nfunction contains(a, b, ignore) {\n    if (!a || !b) {\n        return false;\n    }\n\n    if (ignore) {\n        //TODO 성능 regex test 비교?\n        a = a.toLowerCase();\n        b = b.toLowerCase();\n    }\n    return a.indexOf(b) >= 0;\n}\n\nfunction notContains(a, b) {\n    return !contains(a, b);\n}\n\nfunction startsWith(a, b) {\n    return a && b && a.startsWith(b);\n}\n\nfunction endsWith(a, b) {\n    return a && b && a.startsWith(b);\n}\n\nconst Operators = [\n    {type: 'equals', compare: createFunction('==')},\n    {type: 'notEqual', compare: createFunction('!=')},\n    {type: 'lessThan', compare: createFunction('<')},\n    {type: 'lessThanOrEqual', compare: createFunction('<=')},\n    {type: 'greaterThan', compare: createFunction('>')},\n    {type: 'greaterThanOrEqual', compare: createFunction('>=')},\n\n    {type: 'contains', compare: contains},\n    {type: 'notContains', compare: notContains},\n    {type: 'startsWith', compare: startsWith},\n    {type: 'endsWith', compare: endsWith}\n];\n\nfunction getOperator(name) {\n    name = (name || '').toLowerCase();\n    return Operators.find(item => name === item.type.toLowerCase());\n}\n\nfunction valueToString(value) {\n    return value != null ? '' + value : '';\n}\n\nfunction valueToNumber(value) {\n    return ++value;\n}\n\nfunction parseConditions(data) {\n\n    if (!data) {\n        data = {};\n    }\n\n    const conditions = [];\n    const values = [];\n    const setCondition = function (item) {\n        let name = item.operator;\n        if (name) {\n            const operator = getOperator(name);\n            if (operator) {\n                conditions.push(operator.compare);\n                values.push(item.value);\n            }\n        }\n    };\n\n    if ('from' in data) {\n        setCondition(data.from);\n    }\n\n    if ('to' in data) {\n        setCondition(data.to);\n    }\n\n    if (conditions.length <= 0) {\n        setCondition(data);\n    }\n\n    return {conditions, values}\n}\n\nclass IFilter {\n    constructor(options, manager) {\n        this.options = options;\n        this._manager = manager;\n        const parsed = parseConditions(options.condition);\n        this._conditions = parsed.conditions || [];\n        this._values = parsed.values || [];\n        this.valueFunction = options.valueFunction;\n    }\n\n    get manager() {\n        return this._manager;\n    }\n\n    get column() {\n        return this.options.column;\n    }\n\n    get dataField() {\n        return this.column.dataField;\n    }\n\n    get collection() {\n        return this.options.collection;\n    }\n\n    /**\n     * 비교 데이타가 있는지 여부\n     * @returns {boolean}\n     */\n    get canCompare() {\n        return this._values != null;\n    }\n\n    /**\n     * 조건 입력\n     * @returns {Array|null}\n     */\n    getConditions() {\n        return this._conditions;\n    }\n\n    /**\n     *\n     * @param  {Array} value\n     * @returns {boolean}\n     */\n    setConditions(value) {\n        if (this._conditions !== value) {\n            this._conditions = value || [];\n            return true;\n        }\n        return false;\n    }\n\n    getValues() {\n        return this._values || [];\n    }\n\n    /**\n     *\n     * @param  {Array} value\n     * @returns {boolean}\n     */\n    setValues(value) {\n        if (this._values !== value) {\n            this._values = value || [];\n            return true;\n        }\n        return false;\n    }\n\n    itemToValue(item) {\n        const result = this.column.itemToValue(item);\n        if (this.valueFunction) {\n            return this.valueFunction(result);\n        }\n        return result;\n    }\n\n    compare(item) {\n        return true;\n    }\n\n    compareOtherFilters(item) {\n        return !this.manager.filters.some(filter => filter !== this && filter.canCompare && !filter.compare(item));\n    }\n\n    refresh() {\n        this.manager.refresh();\n    }\n}\n\n/**\r\n * 해딩 필드의\r\n */\r\n\r\nclass SetFilter extends IFilter {\r\n    constructor(options, manager) {\r\n        super(options, manager);\r\n        /**\r\n         *\r\n         * @type {Set | Null}\r\n         */\r\n        this.filterValueSet = null;\r\n    }\r\n\r\n    get canCompare() {\r\n        const numValues = this.getValues().length;\r\n        if (numValues <= 0 || (this._possibleValues || []).length === numValues) {\r\n            return false;\r\n        }\r\n        return super.canCompare;\r\n    }\r\n\r\n    itemToValue(item) {\r\n        return valueToString(super.itemToValue(item));\r\n    }\r\n\r\n    getPossibleValues() {\r\n        const collection = this.collection;\r\n        if (collection && !this._possibleValues) {\r\n            const set = new Set();\r\n            //원 소스(배열)전체 탐색\r\n            collection.forEach(item => {\r\n                const value = this.itemToValue(item);\r\n                if (!set.has(value)) {\r\n                    set.add(value);\r\n                }\r\n            });\r\n\r\n            this._possibleValues = Array.from(set);\r\n        }\r\n        return this._possibleValues;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @param value {Array}\r\n     */\r\n    setValues(value) {\r\n        if (super.setValues(value)) {\r\n            this.filterValueSet = new Set(value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    compare(item) {\r\n        return this.filterValueSet && this.filterValueSet.has(this.itemToValue(item));\r\n    }\r\n}\n\nfunction compareAB(condition, a, b, ignore = false) {\n    return !condition || condition(a, b, ignore);\n}\n\nclass RangeFilter extends IFilter {\n    constructor(options, manager) {\n        super(options, manager);\n    }\n\n    get canCompare() {\n        return (this.fromCondition != null && this.fromValue != null) || (this.toCondition != null && this.toValue != null)\n    }\n\n    get fromCondition() {\n        return this._conditions[0];\n    }\n\n    get toCondition() {\n        return this._conditions[1];\n    }\n\n    get fromValue() {\n        return this._values[0];\n    }\n\n    get toValue() {\n        return this._values[1];\n    }\n\n    setConditions(values) {\n        values = values && values.map(value => {\n            if (value instanceof Function) {\n                return value;\n            }\n            const operator = getOperator(value.toLowerCase());\n            return operator && operator.compare;\n        });\n        return super.setConditions(values);\n    }\n\n    compare(item) {\n        const source = this.itemToValue(item);\n        let fromResult = true;\n        if (this.fromCondition && this.fromValue) {\n            fromResult = compareAB(this.fromCondition, source, this.fromValue, true);\n        }\n\n        if (this.toCondition && this.toValue) {\n            const operator = this.options.condition.operator;\n            if (operator === 'and' && !fromResult) {\n                return false;\n            } else if (operator !== 'and' && fromResult) {\n                return true;\n            }\n            return compareAB(this.toCondition, source, this.toValue, true);\n        }\n\n        return fromResult;\n    }\n}\n\nclass NumberFilter extends RangeFilter {\n    constructor(options, manager) {\n        super(options, manager);\n    }\n\n    itemToValue(item) {\n        return valueToNumber(super.itemToValue(item));\n    }\n}\n\nclass DateFilter extends RangeFilter {\n    constructor(options, manager) {\n        super(options, manager);\n    }\n}\n\nclass TextFilter extends RangeFilter {\n    constructor(options, manager) {\n        super(options, manager);\n    }\n\n    get canCompare() {\n        return !!((this.fromCondition != null && this.fromValue) || (this.toCondition != null && this.toValue));\n    }\n\n    itemToValue(item) {\n        return valueToString(super.itemToValue(item));\n    }\n}\n\nclass FuncFilter extends IFilter {\n    constructor(callback, options, manager) {\n        super(options, manager);\n        this.callback = callback;\n    }\n\n    /**\n     * 비교 데이타가 있는지 여부\n     * @returns {boolean}\n     */\n    get canCompare() {\n        return this.callback instanceof Function;\n    }\n\n    compare(item) {\n        return this.callback(item, this.options.column);\n    }\n}\n\nclass FilterManager {\r\n    constructor(grid) {\r\n        this.grid = grid;\r\n        this.filters = [];\r\n        this.filterMap = new Map();\r\n        grid.addEventListener('collection-change', this.onCollectionChange.bind(this));\r\n        grid.addEventListener('column-collection-change', this.onColumnCollectionChange.bind(this));\r\n    }\r\n\r\n    get collection() {\r\n        return this.grid.collection;\r\n    }\r\n\r\n    getFilter(column) {\r\n        return this.filterMap.get(column);\r\n    }\r\n\r\n    /**\r\n     * 필터 생성\r\n     * @param column\r\n     * @returns {null|*}\r\n     */\r\n    createFilter(column) {\r\n        const options = column.filter;\r\n        if (!options) {\r\n            return null;\r\n        }\r\n\r\n        if (options instanceof Function) {\r\n            return new FuncFilter(options, {\r\n                collection: this.grid.collection,\r\n                column: column,\r\n            }, this);\r\n        }\r\n\r\n        if (!column.dataField) {\r\n            console.warn('`dataField` is not defined', options);\r\n            return null;\r\n        }\r\n\r\n        let factory;\r\n        switch (options.type) {\r\n            case 'set' :\r\n                factory = SetFilter;\r\n                break;\r\n            case 'number':\r\n                factory = NumberFilter;\r\n                break;\r\n            case 'date':\r\n                factory = DateFilter;\r\n                break;\r\n            default:\r\n                factory = TextFilter;\r\n                break;\r\n        }\r\n\r\n        return new factory({\r\n            ...options,\r\n            collection: this.grid.collection,\r\n            column: column,\r\n        }, this);\r\n    }\r\n\r\n    addFilter(column, filter) {\r\n        this.filters.push(filter);\r\n        this.filterMap.set(column, filter);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    refresh() {\r\n        const collection = this.grid.collection;\r\n        if (!collection) {\r\n            return false;\r\n        }\r\n        const activeFilters = this.filters.filter(filter => filter.canCompare);\r\n        let filter = null;\r\n        if (activeFilters.length > 0) {\r\n            const executeFilter = item => {\r\n                for (let i = 0, num = activeFilters.length; i < num; i++) {\r\n                    if (!activeFilters[i].compare(item)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            };\r\n\r\n            filter = item => executeFilter(item);\r\n        }\r\n\r\n        if (collection.filterFunction !== filter) {\r\n            collection.filterFunction = filter;\r\n            collection.refresh();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 필터 리셋\r\n     */\r\n    reset(isRecycle = false) {\r\n        let oldMap = this.filterMap;\r\n        this.clear();\r\n        this.grid.normalizedColumns.forEach(column => {\r\n            let filter = null;\r\n            if (isRecycle) {\r\n                filter = oldMap.get(column);\r\n            }\r\n\r\n            if(!filter){\r\n                filter= this.createFilter(column);\r\n            }\r\n\r\n            if (filter) {\r\n                this.addFilter(column, filter);\r\n            }\r\n        });\r\n        this.refresh();\r\n    }\r\n\r\n    clear() {\r\n        this.filters = [];\r\n        this.filterMap = new Map();\r\n    }\r\n\r\n    onCollectionChange(event) {\r\n        if (event.detail.kind === 'reset') {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    onColumnCollectionChange(event) {\r\n        if (event.detail.kind === 'reset') {\r\n            this.reset(true);\r\n        }\r\n    }\r\n}\r\n\r\nconst Filterable = {\r\n    constructor() {\r\n        this._filterManager = new FilterManager(this);\r\n    },\r\n    get filterManager() {\r\n        return this._filterManager;\r\n    },\r\n};\n\nclass IAddon {\r\n    constructor(name, grid) {\r\n        this._grid = grid;\r\n        this._name = name;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get grid() {\r\n        return this._grid;\r\n    }\r\n\r\n    created(grid) {\r\n    }\r\n\r\n    updating() {\r\n    }\r\n\r\n    update() {\r\n    }\r\n}\r\n\r\nconst addons = {};\r\n\r\nfunction getAddons() {\r\n    return Object.keys(addons).map(k => addons[k]);\r\n}\r\n\r\nfunction createFactory(name, data) {\r\n    const Addon = class Addon extends IAddon {\r\n        constructor(grid) {\r\n            super(name, grid);\r\n        }\r\n    };\r\n\r\n    mixin(Addon.prototype, data, false);\r\n    return Addon\r\n}\r\n\r\nfunction get$1(name) {\r\n    return name ? addons[name] : null;\r\n}\r\n\r\nfunction add$1(name, data) {\r\n    let factory = null;\r\n    if (name) {\r\n        factory = addons[name] = createFactory(name, data);\r\n    }\r\n    return factory;\r\n}\r\n\r\nfunction remove$1(name) {\r\n    if (name in addons) {\r\n        delete addons[name];\r\n    }\r\n}\n\nvar addon = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    IAddon: IAddon,\n    add: add$1,\n    createFactory: createFactory,\n    get: get$1,\n    getAddons: getAddons,\n    remove: remove$1\n});\n\nclass AddonHelper {\n    constructor(grid) {\n        this.grid = grid;\n        this._addons = getAddons().map(f => this._createAddon(f));\n        const boundDataGroupRender = this._onDataGroupRender.bind(this);\n        grid.addEventListener('render-updating', boundDataGroupRender);\n        grid.addEventListener('render-update', boundDataGroupRender);\n    }\n\n    getAddons() {\n        return this._addons.slice(0);\n    }\n\n    getAddon(name) {\n        return this._addons.find(addon => addon.name === name);\n    }\n\n    addAddon(name, scope) {\n        if (!name) {\n            return;\n        }\n        if (this.getAddon(name)) {\n            throw new Error(`'${name}' has already been taken`);\n        }\n        const factory = add$1(name, scope);\n        this._addons.push(this._createAddon(factory));\n    }\n\n    /**\n     * addon 인스턴스를 생성합니다.\n     * @param factory\n     * @returns {*}\n     * @private\n     */\n    _createAddon(factory) {\n        const addon = new factory(this.grid);\n        callHook(addon, 'created', this.grid);\n        return addon;\n    }\n\n    _onDataGroupRender(event) {\n        switch (event.type) {\n            case 'render-updating':\n                this._addons.forEach(addon => {\n                    addon.updating(this.grid);\n                });\n                break;\n            case 'render-update':\n                this._addons.forEach(addon => {\n                    addon.update(this.grid);\n                });\n                break;\n        }\n    }\n}\n\nconst theme = {};\n\nfunction get(name) {\n    return name ? theme[name] : null;\n}\n\nfunction add(name, data) {\n    if (name && 'css' in data && 'canvasStyle' in data) {\n        theme[name] = data;\n    }\n}\n\nfunction remove(name) {\n    if (name in theme) {\n        delete theme[name];\n        //모든 그리드 갱신 필요!!!\n    }\n}\n\nvar theme$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    add: add,\n    get: get,\n    remove: remove\n});\n\nconst HEADER_EVENTS = ['header-double-click', 'header-down', 'header-up', 'header-click', 'header-drag', 'header-out', 'header-over'];\r\n\r\nconst HEADER_SEPARATOR_EVENTS = ['separator-over', 'separator-out', 'separator-down', 'separator-drag', 'separator-up', 'separator-click', 'separator-double-click'];\r\n\r\nconst HEADER_ALL_EVENTS = [].concat(HEADER_EVENTS, HEADER_SEPARATOR_EVENTS);\r\n\r\nconst ITEM_EVENTS = ['item-over', 'item-out', 'item-down', 'item-up', 'item-drag', 'item-click', 'item-double-click',];\r\n\r\nconst DATA_GROUP_EVENTS = ITEM_EVENTS.concat(['collection-change', 'column-collection-change', 'column-node-change', 'normalized-columns-change',\r\n    'selection-changing', 'selection-change',\r\n    'item-edit-starting', 'item-edit-start', 'item-edit-ending', 'item-edit-end', 'item-edit-cancel',\r\n    'render-updating', 'render-update',]);\r\n\r\nconst PRIORITY = {\r\n    'headerRenderer': -200, 'mergeItemRenderer': -100, 'itemRenderer': -100, 'columns': 100, 'items': 200\r\n};\r\n\r\nfunction prioritySortFunction(a, b) {\r\n    const aPriority = PRIORITY[a] || 0;\r\n    const bPriority = PRIORITY[b] || 0;\r\n    if (aPriority < bPriority) {\r\n        return -1;\r\n    }\r\n    if (aPriority > bPriority) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getSortFunction(type) {\r\n    if (type === 'number') {\r\n        return numericCompare;\r\n    } else if (type === 'string') {\r\n        return stringCompare;\r\n    } else {\r\n        return stringCompare;\r\n    }\r\n}\r\n\r\nfunction isValidDropColumn(source, leafColumn, isNext) {\r\n\r\n    if (source.level >= leafColumn.level) {\r\n        return source.parent === leafColumn.parent;\r\n    }\r\n\r\n    let active = leafColumn;\r\n    let activeParent = leafColumn.parent;\r\n    while (activeParent) {\r\n        if ((source.level - 1 === activeParent.level && source.parent === activeParent)) {\r\n            return true;\r\n        } else {\r\n\r\n            //부모노드\r\n            //0 인덱스와 마지막 인덱스만 비교(숨겨져 있는 컬럼은 스킵)\r\n            let children = activeParent.children;\r\n            let numChildren = children ? children.length : 0;\r\n            let childIndex = numChildren > 0 ? children.indexOf(active) : -1;\r\n            let i, child, index;\r\n\r\n            for (i = 0; i < numChildren; i++) {\r\n                index = isNext ? numChildren - i - 1 : i;\r\n                child = children[index];\r\n\r\n                if (!child.visible) {\r\n                    continue;\r\n                }\r\n                if (index !== childIndex || source.level === child.level) {\r\n                    return false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        active = activeParent;\r\n        activeParent = activeParent.parent;\r\n    }\r\n    return true;\r\n}\r\n\r\nclass DataGrid extends Element$1 {\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * 그리드 셀을 편집할 수 있는지를 나타냅니다\r\n         */\r\n        this.editable = false;\r\n        /**\r\n         * 키 입력시 편집할 수 있는 키 목록입니다.\r\n         */\r\n        this.editOnKeys = defaultConfig.editOnKeys;\r\n        /**\r\n         * 편집 활성화할수 있는 이벤트 목록입니다.\r\n         */\r\n        this.editOnEvents = ['doubleClick'];\r\n\r\n        /**\r\n         * 아이템 드래그시 항목 선택 여부입니다.\r\n         */\r\n        this.selectOnDrag = true;\r\n\r\n        /**\r\n         * 멀티 정렬 여부입니다.\r\n         * @type {boolean}\r\n         */\r\n        this.multiSortable = false;\r\n        this.pasteFromClipboard = true;\r\n\r\n        this._resizableColumns = true;\r\n        this._draggableColumns = true;\r\n        this._sortableColumns = true;\r\n        this._labelFunction = null;\r\n        this._rowCount = -1;\r\n        this._maxRowCount = -1;\r\n        this._dragScrollId = -1;\r\n        this._dragScrollDelta = null;\r\n        this._sortColumns = [];\r\n        this._dragColumnInfo = null;\r\n        this._dropColumnInfo = null;\r\n        this._dragCanceled = false;\r\n        this._theme = null;\r\n        this._oldWidth = 0;\r\n        this._oldHeight = 0;\r\n\r\n        this._gridEditor = new DataGridEditor(this);\r\n        this._itemEditor = defaultConfig.itemEditor || defaultItemEditor;\r\n        this._boundDoLayout = this.doLayout.bind(this);\r\n\r\n        this._defaultStyles = mixin({}, defaultConfig.styles);\r\n\r\n        const dataGroup = this._dataGroup = this.createDataGroup();\r\n        const headerGroup = this._headerGroup = this.createHeaderGroup();\r\n        const scroller = this._scroller = new Scroller(dataGroup);\r\n\r\n        this.appendChild(headerGroup);\r\n        this.appendChild(scroller);\r\n\r\n        this._sizeDetector = new ResizeObserver((entries, observer) => {\r\n            this._onResize();\r\n        });\r\n        this._sizeDetector.observe(this.root);\r\n        this._addonHelper = new AddonHelper(this);\r\n\r\n        const boundHeaderEvents = this._onHeaderEvents.bind(this);\r\n        HEADER_EVENTS.forEach(type => headerGroup.addEventListener(type, boundHeaderEvents));\r\n\r\n        const boundHeaderSeparatorEvents = this._onHeaderSeparatorEvents.bind(this);\r\n        HEADER_SEPARATOR_EVENTS.forEach(type => headerGroup.addEventListener(type, boundHeaderSeparatorEvents));\r\n\r\n        const boundRedispatch = this._redispatch.bind(this);\r\n        HEADER_ALL_EVENTS.forEach(type => headerGroup.addEventListener(type, boundRedispatch));\r\n        DATA_GROUP_EVENTS.forEach(type => dataGroup.addEventListener(type, boundRedispatch));\r\n        scroller.addEventListener('scroll', boundRedispatch, {passive: true});\r\n\r\n        this.addEventListener('keydown', this._onKeyDown.bind(this));\r\n        dataGroup.addEventListener('item-down', this._onItemDown.bind(this));\r\n    }\r\n\r\n    /**\r\n     * 기본 스타일 정의\r\n     * @returns defaults.styles|{backgroundColor, font, color, textAlign, verticalAlign, rowHeight, headerRowHeight, rowLineColor, rowLineWidth, rowColors, columnLineColor, columnLineWidth, columnLineStyle, frozenLineColor, frozenLineWidth, frozenLineStyle, cellSelectionColor, cellOverColor, textSelectionColor, textOverColor, caretLineColor, caretLineWidth, cellPadding, headerRowLineColor, headerRowLineWidth, headerColumnLineColor, headerColumnLineWidth}}\r\n     * @private\r\n     */\r\n    get defaultStyles() {\r\n        return this._defaultStyles;\r\n    }\r\n\r\n    /**\r\n     * 데이타 그리드의 헤더영역 인스턴스입니다.\r\n     * @returns {*}\r\n     */\r\n    get headerGroup() {\r\n        return this._headerGroup;\r\n    }\r\n\r\n    /**\r\n     * 데이타 그리드의 데이타 영역 인스턴스입니다.\r\n     * @returns {*}\r\n     */\r\n    get dataGroup() {\r\n        return this._dataGroup;\r\n    }\r\n\r\n    get selector() {\r\n        return this.dataGroup.selector;\r\n    }\r\n\r\n    /**\r\n     * 그리드의 행에 표시되는 데이터 목록을 관리합니다.\r\n     * 이 속성은 ArrayList 타입입니다.\r\n     * 이를 사용하면 행추가, 삭제, 수정, 이동이 가능합니다.\r\n     * @returns {ArrayList}\r\n     */\r\n    get collection() {\r\n        return this.dataGroup.collection;\r\n    }\r\n\r\n    get columnCollection() {\r\n        return this.dataGroup.columnCollection;\r\n    }\r\n\r\n    /**\r\n     * 그리드 행에 표시되는 데이타 목록입니다.\r\n     * @returns {Array}\r\n     */\r\n    get items() {\r\n        return this.collection && this.collection.source;\r\n    }\r\n\r\n    set items(value) {\r\n        if (value && !Array.isArray(value)) {\r\n            console.warn('`items` must be an array.', value);\r\n            return;\r\n        }\r\n\r\n        if (this.items !== value) {\r\n            this.dataGroup.collection = this.createCollection(value);\r\n            this.doLayout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 그리드 헤더에 표시되는 컬럼목록입니다.\r\n     * 명시적으로 설정하지 않는 경우 items의 첫번째 항목의 해당 속성들로 표시합니다.\r\n     * @returns {Array}\r\n     */\r\n    get columns() {\r\n        return this.columnCollection && this.columnCollection.source;\r\n    }\r\n\r\n    set columns(value) {\r\n        if (this.columns !== value) {\r\n            this.dataGroup.columnCollection = new ColumnCollection(value);\r\n            this.doLayout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get normalizedColumns() {\r\n        return this.dataGroup.normalizedColumns;\r\n    }\r\n\r\n    /**\r\n     * 셀 텍스트를 결정하는 콜백 함수입니다.\r\n     * 기본적으로 각 셀의 텍스트는 그 셀이 속한 컬럼의 `dataField`와 일치하는 아이템 객체의 프로퍼티 값으로 설정됩니다.\r\n     * `labelFunction` 사용시 사용자가 지정한 값으로 설정할 수 있습니다.\r\n     * 그러나, 컬럼 자체에 `labelFunction`이 이미 정의되어 있다면, 해당 컬럼의 `labelFunction`이 우선적으로 사용되며 이 메소드는 무시됩니다.\r\n     * ```\r\n     * labelFunction (item : Object, column : DataGridColumn) : String{\r\n     *      return item[column.dataField] + '%';\r\n     * }\r\n     * ```\r\n     */\r\n    get labelFunction() {\r\n        return this._labelFunction;\r\n    }\r\n\r\n    set labelFunction(value) {\r\n        if (this._labelFunction !== value) {\r\n            this._labelFunction = value;\r\n            this.dataGroup.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 헤더 셀을 구성하는 클래스 팩토리입니다.\r\n     */\r\n    get headerRenderer() {\r\n        return this._headerGroup.headerRenderer;\r\n    }\r\n\r\n    set headerRenderer(value) {\r\n        this._headerGroup.headerRenderer = value;\r\n    }\r\n\r\n    /**\r\n     * 데이타 셀을 구성하는 클래스 팩토리입니다.\r\n     * @param Object || Function\r\n     */\r\n    get itemRenderer() {\r\n        return this.dataGroup.itemRenderer;\r\n    }\r\n\r\n    set itemRenderer(value) {\r\n        this.dataGroup.itemRenderer = value;\r\n    }\r\n\r\n    /**\r\n     * 병합된 셀을 구성하는 클래스 팩토리입니다.\r\n     */\r\n    get mergeItemRenderer() {\r\n        return this.dataGroup.mergeItemRenderer;\r\n    }\r\n\r\n    set mergeItemRenderer(value) {\r\n        this.dataGroup.mergeItemRenderer = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * 빈값을 가진(null) 셀을 구성하는 클래스 팩토리입니다.\r\n     */\r\n    get nullItemRenderer() {\r\n        return this.dataGroup.nullItemRenderer;\r\n    }\r\n\r\n    set nullItemRenderer(value) {\r\n        this.dataGroup.nullItemRenderer = value;\r\n    }\r\n\r\n    /**\r\n     * nullItemRenderer 사용 여부입니다.\r\n     */\r\n    get useNullItemRenderer() {\r\n        return this.dataGroup.useNullItemRenderer;\r\n    }\r\n\r\n    set useNullItemRenderer(value) {\r\n        this.dataGroup.useNullItemRenderer = value;\r\n    }\r\n\r\n    get itemEditor() {\r\n        return this._itemEditor || defaultConfig.defaultItemEditor;\r\n    }\r\n\r\n    set itemEditor(value) {\r\n        this._itemEditor = value;\r\n    }\r\n\r\n    /**\r\n     * `ScrollLeft` 최대값입니다.\r\n     * @returns {number}\r\n     */\r\n    get maxScrollLeft() {\r\n        return this._scroller.maxScrollLeft;\r\n    }\r\n\r\n    /**\r\n     * `scrollTop` 최대값입니다.\r\n     * @returns {number}\r\n     */\r\n    get maxScrollTop() {\r\n        return this._scroller.maxScrollTop;\r\n    }\r\n\r\n    /**\r\n     * 수평 스크롤 위치값입니다.\r\n     * @returns {number}\r\n     */\r\n    get scrollLeft() {\r\n        return this.dataGroup.scrollLeft || 0;\r\n    }\r\n\r\n    set scrollLeft(value) {\r\n        this.dataGroup.scrollLeft = value;\r\n    }\r\n\r\n    /**\r\n     * 수직 스크롤 위치값입니다.\r\n     * @returns {number}\r\n     */\r\n    get scrollTop() {\r\n        return this.dataGroup.scrollTop || 0;\r\n    }\r\n\r\n    set scrollTop(value) {\r\n        this.dataGroup.scrollTop = value;\r\n    }\r\n\r\n    /**\r\n     *  GridColumn.isColumnMerge 및 GridColumn.isRowMerge 설정에 따라 동일한 데이터를 가진 연속적인 셀들을 자동으로 병합하는 기능을 제어합니다.\r\n     */\r\n    get autoMerge() {\r\n        return this.dataGroup.autoMerge;\r\n    }\r\n\r\n    set autoMerge(value) {\r\n        this.dataGroup.autoMerge = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * 컬럼이 정의되지 않았을 때 `items` 첫 번째 아이템 구조를 기준으로 컬럼을 자동으로 생성하는 기능을 제어합니다.\r\n     */\r\n    get autoGenerateColumns() {\r\n        return this.dataGroup.autoGenerateColumns;\r\n    }\r\n\r\n    set autoGenerateColumns(value) {\r\n        this.dataGroup.autoGenerateColumns = value;\r\n    }\r\n\r\n    /**\r\n     * 행의 기본 높이를 지정합니다.\r\n     * autoRowHeight가 `false` 일 경우에 한합니다.\r\n     * @returns {number}\r\n     */\r\n    get rowHeight() {\r\n        return this.dataGroup.rowHeight;\r\n    }\r\n\r\n    set rowHeight(value) {\r\n        this.dataGroup.rowHeight = value;\r\n    }\r\n\r\n    /**\r\n     * 헤더 셀의 높이를 지정합니다.\r\n     * 컬럼이 계층구조 일 경우 헤더 높이는 계층 최대 깊이 * headerRowHeight 립니다.\r\n     * @returns {number}\r\n     */\r\n    get headerRowHeight() {\r\n        return this._headerGroup.headerRowHeight;\r\n    }\r\n\r\n    set headerRowHeight(value) {\r\n        this._headerGroup.headerRowHeight = value;\r\n    }\r\n\r\n    /**\r\n     * 행의 높이를 구하는 기준을 지정합니다.\r\n     * `true` 경우 각 행의 셀 렌더러의 최대 높이가 행의 높이가 됩니다.\r\n     * `false` 경우 rowHeight 속성의 값이 됩니다.\r\n     * @returns {boolean}\r\n     */\r\n    get autoRowHeight() {\r\n        return this.dataGroup.autoRowHeight;\r\n    }\r\n\r\n    set autoRowHeight(value) {\r\n        this.dataGroup.autoRowHeight = value;\r\n    }\r\n\r\n    /**\r\n     * 그리드의 표현되는 최대 행의 수를 설정합니다.\r\n     * @returns {number}\r\n     */\r\n    get maxRowCount() {\r\n        return this.dataGroup.maxRowCount;\r\n    }\r\n\r\n    set maxRowCount(value) {\r\n        this.dataGroup.maxRowCount = +value;\r\n    }\r\n\r\n    /**\r\n     * 그리드의 표현되는 행의 수를 설정합니다.\r\n     * @returns {number}\r\n     */\r\n    get rowCount() {\r\n        return this.dataGroup.rowCount;\r\n    }\r\n\r\n    set rowCount(value) {\r\n        if (this.rowCount !== value) {\r\n            this.dataGroup.rowCount = +value;\r\n            this.doLayout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 좌를 기준으로 행을 고정합니다.\r\n     * 수평스크롤에 영향을 받지 않습니다.\r\n     * @returns {number}\r\n     */\r\n    get frozenLeft() {\r\n        return this.dataGroup.frozenLeft;\r\n    }\r\n\r\n    set frozenLeft(value) {\r\n        this.dataGroup.frozenLeft = value;\r\n    }\r\n\r\n    /**\r\n     * 우를 기준으로 행을 고정합니다.\r\n     * 수평 스크롤에 영향을 받지 않습니다.\r\n     * @returns {number}\r\n     */\r\n    get frozenRight() {\r\n        return this.dataGroup.frozenRight;\r\n    }\r\n\r\n    set frozenRight(value) {\r\n        this.dataGroup.frozenRight = value;\r\n    }\r\n\r\n    /**\r\n     * 위를 기준으로 행을 고정합니다.\r\n     * 수직스크롤에 영향을 받지 않습니다.\r\n     * @returns {number}\r\n     */\r\n    get frozenTop() {\r\n        return this.dataGroup.frozenTop;\r\n    }\r\n\r\n    set frozenTop(value) {\r\n        this.dataGroup.frozenTop = value;\r\n    }\r\n\r\n    /**\r\n     * 아래를 기준으로 행을 고정합니다.\r\n     * 수직스크롤에 영향을 받지 않습니다.\r\n     * @returns {number}\r\n     */\r\n    get frozenBottom() {\r\n        return this.dataGroup.frozenBottom;\r\n    }\r\n\r\n    set frozenBottom(value) {\r\n        this.dataGroup.frozenBottom = value;\r\n    }\r\n\r\n    /**\r\n     * 자동 병합시 병합영역을 체크하는 함수입니다.\r\n     * compareFunction(targetItem, targetColumn, sourceItem, sourceColumn)\r\n     * @returns {function}\r\n     */\r\n    get mergeCompare() {\r\n        return this.dataGroup.mergeCompare;\r\n    }\r\n\r\n    set mergeCompare(value) {\r\n        this.dataGroup.mergeCompare = value;\r\n    }\r\n\r\n    /**\r\n     * 컬럼의 정렬기능 사용여부입니다.\r\n     * @returns {*}\r\n     */\r\n    get sortableColumns() {\r\n        return this._sortableColumns;\r\n    }\r\n\r\n    set sortableColumns(value) {\r\n        if (this._sortableColumns !== value) {\r\n            this._sortableColumns = value;\r\n            if (!value) {\r\n                this.sortByColumns(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  컬럼의 너비를 변경 가능한지 여부입니다.\r\n     *  @returns {boolean}\r\n     */\r\n    get resizableColumns() {\r\n        return this._resizableColumns;\r\n    }\r\n\r\n    set resizableColumns(value) {\r\n        if (this._resizableColumns !== value) {\r\n            this._resizableColumns = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 컬럼의 순서를 변경가능한지 여부입니다.\r\n     * 해당 속성이 true이고 드래그 대상 컬럼의 draggableColumn속성이 true인 경우 컬럼을 드래그하여 이동 할 수 있습니다.\r\n     * @returns {boolean}\r\n     */\r\n    get draggableColumns() {\r\n        return this._draggableColumns;\r\n    }\r\n\r\n    set draggableColumns(value) {\r\n        if (this._draggableColumns !== value) {\r\n            this._draggableColumns = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 헤더 드래그 중인지 여부입니다.\r\n     */\r\n    get isHeaderDragging() {\r\n        return this._dragColumnInfo != null;\r\n    }\r\n\r\n    get hasVerticalScroll() {\r\n        return this._scroller.hasVerticalScroll;\r\n    }\r\n\r\n    get hasHorizontalScroll() {\r\n        return this._scroller.hasHorizontalScroll;\r\n    }\r\n\r\n    /**\r\n     * 아이템렌더러, 헤더 렌더러가 해제(삭제)될 때 콜백됩니다.\r\n     * 반환값이 'false' 이면 해당렌더러는 재사용 되지 않습니다.\r\n     */\r\n    get hookFreeElement() {\r\n        return this._hookFreeElement;\r\n    }\r\n\r\n    set hookFreeElement(value) {\r\n        if (this._hookFreeElement !== value) {\r\n            this._hookFreeElement = this.dataGroup.hookFreeElement = this.headerGroup.hookFreeElement = value;\r\n        }\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Selection\r\n    //\r\n    //-------------------------------------------------\r\n\r\n    get selectionMode() {\r\n        return this.dataGroup.selectionMode || '';\r\n    }\r\n\r\n    set selectionMode(value) {\r\n        if (this.selectionMode !== value) {\r\n            this.dataGroup.clearSelection();\r\n            this.dataGroup.selectionMode = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 선택된 아이템의 인덱스를 설정하거나 가져옵니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 처음 선택된 행 인덱스가 반환됩니다.\r\n     */\r\n    get selectedIndex() {\r\n        return this.dataGroup.selectedIndex;\r\n    }\r\n\r\n    set selectedIndex(index) {\r\n        this.dataGroup.selectedIndex = index;\r\n    }\r\n\r\n    /**\r\n     * 선택된 아이템를 설정합니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 처음 선택된 항목이 반환됩니다.\r\n     */\r\n    get selectedItem() {\r\n        return this.dataGroup.selectedItem;\r\n    }\r\n\r\n    set selectedItem(item) {\r\n        this.dataGroup.selectedItem = item;\r\n    }\r\n\r\n    /**\r\n     * 복수로 선택된 아이템의 인덱스 목록을 설정합니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 선택된 인덱스 배열이 반환됩니다.\r\n     */\r\n    get selectedIndices() {\r\n        return this.dataGroup.selectedIndices;\r\n    }\r\n\r\n    set selectedIndices(indices) {\r\n        this.dataGroup.selectedIndices = indices;\r\n    }\r\n\r\n    /**\r\n     * 복수로 선택된 아이템을 설정합니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 선택된 항목의 배열이 반환됩니다.\r\n     */\r\n    get selectedItems() {\r\n        return this.dataGroup.selectedItems;\r\n    }\r\n\r\n    set selectedItems(items) {\r\n        this.dataGroup.selectedItems = items;\r\n    }\r\n\r\n    /**\r\n     * 선택된 셀을 설정합니다.\r\n     */\r\n    get selectedCell() {\r\n        return this.dataGroup.selectedCell;\r\n    }\r\n\r\n    set selectedCell(cell) {\r\n        this.dataGroup.selectedCell = cell;\r\n    }\r\n\r\n    /**\r\n     * 복수로 선택된 셀을 설정합니다.\r\n     */\r\n    get selectedCells() {\r\n        return this.dataGroup.selectedCells;\r\n    }\r\n\r\n    set selectedCells(cells) {\r\n        this.dataGroup.selectedCells = cells;\r\n    }\r\n\r\n    /**\r\n     * caret 행 인덱스입니다.\r\n     */\r\n    get caretRowIndex() {\r\n        return this.dataGroup.caretRowIndex;\r\n    }\r\n\r\n    set caretRowIndex(index) {\r\n        this.dataGroup.caretRowIndex = index;\r\n    }\r\n\r\n    /**\r\n     * caret 컬럼 인덱스입니다.\r\n     */\r\n    get caretColumnIndex() {\r\n        return this.dataGroup.caretColumnIndex;\r\n    }\r\n\r\n    set caretColumnIndex(index) {\r\n        this.dataGroup.caretColumnIndex = index;\r\n    }\r\n\r\n    /**\r\n     * 지정된 이름으로 테마를 적용합니다..\r\n     * `theme.add` 이용해 테마를 등록 후 테마를 사용할수 있습니다.\r\n     * ```\r\n     * tachyon.theme.add('themeA', {\r\n     *     css: 'themeA',\r\n     *     canvasStyle: {\r\n     *         backgroundColor: '#999900',\r\n     *         rowLine: {\r\n     *             width: 1,\r\n     *             color: '#FF0000',\r\n     *             dashed: []\r\n     *         },\r\n     *         ...\r\n     *     }\r\n     * })\r\n     * ```\r\n     */\r\n    get theme() {\r\n        return this._theme;\r\n    }\r\n\r\n    set theme(value) {\r\n        if (this._theme !== value) {\r\n            this.releaseTheme();\r\n            this._theme = value;\r\n            if (value) {\r\n                this.applyTheme();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param item\r\n     * @param column\r\n     * @returns {*|*|*|*}\r\n     */\r\n    itemToLabel(item, column) {\r\n        return this.dataGroup.itemToLabel(item, column);\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   addons\r\n    //\r\n    //-------------------------------------------------\r\n    /**\r\n     * addons\r\n     * @returns {Array}\r\n     */\r\n    getAddons() {\r\n        return this._addonHelper.getAddons();\r\n    }\r\n\r\n    /**\r\n     * 지정된 이름에 해당하는 애드온 컴포넌트를 반환합니다.\r\n     */\r\n    getAddon(name) {\r\n        return this._addonHelper.getAddon(name);\r\n    }\r\n\r\n    addAddon(name, value) {\r\n        this._addonHelper.addAddon(name, value);\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Columns\r\n    //\r\n    //-------------------------------------------------\r\n\r\n    /**\r\n     * 부모 컬럼에 자식 컬럼을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param column 추가할 자식 컬럼\r\n     * @returns {boolean}\r\n     */\r\n    addColumn(parent, column) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.addNode(parent, column);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 컬럼을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param column 추가할 자식 컬럼.\r\n     * @param index 자식 컬럼 삽입 위치의 인덱스.\r\n     * @returns {boolean}\r\n     */\r\n    addColumnAt(parent, column, index) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.addNodeAt(parent, column, index);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 부모 컬럼에 자식 컬럼을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param columns 추가할 자식 컬럼 목록\r\n     * @returns {boolean}\r\n     */\r\n    addColumns(parent, columns) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.addNodes(parent, columns);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 컬럼목록을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param columns 추가할 자식 컬럼 목록\r\n     * @param index 자식 컬럼 삽입 위치의 인덱스.\r\n     * @returns {boolean}\r\n     */\r\n    addColumnsAt(parent, columns, index) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.addNodesAt(parent, columns, index);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 부모 컬럼에서 자식 컬럼을 삭제합니다.\r\n     * @param parent 부모 노드입니다.\r\n     * @param column 삭제할 자식 컬럼 입니다.\r\n     * @returns {boolean}\r\n     */\r\n    removeColumn(parent, column) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.removeNode(parent, column);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 부모 컬럼에서 자식 컬럼을 삭제합니다.\r\n     * @param parent 부모 노드입니다.\r\n     * @param columns 삭제할 컬럼 목록 입니다.\r\n     * @returns {boolean}\r\n     */\r\n    removeColumns(parent, columns) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.removeNodes(parent, columns);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    moveColumn(column, toParent, toIndex) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.moveNode(column, toParent, toIndex);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //  Dimension\r\n    //\r\n    //-------------------------------------------------\r\n    /**\r\n     * 지정된 컬럼 인덱스의 x 위치를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getColumnX(index) {\r\n        return this.dataGroup.getColumnX(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스의 너비를 반환합니다.\r\n     * @param index 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnWidth(index) {\r\n        return this.dataGroup.getColumnWidth(index);\r\n    }\r\n\r\n    getColumnLayout(index) {\r\n        return this.dataGroup.getColumnLayout(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스 너비를 설정합니다.\r\n     * @param index\r\n     * @param size\r\n     */\r\n    setColumnWidth(index, size) {\r\n        this.dataGroup.setColumnWidth(index, size);\r\n    }\r\n\r\n    /**\r\n     * from 컬럼부터 to 컬럼까지의 너비의 합을 반환합니다.\r\n     * @param from 시작 컬럼 인덱스\r\n     * @param to 종료 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnsWidth(from, to) {\r\n        return this.dataGroup.getColumnsWidth(from, to);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스 행 높이를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getRowHeight(index) {\r\n        return this.dataGroup.getRowHeight(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스의 행 높이를 설정합니다.\r\n     * @param index\r\n     * @param height\r\n     * @returns {boolean}\r\n     */\r\n    setRowHeight(index, height) {\r\n        return this.dataGroup.setRowHeight(index, height);\r\n    }\r\n\r\n    /**\r\n     * from 행부터 to 행까지의 높이의 합을 반환합니다.\r\n     * @param from 시작행\r\n     * @param to 종료행.\r\n     * @returns {Number}\r\n     */\r\n    getRowsHeight(from, to) {\r\n        return this.dataGroup.getRowsHeight(from, to);\r\n    }\r\n\r\n    getCellStyle(rowIndex, columnIndex, ...props) {\r\n        return this.dataGroup.getCellStyle.apply(this.dataGroup, [rowIndex, columnIndex, ...props])\r\n    }\r\n\r\n    setColumnVisible(column, visible) {\r\n        return this.dataGroup.setColumnVisible(column, visible);\r\n    }\r\n\r\n    /**\r\n     * 그리드 헤더 높이를 반환합니다.\r\n     * @returns {number}\r\n     */\r\n    getHeaderHeight() {\r\n        return this._headerGroup.headerHeight;\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Merge\r\n    //\r\n    //-------------------------------------------------\r\n    getMergeCells() {\r\n        return this.dataGroup.getMergeCellPositions();\r\n    }\r\n\r\n    addMergeCells(cells) {\r\n        Array.isArray(cells) && cells.forEach(cp => {\r\n            if (!(cp instanceof CellPosition)) {\r\n                cp = CellPosition.create(cp);\r\n            }\r\n            this.dataGroup.addMergeCellPosition(cp);\r\n        });\r\n        this.invalidate();\r\n    }\r\n\r\n    addMergeCell(cell) {\r\n        if (!(cell instanceof CellPosition)) {\r\n            cell = CellPosition.create(cell);\r\n        }\r\n        this.dataGroup.addMergeCellPosition(cell);\r\n        this.invalidate();\r\n    }\r\n\r\n    removeMergeCell(cell) {\r\n        if (!(cell instanceof CellPosition)) {\r\n            cell = CellPosition.create(cell);\r\n        }\r\n        this.dataGroup.removeMergeCellPosition(cell);\r\n        this.invalidate();\r\n    }\r\n\r\n    removeMergeCells() {\r\n        this.dataGroup.removeMergeCellPositions();\r\n        this.invalidate();\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Sort\r\n    //\r\n    //-------------------------------------------------\r\n\r\n    getSortColumns() {\r\n        return this._sortColumns.slice(0);\r\n    }\r\n\r\n    /**\r\n     * 하나 이상의 컬럼으로 정렬합니다.\r\n     * @param columns\r\n     */\r\n    sortByColumns(columns) {\r\n\r\n        if (!this.collection || !columns) {\r\n            return;\r\n        }\r\n\r\n        let sortFields = [], sortColumns = [];\r\n\r\n        if (this.sortableColumns) {\r\n            columns.forEach(column => {\r\n                if (column.sortable) {\r\n                    sortColumns.push(column);\r\n                    sortFields.push({\r\n                        descending: column.sortDescending,\r\n                        sortFunction: ((column) => {\r\n                            let sortFunc;\r\n                            if (column.sortCompare instanceof Function) {\r\n                                sortFunc = column.sortCompare;\r\n                                return (a, b) => {\r\n                                    return sortFunc(a, b, column);\r\n                                }\r\n                            }\r\n                            sortFunc = getSortFunction(column.sortCompare);\r\n                            return (a, b) => {\r\n                                let type = column.sortCompare;\r\n                                let v1 = column.isSortOriginal ? column.itemToValue(a) : this.itemToLabel(a, column);\r\n                                let v2 = column.isSortOriginal ? column.itemToValue(b) : this.itemToLabel(b, column);\r\n                                if (type === 'number') {\r\n                                    v1 = +v1;\r\n                                    v2 = +v2;\r\n                                } else if (type === 'string') {\r\n                                    v1 = v1 == null ? '' : '' + v1;\r\n                                    v2 = v2 == null ? '' : '' + v2;\r\n                                }\r\n                                return sortFunc(v1, v2);\r\n                            }\r\n                        })(column)\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        let oldColumns = this._sortColumns || [];\r\n        oldColumns.forEach((c) => {\r\n            if (sortColumns.indexOf(c) < 0) {\r\n                c.sortDescending = false;\r\n            }\r\n        });\r\n\r\n        this._sortColumns = sortColumns;\r\n\r\n        if (oldColumns.length > 0 || sortColumns.length > 0) {\r\n            this.collection.sort(sortFields);\r\n            this.collection.refresh();\r\n        }\r\n    }\r\n\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Edit\r\n    //\r\n    //-------------------------------------------------\r\n    /**\r\n     * 편집 가능한 셀인지 확인합니다.\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @returns {boolean}\r\n     */\r\n    isCellEditable(rowIndex, columnIndex) {\r\n        return this._gridEditor.isCellEditable(rowIndex, columnIndex);\r\n    }\r\n\r\n    /**\r\n     * 지정된 셀에서 편집을 시작합니다.\r\n     * 편집이 시작되면 'item-edit-starting', 'item-edit-start' 이벤트가 발생합니다.\r\n     * 'item-edit-starting' 이벤트가 발생할 때, `preventDefault`를 사용하여 편집을 취소할수 있습니다.\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @returns {boolean}\r\n     */\r\n    startEdit(rowIndex, columnIndex) {\r\n        return this._gridEditor.startEdit(rowIndex, columnIndex);\r\n    }\r\n\r\n    /**\r\n     * 편집을 종료하고 편집중인 내용이 저장됩니다.\r\n     * 편집이 종료되면 'item-edit-ending', 'item-edit-end' 이벤트가 발생합니다.\r\n     * 'item-edit-ending' 이벤트가 발생할 때, `preventDefault`를 사용하여 편집 종료를 취소할수 있습니다.\r\n     * @returns {boolean}\r\n     */\r\n    endEdit() {\r\n        return this._gridEditor.endEdit();\r\n    }\r\n\r\n    /**\r\n     * 편집을 취소합니다. 편집중인 내용은 저장되지 않습니다.\r\n     * 편집이 취소되면 'item-edit-cancel' 이벤트가 발생합니다.\r\n     * @returns {boolean}\r\n     */\r\n    cancelEdit() {\r\n        return this._gridEditor.cancelEdit();\r\n    }\r\n\r\n    /**\r\n     * 편집중인지 확인합니다.\r\n     * @returns {boolean}\r\n     */\r\n    isEditing() {\r\n        return this._gridEditor.isEditing();\r\n    }\r\n\r\n    /**\r\n     * 편집중인 에디터 정보를 반환합니다.\r\n     * @returns {HTMLElement|null}\r\n     */\r\n    getEditedCell() {\r\n        return this._gridEditor.editedCell;\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //\r\n    //\r\n    //-------------------------------------------------\r\n\r\n    analysisMergeAll() {\r\n        this.dataGroup.analysisMergeAll();\r\n    }\r\n\r\n    /**\r\n     * 전체 병합 영역 바로 분석실행\r\n     */\r\n\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    createHeaderGroup() {\r\n        return new HeaderGroup(this);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    createDataGroup() {\r\n        return new DataGroup(this);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    createCollection(items) {\r\n        return new ArrayList(items);\r\n    }\r\n\r\n    /**\r\n     * 포커스를 설정합니다.\r\n     */\r\n    focus() {\r\n        this.htmlElement.focus();\r\n    }\r\n\r\n    moveCaretUp() {\r\n        return this._internalMoveCaret(this.caretRowIndex - 1, this.caretColumnIndex);\r\n    }\r\n\r\n    moveCaretDown() {\r\n        return this._internalMoveCaret(this.caretRowIndex + 1, this.caretColumnIndex);\r\n    }\r\n\r\n    moveCaretLeft() {\r\n        return this._internalMoveCaret(this.caretRowIndex, this.getPreviousVisibleColumnIndex(this.caretColumnIndex));\r\n    }\r\n\r\n    moveCaretRight() {\r\n        return this._internalMoveCaret(this.caretRowIndex, this.getNextVisibleColumnIndex(this.caretColumnIndex));\r\n    }\r\n\r\n    /**\r\n     * 지정된 셀 위치로 스크롤을 이동합니다.\r\n     * @param rowIndex {number} - 스크롤을 이동하려는 대상 행의 인덱스입니다.\r\n     * @param columnIndex {number} - 스크롤을 이동하려는 대상 열의 인덱스입니다.\r\n     * @param allowSelection {boolean} - 이 값이 `true` 설정되면, 지정된 셀이 선택되고, 기본값은 `false` 입니다.\r\n     */\r\n    scrollToCell(rowIndex, columnIndex, allowSelection = false) {\r\n        this.dataGroup.scrollToCell(rowIndex, columnIndex, allowSelection);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    doLayout() {\r\n        const headerGroup = this._headerGroup;\r\n        const scroller = this._scroller;\r\n\r\n        headerGroup.doLayout(true);\r\n\r\n        const headerHeight = headerGroup.root.offsetHeight;\r\n        const oldHasVScroll = scroller.hasVerticalScroll;\r\n        const oldHasHScroll = scroller.hasHorizontalScroll;\r\n\r\n        scroller.root.style.height = `calc(100% - ${headerHeight}px)`;\r\n        let oldScrollHeight = scroller.root.offsetHeight;\r\n        scroller.doLayout(true);\r\n        let scrollHeight = scroller.root.offsetHeight;\r\n\r\n        //뷰 포트 영역이 변경되면 다시 그리기\r\n        if (oldScrollHeight !== scrollHeight || oldHasVScroll !== scroller.hasVerticalScroll || oldHasHScroll !== scroller.hasHorizontalScroll) {\r\n            scroller.doLayout();\r\n        }\r\n\r\n        this._oldWidth = this.root.offsetWidth;\r\n        this._oldHeight = this.root.offsetHeight;\r\n    }\r\n\r\n\r\n    lockDisplay() {\r\n        this.dataGroup.lockDisplay();\r\n        this.headerGroup.lockDisplay();\r\n    }\r\n\r\n    unlockDisplay() {\r\n        this.dataGroup.unlockDisplay();\r\n        this.headerGroup.unlockDisplay();\r\n    }\r\n\r\n    validateNow() {\r\n        this.dataGroup.validateNow();\r\n        this.headerGroup.validateNow();\r\n    }\r\n\r\n    /**\r\n     * 표시 목록을 갱신을 요청합니다.\r\n     */\r\n    invalidate(reason = Reason.DISPLAY_UPDATE) {\r\n        this.dataGroup.invalidate(reason);\r\n        this.headerGroup.invalidate(reason);\r\n    }\r\n\r\n    /**\r\n     * 대기중인 표시 목록 갱신을 바로 실행합니다.\r\n     */\r\n    flush() {\r\n        this.dataGroup.validateNow();\r\n        this.headerGroup.validateNow();\r\n    }\r\n\r\n    /**\r\n     * 현재 설정된 테마를 적용합니다.\r\n     */\r\n    applyTheme() {\r\n        const theme = get(this.theme);\r\n        if (theme) {\r\n            if (theme.css) {\r\n                addClass(this.root, theme.css);\r\n            }\r\n            this._defaultStyles = mixin({}, defaultConfig.styles, theme.canvasStyle || {});\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 현재 설정된 테마를 해제합니다.\r\n     */\r\n    releaseTheme() {\r\n        const theme = get(this.theme);\r\n        if (theme) {\r\n            if (theme.css) {\r\n                removeClass(this.root, theme.css);\r\n            }\r\n            this._defaultStyles = mixin({}, defaultConfig.styles);\r\n            if (this._theme) {\r\n                this._theme = null;\r\n            }\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 해당 인덱스의 앞 컬럼을 반환합니다.\r\n     * @param index\r\n     * @returns {number}\r\n     */\r\n    getPreviousVisibleColumnIndex(index) {\r\n        const columns = this.normalizedColumns;\r\n        for (let i = index - 1; i >= 0; i--) {\r\n            let column = columns[i];\r\n            if (column.visible) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * 해당 인덱스의 뒤 컬럼을 반환합니다.\r\n     * @param index\r\n     * @returns {number}\r\n     */\r\n    getNextVisibleColumnIndex(index) {\r\n        const columns = this.normalizedColumns;\r\n        for (let i = index + 1, numColumns = columns.length; i < numColumns; i++) {\r\n            let column = columns[i];\r\n            if (column.visible) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    clearHeaderRenderers() {\r\n        this.headerGroup.clearCache();\r\n    }\r\n\r\n\r\n    clearItemRenderers() {\r\n        this.dataGroup.clearCache();\r\n    }\r\n\r\n    mount(container, options = {}) {\r\n        this.root.parentElement?.removeChild(this.root);\r\n        let parent = null;\r\n        if (container instanceof HTMLElement) {\r\n            parent = container;\r\n        } else if (typeof container === 'string') {\r\n            parent = document.querySelector(container);\r\n        }\r\n\r\n        if (parent instanceof HTMLElement) {\r\n            parent.appendChild(this.root);\r\n            this.setOptions(options);\r\n        } else {\r\n            throw new Error(`Invalid container : [${container}]`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setOptions(options) {\r\n        Object.keys(options).sort(prioritySortFunction).forEach(key => {\r\n            let value = options[key];\r\n            if (key === 'options') {\r\n                mixin(this.dataGroup.options, value);\r\n            } else if (key === 'addons') {\r\n                value.keys.forEach(k => {\r\n                    this.addAddon(k, value[k]);\r\n                });\r\n            } else if (key in this) {\r\n                if (key === 'columns' && Array.isArray(value)) {\r\n                    value = value.map((c) => {\r\n                        return c instanceof GridColumn ? c : GridColumn.create(c);\r\n                    });\r\n                }\r\n                this[key] = value;\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n\r\n    destroy() {\r\n        this._sizeDetector.disconnect();\r\n        this.headerGroup.destroy();\r\n        this.dataGroup.destroy();\r\n        this.dataGroup.collection = null;\r\n        this.dataGroup.columnCollection = null;\r\n    }\r\n\r\n    _getFirstVisibleRowIndex() {\r\n        let rowIndices = this.dataGroup.getVisibleRowIndices();\r\n        if (rowIndices && rowIndices.length > 0) {\r\n            const frozenIndexRect = this.dataGroup.getVisibleFrozenIndexRect();\r\n            return rowIndices[frozenIndexRect.top];\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    _styleChanged() {\r\n        this.invalidate(Reason.ALL);\r\n    }\r\n\r\n    _getLastVisibleRowIndex() {\r\n        let rowIndices = this.dataGroup.getVisibleRowIndices();\r\n        if (rowIndices && rowIndices.length > 0) {\r\n            let frozenIndexRect = this.dataGroup.getVisibleFrozenIndexRect(),\r\n                visibleRowIndex = rowIndices[rowIndices.length - frozenIndexRect.bottom - 1];\r\n            return visibleRowIndex;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    _internalMoveCaret(rowIndex, columnIndex, isExtend) {\r\n        if (rowIndex >= 0 && columnIndex >= 0 && rowIndex < this.collection.length && (this.caretRowIndex !== rowIndex || this.caretColumnIndex !== columnIndex)) {\r\n            if (isExtend) {\r\n                this.dataGroup.updateSelection(rowIndex, columnIndex, true);\r\n            } else {\r\n                this.dataGroup.updateSelection(rowIndex, columnIndex, false, false);\r\n            }\r\n            this.scrollToCell(rowIndex, columnIndex, false, false);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _adjustCellNavigation(e) {\r\n        let keyCode = e.keyCode, shiftKey = e.shiftKey; e.ctrlKey; let dataGroup = this.dataGroup,\r\n            isCellSelectionMode = dataGroup.isCellSelectionMode,\r\n            frozenIndexRect = dataGroup.getVisibleFrozenIndexRect(), caretRowIndex = this.caretRowIndex,\r\n            caretColumnIndex = this.caretColumnIndex, numColumns = this.normalizedColumns.length,\r\n            numItems = this.collection.length,\r\n            cell = dataGroup.findMergeCellPosition(caretRowIndex, caretColumnIndex) || new CellPosition(caretRowIndex, caretColumnIndex);\r\n\r\n        switch (keyCode) {\r\n            case 37:\r\n                if (cell.left > 0) {\r\n                    caretColumnIndex = this.getPreviousVisibleColumnIndex(cell.left);\r\n                }\r\n                break;\r\n            case 39:\r\n                if (cell.right + 1 < numColumns) {\r\n                    caretColumnIndex = this.getNextVisibleColumnIndex(cell.right);\r\n                }\r\n                break;\r\n            case 38:\r\n                if (cell.top > 0) {\r\n                    caretRowIndex = cell.top - 1;\r\n                }\r\n                break;\r\n            case 40:\r\n                if (cell.bottom + 1 < numItems) {\r\n                    caretRowIndex = cell.bottom + 1;\r\n                }\r\n                break;\r\n            case 33:\r\n                let firstVisibleRowIndex = this._getFirstVisibleRowIndex();\r\n                if (caretRowIndex > numItems - frozenIndexRect.bottom) {\r\n                    caretRowIndex = numItems - frozenIndexRect.bottom;\r\n                } else if (caretRowIndex > firstVisibleRowIndex) {\r\n                    caretRowIndex = firstVisibleRowIndex;\r\n                } else {\r\n                    this.scrollTop -= this.scrollTop + dataGroup.clientHeight - (dataGroup.getRowY(caretRowIndex) + dataGroup.getRowHeight(caretRowIndex));\r\n                    caretRowIndex = this._getFirstVisibleRowIndex();\r\n                }\r\n                break;\r\n            case 34:\r\n                let lastVisibleRowIndex = this._getLastVisibleRowIndex();\r\n                if (caretRowIndex < frozenIndexRect.top && caretRowIndex < numItems) {\r\n                    caretRowIndex = frozenIndexRect.top;\r\n                } else if (caretRowIndex < lastVisibleRowIndex) {\r\n                    caretRowIndex = lastVisibleRowIndex;\r\n                } else {\r\n                    this.scrollTop = dataGroup.getRowY(caretRowIndex);\r\n                    caretRowIndex = this._getLastVisibleRowIndex();\r\n                }\r\n                break;\r\n            case 35://end\r\n                caretRowIndex = numItems - 1;\r\n                caretColumnIndex = isCellSelectionMode ? this.getPreviousVisibleColumnIndex(numColumns) : 0;\r\n                break;\r\n            case 36://home\r\n                caretRowIndex = 0;\r\n                caretColumnIndex = isCellSelectionMode ? this.getNextVisibleColumnIndex(-1) : 0;\r\n                break;\r\n        }\r\n\r\n        this._internalMoveCaret(caretRowIndex, caretColumnIndex, shiftKey);\r\n    }\r\n\r\n    _calculateDragScrollDelta(point) {\r\n        let SCROLL_DELTA = 10;\r\n        let dataGroup = this.dataGroup;\r\n        let sizeRect = dataGroup.getVisibleFrozenSizeRect(), hsp = this.scrollLeft, vsp = this.scrollTop,\r\n            delta = new Point();\r\n\r\n        if (point.x < hsp + sizeRect.left) {\r\n            delta.x = -SCROLL_DELTA;\r\n        } else if (point.x > hsp + dataGroup.clientWidth - sizeRect.right) {\r\n            delta.x = SCROLL_DELTA;\r\n        }\r\n\r\n        if (point.y < vsp + sizeRect.top) {\r\n            delta.y = -SCROLL_DELTA;\r\n        } else if (point.y > vsp + dataGroup.clientHeight - sizeRect.bottom) {\r\n            delta.y = SCROLL_DELTA;\r\n        }\r\n\r\n        return delta;\r\n    }\r\n\r\n    _startDragScrolling(delta, callback) {\r\n        this._dragScrollDelta = delta;\r\n        if (this._dragScrollId < 0) {\r\n            let scrollFunc = () => {\r\n                let oldHSP = this.scrollLeft;\r\n                let oldVSP = this.scrollTop;\r\n                this.scrollLeft += this._dragScrollDelta.x;\r\n                this.scrollTop += this._dragScrollDelta.y;\r\n                if (this.scrollLeft !== oldHSP || this.scrollTop !== oldVSP) {\r\n                    callback();\r\n                }\r\n                this._dragScrollId = window.requestAnimationFrame(scrollFunc);\r\n            };\r\n            scrollFunc();\r\n        }\r\n    }\r\n\r\n    _stopDragScrolling() {\r\n        if (this._dragScrollId > 0) {\r\n            window.cancelAnimationFrame(this._dragScrollId);\r\n            this._dragScrollId = -1;\r\n        }\r\n    }\r\n\r\n    _showOverlay() {\r\n        if (!this._overlayGroup) {\r\n            let group = document.createElement('div');\r\n            addClass(group, 'tachyon-group-overlay');\r\n            this.appendChild(group);\r\n            this._overlayGroup = group;\r\n        }\r\n    }\r\n\r\n    _hideOverlay() {\r\n        if (this._overlayGroup) {\r\n            this.removeChild(this._overlayGroup);\r\n            this._overlayGroup = null;\r\n        }\r\n    }\r\n\r\n    _showHeaderDropIndicator(columnIndex) {\r\n        if (this._overlayGroup) {\r\n            const DRAG_HEADER_INDICATOR_WIDTH = 10;\r\n            const dataGroup = this.dataGroup;\r\n\r\n            let indicator = this._dropHeaderIndicator;\r\n            if (!indicator) {\r\n                indicator = this._dropHeaderIndicator = document.createElement('div');\r\n                indicator.style.position = 'absolute';\r\n                indicator.style.zIndex = '9999';\r\n                addClass(indicator, 'tachyon-header-drag');\r\n                setSize(indicator, DRAG_HEADER_INDICATOR_WIDTH, dataGroup.clientHeight);\r\n\r\n                this._overlayGroup.appendChild(indicator);\r\n            } else {\r\n                indicator.removeAttribute('hidden');\r\n            }\r\n\r\n            let columnX = null;\r\n            if (columnIndex >= this.normalizedColumns.length) {\r\n                columnX = Math.round(Math.min(dataGroup.clientWidth, dataGroup.contentWidth) - DRAG_HEADER_INDICATOR_WIDTH / 2);\r\n            } else {\r\n                let columnLayout = dataGroup.getColumnLayout(columnIndex);\r\n                if (columnLayout) {\r\n                    columnX = Math.round(columnLayout.dx - DRAG_HEADER_INDICATOR_WIDTH / 2);\r\n                }\r\n            }\r\n            if (columnX != null) {\r\n                setPosition(indicator, columnX, this._headerGroup.clientHeight);\r\n            } else {\r\n                this._hideHeaderDropIndicator();\r\n            }\r\n        }\r\n    }\r\n\r\n    _hideHeaderDropIndicator(destroy) {\r\n        let indicator = this._dropHeaderIndicator;\r\n        if (indicator) {\r\n            if (destroy) {\r\n                if (indicator.parentElement) {\r\n                    indicator.parentElement.removeChild(indicator);\r\n                }\r\n                this._dropHeaderIndicator = null;\r\n            } else {\r\n                indicator.setAttribute('hidden', 'hidden');\r\n            }\r\n        }\r\n    }\r\n\r\n    _startColumnDragDrop(event) {\r\n\r\n        let detail = event.detail;\r\n        let column = detail.column;\r\n        let group = this._headerGroup;\r\n        let renderer = group._createRenderer(column);\r\n        let htmlElement = renderer.htmlElement;\r\n        let layer = new RendererLayer('renderer');\r\n        let layout = group.getHeaderLayout(column);\r\n\r\n        this._overlayGroup.appendChild(layer.root);\r\n\r\n        layer.setSize(layout.width, layout.height);\r\n        layer.updateLayout(0, 0, layout.width, layout.height, layout.width, layout.height);\r\n        layer.begin();\r\n\r\n        if (htmlElement) {\r\n            layer.addOverlayElement(htmlElement);\r\n            addClass(htmlElement, 'header-cell');\r\n            addClass(htmlElement, 'header-cell-dragging');\r\n            setSize(htmlElement, layout.width, layout.height);\r\n        }\r\n\r\n        if (renderer.prepare) {\r\n            renderer.prepare(this, {\r\n                renderer: renderer, item: column, column: column, label: column.headerText\r\n            });\r\n        }\r\n\r\n        layer.end();\r\n\r\n        return {\r\n            dragElement: layer,\r\n            renderer: renderer,\r\n            column: column,\r\n            columnPoint: new Point(layout.dx, layout.dy),\r\n            clientPoint: new Point(detail.trigger.clientX, detail.trigger.clientY)\r\n        }\r\n    }\r\n\r\n    _updateColumnDragDrop(event) {\r\n\r\n        let detail = event.detail;\r\n        let mouseEvent = detail.trigger;\r\n        let column = detail.column;\r\n        let dataGroup = this.dataGroup;\r\n        let info = this._dragColumnInfo;\r\n\r\n        let xx = info.columnPoint.x + mouseEvent.clientX - info.clientPoint.x;\r\n        setPosition(info.dragElement, xx, info.columnPoint.y);\r\n\r\n        let cursorPoint = dataGroup._mouseEventToContent(mouseEvent);\r\n        let overLeafColumnIndex = Math.min(dataGroup.getColumnIndexByDistance(cursorPoint.x), this.normalizedColumns.length - 1);\r\n        let overLeafColumn = dataGroup.getColumnAt(overLeafColumnIndex);\r\n        let isNextColumn = (dataGroup.getColumnWidth(overLeafColumnIndex) / 2) < (cursorPoint.x - dataGroup.getColumnX(overLeafColumnIndex));\r\n        let insertColumnIndex = overLeafColumnIndex;\r\n\r\n        if (isNextColumn) {\r\n            if (overLeafColumnIndex >= this.normalizedColumns.length - 1) {\r\n                insertColumnIndex = this.normalizedColumns.length;\r\n            } else {\r\n                insertColumnIndex = this.getNextVisibleColumnIndex(overLeafColumnIndex);\r\n            }\r\n        }\r\n\r\n        if (!isValidDropColumn(column, overLeafColumn, isNextColumn)) {\r\n            insertColumnIndex = -1;\r\n        }\r\n\r\n        if (insertColumnIndex >= 0) {\r\n            this._showHeaderDropIndicator(insertColumnIndex);\r\n        } else {\r\n            this._hideHeaderDropIndicator();\r\n        }\r\n\r\n        return insertColumnIndex >= 0 ? {\r\n            overLeafColumn: overLeafColumn, moveIndex: insertColumnIndex, isNext: isNextColumn\r\n        } : null;\r\n    }\r\n\r\n    _cancelColumnDragDrop() {\r\n        this._destroyColumnDragDrop();\r\n        this._dragCanceled = true;\r\n    }\r\n\r\n    _destroyColumnDragDrop() {\r\n        this._dragColumnInfo = null;\r\n        this._dropColumnInfo = null;\r\n        this._dragCanceled = false;\r\n\r\n        this._hideHeaderDropIndicator(true);\r\n        this._hideOverlay();\r\n        this._stopDragScrolling();\r\n    }\r\n\r\n    _dispatchSortEvent(type, column, trigger) {\r\n        return this.dispatchEvent(new CustomEvent(type, {\r\n            detail: {\r\n                column: column, trigger: trigger\r\n            }\r\n        }));\r\n    }\r\n\r\n    _redispatch(event) {\r\n        let canceled = !this.dispatchEvent(new CustomEvent(event.type, {\r\n            bubbles: event.bubbles, cancelable: event.cancelable, detail: event.detail\r\n        }));\r\n\r\n        if (canceled) {\r\n            event.preventDefault();\r\n        }\r\n    };\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Event Handler\r\n    //\r\n    //-------------------------------------------------\r\n\r\n    _onResize(event) {\r\n        if (this.root.offsetWidth !== this._oldWidth || this.root.offsetHeight !== this._oldHeight) {\r\n            this.doLayout();\r\n        }\r\n    }\r\n\r\n    _onHeaderEvents(event) {\r\n        const column = event.detail.column;\r\n        const mouseEvent = event.detail.trigger;\r\n        switch (event.type) {\r\n            case 'header-drag':\r\n                if (this.draggableColumns && column.draggable && !this._dragCanceled) {\r\n                    this._showOverlay();\r\n                    this._stopDragScrolling();\r\n\r\n                    if (!this._dragColumnInfo) {\r\n                        this._dragColumnInfo = this._startColumnDragDrop(event);\r\n                        this._dropColumnInfo = this._updateColumnDragDrop(event);\r\n\r\n                    } else {\r\n                        const point = this.dataGroup._mouseEventToContent(mouseEvent);\r\n                        const delta = this._calculateDragScrollDelta(point);\r\n                        delta.y = 0;\r\n\r\n                        this._dropColumnInfo = this._updateColumnDragDrop(event);\r\n                        this._startDragScrolling(delta, () => {\r\n                            this._dropColumnInfo = this._updateColumnDragDrop(event);\r\n                        });\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case 'header-up':\r\n                if (this.draggableColumns) {\r\n                    if (this._dropColumnInfo) {\r\n                        const isNext = this._dropColumnInfo.isNext;\r\n                        const dragColumn = this._dragColumnInfo.column;\r\n                        const parentColumn = dragColumn.parent;\r\n                        const children = parentColumn ? parentColumn.children : this.columns;\r\n\r\n                        //컬럼 그룹일때(부모가 같은 컬럼만) 드랍가능\r\n                        let dropColumn = null;\r\n                        let active = this._dropColumnInfo.overLeafColumn;\r\n                        while (active) {\r\n                            if (parentColumn === active.parent) {\r\n                                dropColumn = active;\r\n                                break;\r\n                            }\r\n                            active = active.parent;\r\n                        }\r\n\r\n                        if (dropColumn && dropColumn !== dragColumn) {\r\n                            let currentIndex = children.indexOf(dragColumn);\r\n                            let insertIndex = Math.max(0, children.indexOf(dropColumn) + (isNext ? 1 : 0));\r\n                            if (currentIndex !== insertIndex) {\r\n                                if (currentIndex < insertIndex) {\r\n                                    insertIndex -= 1;\r\n                                }\r\n\r\n                                if (this.moveColumn(dragColumn, parentColumn, insertIndex)) {\r\n                                    this.validateNow();\r\n                                    this.dispatchEvent(new CustomEvent('header-drop', {\r\n                                        cancelable: true, detail: {\r\n                                            column: dragColumn,\r\n                                            parent: parentColumn,\r\n                                            toParent: parentColumn,\r\n                                            toIndex: insertIndex,\r\n                                            trigger: event\r\n                                        }\r\n                                    }));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this._destroyColumnDragDrop();\r\n                }\r\n                break;\r\n\r\n            case 'header-click':\r\n                if (!this.isHeaderDragging && this.sortableColumns && column.sortable && this.normalizedColumns.indexOf(column) >= 0) {\r\n                    if (this._dispatchSortEvent('sort-changing', column)) {\r\n                        let multiple = (mouseEvent.shiftKey || mouseEvent.ctrlKey),\r\n                            isReverseSort = this._sortColumns.indexOf(column) >= 0, sortColumns;\r\n\r\n                        if (multiple && this.multiSortable) {\r\n                            sortColumns = this._sortColumns.slice(0);\r\n                            if (!isReverseSort) {\r\n                                sortColumns.push(column);\r\n                            }\r\n                        } else {\r\n                            sortColumns = [column];\r\n                        }\r\n\r\n                        let oldSortDescending = column.sortDescending;\r\n                        if (isReverseSort) {\r\n                            column.sortDescending = !column.sortDescending;\r\n                        }\r\n\r\n                        if (oldSortDescending) {\r\n                            sortColumns.splice(sortColumns.indexOf(column), 1);\r\n                        }\r\n\r\n                        this.sortByColumns(sortColumns);\r\n                        this._dispatchSortEvent('sort-change', column);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    _onHeaderSeparatorEvents(e) {\r\n        let headerGroup = this._headerGroup, column = e.detail.column, mouseEvent = e.detail.trigger;\r\n        if (this.resizableColumns && column.resizable) {\r\n            switch (e.type) {\r\n                case 'separator-over' :\r\n                    headerGroup.style.cursor = 'col-resize';\r\n                    break;\r\n                case 'separator-out' :\r\n                    headerGroup.style.cursor = '';\r\n                    break;\r\n                case 'separator-down' :\r\n                    this._showOverlay();\r\n                    //this._overlapGroup.style.cursor = 'col-resize';\r\n                    this._resizeColumn = column;\r\n                    this._resizeColumnWidth = this.dataGroup.getColumnWidth(column.index);\r\n                    this._resizeAnchorPoint = new Point(mouseEvent.clientX, mouseEvent.clientY);\r\n\r\n                    break;\r\n                case 'separator-drag' :\r\n                    this.setColumnWidth(column.index, Math.max(this._resizeColumnWidth + mouseEvent.clientX - this._resizeAnchorPoint.x, column.minWidth));\r\n                    break;\r\n                case 'separator-up' :\r\n                    this._hideOverlay();\r\n                    this._resizeColumn = null;\r\n                    this._resizeColumnWidth = -1;\r\n                    this._resizeAnchorPoint = null;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dataGroup item-down 이벤트 핸들러\r\n     * 아이템 드래그 및 아이템 드래그 선택 처리\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onItemDown(event) {\r\n        if (!this.selectOnDrag || !this.dataGroup.isMultipleSelectionMode) {\r\n            return;\r\n        }\r\n\r\n        const dataGroup = this.dataGroup;\r\n        const startRowIndex = event.detail.rowIndex;\r\n        const startColumnIndex = event.detail.columnIndex;\r\n\r\n        let oldRowIndex = startRowIndex;\r\n        let oldColumnIndex = startColumnIndex;\r\n        let isDragStart = false;\r\n\r\n        const updateSelection = (rowIndex, columnIndex) => {\r\n            if (oldRowIndex !== rowIndex || oldColumnIndex !== columnIndex) {\r\n                dataGroup.updateSelection(rowIndex, columnIndex, true);\r\n                oldRowIndex = rowIndex;\r\n                oldColumnIndex = columnIndex;\r\n            }\r\n        };\r\n\r\n        let moveEvent;\r\n        const onItemEvent = (e) => {\r\n            const {rowIndex, columnIndex, trigger} = e.detail;\r\n            moveEvent = trigger;\r\n            if (!isDragStart) {\r\n                this.dispatchEvent(new CustomEvent('selection-drag-start', {\r\n                    cancelable: true, detail: {\r\n                        cell: new CellPosition(startRowIndex, startColumnIndex), trigger: e\r\n                    }\r\n                }));\r\n                isDragStart = true;\r\n            } else {\r\n                const point = dataGroup._mouseEventToContent(moveEvent);\r\n                const delta = this._calculateDragScrollDelta(point);\r\n                if (delta && delta.length > 0) {\r\n                    this._startDragScrolling(delta, () => {\r\n                        const point = dataGroup._mouseEventToContent(moveEvent);\r\n                        const rowIndex = dataGroup.getRowIndexByDistance(point.y);\r\n                        const columnIndex = dataGroup.getColumnIndexByDistance(point.x);\r\n                        updateSelection(rowIndex, columnIndex);\r\n                    });\r\n                } else {\r\n                    this._stopDragScrolling();\r\n                }\r\n            }\r\n\r\n            updateSelection(rowIndex, columnIndex);\r\n\r\n            if (e.type === 'item-up') {\r\n                this._stopDragScrolling();\r\n                dataGroup.removeEventListener('item-drag', onItemEvent);\r\n                dataGroup.removeEventListener('item-up', onItemEvent);\r\n                this.dispatchEvent(new CustomEvent('selection-drag-end', {\r\n                    cancelable: true, detail: {\r\n                        cell: new CellPosition(startRowIndex, startColumnIndex, rowIndex, columnIndex), trigger: e\r\n                    }\r\n                }));\r\n            }\r\n        };\r\n        dataGroup.addEventListener('item-drag', onItemEvent);\r\n        dataGroup.addEventListener('item-up', onItemEvent);\r\n    }\r\n\r\n    _onKeyDown(event) {\r\n        if (event.defaultPrevented || this.isEditing()) {\r\n            return;\r\n        }\r\n\r\n        if (event.keyCode === 27) {\r\n            if (this.isHeaderDragging) {\r\n                this._cancelColumnDragDrop();\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (event.ctrlKey) {\r\n            if (this.selectedCell) {\r\n                switch (event.keyCode) {\r\n                    case 67:\r\n                        const cell = this.dataGroup.getSingleCell();\r\n                        if (cell) {\r\n                            copy(toTable(this, cell));\r\n                        }\r\n                        return;\r\n                    case 86:\r\n                        if (this.editable && this.pasteFromClipboard && !isEditableNode(event.target)) {\r\n                            paste()\r\n                                .then(value => {\r\n                                    const rows = parseFromExcel(value);\r\n                                    const numRows = rows.length;\r\n\r\n                                    const columns = this.normalizedColumns;\r\n                                    const collection = this.collection;\r\n                                    const anchorRowIndex = this.caretRowIndex;\r\n                                    const anchorColumnIndex = this.caretColumnIndex;\r\n\r\n                                    for (let i = 0; i < numRows; i++) {\r\n                                        let rowIndex = i + anchorRowIndex;\r\n                                        let columnIndex = anchorColumnIndex;\r\n                                        let values = rows[i];\r\n                                        for (let j = 0, numValues = values.length; j < numValues && columnIndex >= 0; j++) {\r\n                                            let column = columns[columnIndex];\r\n                                            if (column.editable) {\r\n                                                collection.setValue(rowIndex, column.dataFieldPath, values[j]);\r\n                                            }\r\n                                            columnIndex = this.getNextVisibleColumnIndex(columnIndex);\r\n                                        }\r\n                                    }\r\n                                    this.invalidate();\r\n                                });\r\n                        }\r\n                        return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.collection && this.collection.length > 0) {\r\n            this._adjustCellNavigation(event);\r\n        }\r\n    }\r\n\r\n    static create(container, options) {\r\n        return new this().mount(container, options);\r\n    }\r\n}\r\n\r\nDataGrid.withDom('<div class=\"tachyon-grid\" tabindex=\"-1\"></div>').withBehavior(Styleable, Filterable);\n\nconst HIERARCHY_NODE_EVENTS = ['node-change'];\r\n\r\nclass TreeGroup extends DataGroup {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this._boundTreeNodeListener = this._onTreeNodeChange.bind(this);\r\n        this._crossDimension = [];\r\n        this._maxNodeLevel = [];\r\n        this._treeColumns = [];\r\n        this._autoExpandLevel = 0;\r\n    }\r\n\r\n    get autoExpandLevel() {\r\n        return this._autoExpandLevel;\r\n    }\r\n\r\n    set autoExpandLevel(value) {\r\n        this._autoExpandLevel = value;\r\n    }\r\n\r\n    get collection() {\r\n        return super.collection;\r\n    }\r\n\r\n    set collection(value) {\r\n        if (this.collection) {\r\n            HIERARCHY_NODE_EVENTS.forEach(\r\n                type => this.collection.removeEventListener(type,\r\n                    this._boundTreeNodeListener));\r\n        }\r\n        super.collection = value;\r\n        if (this.collection) {\r\n            HIERARCHY_NODE_EVENTS.forEach(\r\n                type => this.collection.addEventListener(type,\r\n                    this._boundTreeNodeListener));\r\n        }\r\n    }\r\n\r\n    _itemToTemplate(item, column, cell) {\r\n        if (cell.isCrossed) {\r\n            return nullItemRenderer;\r\n        }\r\n        const template = super._itemToTemplate(item, column, cell);\r\n        if (column instanceof TreeGridColumn && !column.boxMode && template === defaultItemRenderer) {\r\n            return defaultTreeItemRenderer;\r\n        }\r\n        return template;\r\n    }\r\n\r\n    _setupCell(cell, item, column, cellPosition) {\r\n        cell = super._setupCell(cell, item, column, cellPosition);\r\n        if (column instanceof TreeGridColumn) {\r\n            cell.hasChildren = this.collection.hasChildren(item);\r\n            cell.level = this.collection.getNodeLevel(item);\r\n            cell.isOpened = this.collection.isOpenNode(item);\r\n            cell.isLeaf = !this.hasChildren;\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    /**\r\n     * 교차셀 표현하기 위한  컬럼 생성\r\n     * @private\r\n     */\r\n    _resetCrossCells() {\r\n        if (!this.collection || !this.columnCollection) {\r\n            return;\r\n        }\r\n        const treeColumns = this._treeColumns = this.columnCollection.find(column => column instanceof TreeGridColumn && column.boxMode);\r\n        this._maxNodeLevel = 0;\r\n        if (treeColumns.length > 0) {\r\n            //최대 레벨 구함\r\n            //데이타 많을 경우 성능 !!!.\r\n            this._maxNodeLevel = this.collection.getNodeDepth(null) - 1;\r\n        }\r\n\r\n        this._crossDimension = [];\r\n\r\n        //레벨 별 컬럼생성\r\n        treeColumns.forEach(column => {\r\n            this._createChildColumns(column, this._maxNodeLevel);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 크로스 셀 생성(행기준으로 )\r\n     * @param maxLevel\r\n     * @param column\r\n     * @param item\r\n     * @param columnIndex\r\n     * @param itemIndex\r\n     * @returns {CrossCellPosition}\r\n     * @private\r\n     */\r\n    _createCrossCellPosition(maxLevel, column, item, columnIndex, itemIndex) {\r\n        const level = this.collection.getNodeLevel(item);\r\n\r\n        const sc = columnIndex + level;\r\n        const ec = columnIndex + maxLevel;\r\n\r\n        const children = this.collection.getDisplayableChildren(item);\r\n        const cell = new CrossCellPosition(itemIndex, sc, itemIndex, ec);\r\n\r\n        if (children.length > 0) {\r\n            cell.crossCellPositions = [new CellPosition(itemIndex, sc, itemIndex + children.length, sc, true)];\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    _createChildColumns(column, level) {\r\n        const collection = this.grid.columnCollection;\r\n        const oldChildren = collection.getChildren(column);\r\n        const columnWidth = column.width;\r\n\r\n        if (!column.boxMode) {\r\n            collection.removeNodes(column, oldChildren);\r\n        } else {\r\n            const removed = oldChildren.slice(level + 1);\r\n            if (removed.length > 0) {\r\n                collection.removeNodes(column, removed);\r\n            }\r\n            const indent = column.indent;\r\n            const children = [];\r\n            for (let i = 0; i <= level; i++) {\r\n                let child = oldChildren[i];\r\n                if (!child) {\r\n                    child = new ChildColumn(column);\r\n                    child.minWidth = indent;\r\n                    children.push(child);\r\n                }\r\n\r\n                if (i === level) {\r\n                    child.width = !!columnWidth ? Math.max(columnWidth - (indent * level), indent) : undefined;\r\n                } else {\r\n                    child.width = indent;\r\n                }\r\n            }\r\n            if (children.length > 0) {\r\n                collection.addNodes(column, children);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 해당 items 기준으로 크로스 셀 추가\r\n     * @param index\r\n     * @param items\r\n     * @private\r\n     */\r\n    _addCrossCells(index, items) {\r\n        if (!this._treeColumns.length) {\r\n            return;\r\n        }\r\n        const numItems = items.length;\r\n        const columns = this.normalizedColumns;\r\n        const cacheIndex = {};\r\n\r\n        if (this._crossDimension.length > 0) {\r\n            Array.prototype.splice.apply(this._crossDimension, [index, 0].concat(new Array(numItems)));\r\n        }\r\n\r\n        const updateCallback = cell => {\r\n            cell.crossCellPositions.forEach(cp => {\r\n                if (index >= cp.rowIndex && index < cp.endRowIndex) {\r\n                    cp.height += numItems;\r\n                } else if (index < cp.rowIndex) {\r\n                    cp.y += numItems;\r\n                }\r\n            });\r\n        };\r\n\r\n        this._crossDimension.forEach(cells => cells && cells.forEach(updateCallback));\r\n\r\n        const createCallback = index => {\r\n            const item = this.collection.get(index);\r\n            for (let p in this._treeColumns) {\r\n                const column = this._treeColumns[p];\r\n                let columnIndex = cacheIndex[p];\r\n                if (columnIndex === undefined) {\r\n                    //최소 자식 개수는 1개 이상이다.\r\n                    columnIndex = cacheIndex[p] = columns.indexOf(column.children[0]);\r\n                }\r\n\r\n                const cellPosition = this._createCrossCellPosition(this._maxNodeLevel, column, item, columnIndex, index);\r\n                this.addMergeCellPosition(cellPosition);\r\n\r\n                let crossCellPositions = this._crossDimension[index];\r\n                if (!crossCellPositions) {\r\n                    crossCellPositions = this._crossDimension[index] = [];\r\n                }\r\n                crossCellPositions[columnIndex] = cellPosition;\r\n            }\r\n        };\r\n\r\n        this.collection.getAncestorNodes(items[0]).forEach(node => createCallback(this.collection.indexOf(node)));\r\n        //생성\r\n        items.forEach((item, i) => createCallback(index + i));\r\n    }\r\n\r\n    /**\r\n     * 크로셀 삭제\r\n     * @param index\r\n     * @param items\r\n     * @private\r\n     */\r\n    _removeCrossCells(index, items) {\r\n        const numItems = items.length;\r\n        this._crossDimension.splice(index, numItems);\r\n        const callback = (cell) => {\r\n            cell.crossCellPositions = cell.crossCellPositions.filter(c => {\r\n                if (index >= c.rowIndex && index <= c.endRowIndex) {\r\n                    c.height -= Math.min(numItems, c.endRowIndex - index + 1);\r\n                    return c.height > 0;\r\n                } else if (index < c.rowIndex) {\r\n                    c.y -= numItems;\r\n                }\r\n                return true;\r\n            });\r\n        };\r\n        this._crossDimension.forEach(cells => cells.forEach(callback));\r\n    }\r\n\r\n    _onColumnCollectionChange(event) {\r\n\r\n        const kind = event.detail.kind;\r\n        const isReset = kind === 'reset' || kind === 'refresh';\r\n        if (this.collection && isReset) {\r\n            this._resetCrossCells();\r\n            super._onColumnCollectionChange(event);\r\n            this._addCrossCells(0, this.collection.toArray());\r\n        } else {\r\n            super._onColumnCollectionChange(event);\r\n        }\r\n    }\r\n\r\n    _onCollectionChange(event) {\r\n        if (this._isBlockCollectionChange) {\r\n            return;\r\n        }\r\n        const collection = this.collection;\r\n        const detail = event.detail;\r\n        const kind = detail.kind;\r\n\r\n        if (kind === 'reset' && this.autoExpandLevel > 0) {\r\n            this._isBlockCollectionChange = true;\r\n            collection.openNodes(collection.find(node => collection.getNodeLevel(node) < this.autoExpandLevel));\r\n            this._isBlockCollectionChange = false;\r\n        }\r\n\r\n        super._onCollectionChange(event, false);\r\n\r\n        switch (kind) {\r\n            case 'reset':\r\n            case 'refresh':\r\n                this._resetCrossCells();\r\n                this._addCrossCells(0, this.collection.toArray());\r\n                break;\r\n            case 'add':\r\n                this._addCrossCells(detail.index, detail.items);\r\n                break;\r\n            case 'remove':\r\n                this._removeCrossCells(detail.index, detail.items);\r\n                break;\r\n        }\r\n\r\n        this.dispatchEvent(new CustomEvent(event.type, {\r\n            bubbles: event.bubbles,\r\n            cancelable: event.cancelable,\r\n            detail: event.detail,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onTreeNodeChange(event) {\r\n        const {type, cancelable, detail} = event;\r\n        const nodeEvent = new CustomEvent(type, {\r\n            cancelable: cancelable,\r\n            detail: detail,\r\n        });\r\n\r\n        this.dispatchEvent(nodeEvent);\r\n\r\n        if (nodeEvent.defaultPrevented) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        switch (detail.kind) {\r\n            case 'expand':\r\n            case 'collapse':\r\n            case 'add':\r\n            case 'remove':\r\n            case 'move':\r\n                this.invalidate();\r\n                break;\r\n        }\r\n    }\r\n}\n\nclass TreeGrid extends DataGrid {\r\n    constructor() {\r\n        super();\r\n        this._childrenField = 'children';\r\n        const boundHierarchyNodeListener = event => this._redispatch(event);\r\n        HIERARCHY_NODE_EVENTS.forEach(type => this.dataGroup.addEventListener(type, boundHierarchyNodeListener));\r\n    }\r\n\r\n\r\n    get childrenField() {\r\n        return this._childrenField;\r\n    }\r\n\r\n    set childrenField(v) {\r\n        if (this._childrenField !== v) {\r\n            this._childrenField = v;\r\n            if (this.collection) {\r\n                this.collection.childrenField = v;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    get autoExpandLevel() {\r\n        return this.dataGroup.autoExpandLevel;\r\n    }\r\n\r\n    set autoExpandLevel(value) {\r\n        this.dataGroup.autoExpandLevel = value;\r\n    }\r\n\r\n    createDataGroup() {\r\n        return new TreeGroup(this);\r\n    }\r\n\r\n    createCollection(items) {\r\n        const list = new HierarchyList(items);\r\n        list.childrenField = this.childrenField;\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드의 부모 노드를 반환합니다.\r\n     */\r\n    getParentNode(node) {\r\n        return this.collection && this.collection.getParentNode(node);\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드의 자식노드들을 반환합니다.\r\n     * @param node 부모 노드입니다.\r\n     */\r\n    getChildren(node) {\r\n        return this.collection && this.collection.getChildren(node);\r\n    }\r\n\r\n    getDisplayableChildren(node) {\r\n        return this.collection && this.collection.getDisplayableChildren(node);\r\n    }\r\n\r\n    /**\r\n     * 해당 노드에 자식이 있는지 여부입니다.\r\n     */\r\n    hasChildren(node) {\r\n        return this.collection && this.collection.hasChildren(node);\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param node 추가할 자식 노드\r\n     *\r\n     */\r\n    addNode(parent, node) {\r\n        return this.collection && this.collection.addNode(parent, node);\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param node 추가할 자식 노드.\r\n     * @param index 자식 노드 삽입 위치의 인덱스.\r\n     */\r\n    addNodeAt(parent, node, index) {\r\n        return this.collection && this.collection.addNodeAt(parent, node, index);\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param nodes 추가할 자식 노드 목록\r\n     *\r\n     */\r\n    addNodes(parent, nodes) {\r\n        return this.collection && this.collection.addNodes(parent, nodes);\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 노드목록을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param nodes 추가할 자식 노드 목록\r\n     * @param index 자식 노드 삽입 위치의 인덱스.\r\n     */\r\n    addNodesAt(parent, nodes, index) {\r\n        return this.collection && this.collection.addNodesAt(parent, nodes, index);\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에서 자식 노드를 삭제합니다.\r\n     * @param parent 부모 노드입니다.\r\n     * @param node 삭제할 자식 노드 입니다.\r\n     */\r\n    removeNode(parent, node) {\r\n        return this.collection && this.collection.removeNode(parent, node);\r\n    }\r\n\r\n    /**\r\n     * 해당 node가 있는지 확인합니다.\r\n     * @param node\r\n     * @return 있으면 true,\r\n     */\r\n    contains(node) {\r\n        return this.collection && this.collection.contains(node);\r\n    }\r\n\r\n    /**\r\n     *    해당 노드가 확장되어 있는지 여부입니다.\r\n     */\r\n    isOpenNode(node) {\r\n        return this.collection && this.collection.isOpenNode(node);\r\n    }\r\n\r\n    /**\r\n     * 해당 노느가 출력된 노드인지 확인합니다.\r\n     * @param node\r\n     * @return\r\n     */\r\n    isDisplayableNode(node) {\r\n        return this.collection && this.collection.isDisplayableNode(node);\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드를 확장합니다.\r\n     */\r\n    openNode(node) {\r\n        return this.collection && this.collection.openNode(node);\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드를 축소합니다.\r\n     */\r\n    closeNode(node) {\r\n        return this.collection && this.collection.closeNode(node);\r\n    }\r\n\r\n    /**\r\n     * 노드 배열을 확장합니다.\r\n     * @param nodes\r\n     */\r\n    openNodes(nodes) {\r\n        return this.collection && this.collection.openNodes(nodes);\r\n    }\r\n\r\n    /**\r\n     * 확장되어있는 노드목록을 반환합니다.\r\n     * @returns {Array}\r\n     */\r\n    getOpenedNodes() {\r\n        return this.collection && this.collection.getOpenedNodes();\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드의 레벨을 반환합니다.\r\n     */\r\n    getNodeLevel(node) {\r\n        return this.collection && this.collection.getNodeLevel(node);\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 탐색합니다.\r\n     * 지정된 함수(callBack)에 대해 true를 반환하는 모든 항목이 포함된 새 배열을 만듭니다\r\n     * @param callback  function callback(node, parent, children)\r\n     * @param prefetchNode 시작 기준 노드입니다. 지정되지 않으면 루트노드를 기준으로 합니다.\r\n     * @param postOrder true 이면 후위탐색, false 이면 전위탐색\r\n     * @return true를 반환하는 항목의 배열입니다.\r\n     */\r\n    find(callback, prefetchNode, postOrder) {\r\n        return this.collection && this.collection.find(callback, prefetchNode, postOrder);\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 탐색합니다.\r\n     * 지정된 함수(callBack)에 대해 처음으로 true를 반환하는 항목을 반환하고 탐색을 중지합니다.\r\n     * @param callback  function callback(node, parent, children)\r\n     * @param prefetchNode 시작 기준 노드입니다. 지정되지 않으면 루트노드를 기준으로 합니다.\r\n     * @param postOrder true 이면 후위탐색, false 이면 전위탐색\r\n     * @return 처음으로 true를 반환하는 항목입니다.\r\n     */\r\n    findOne(callback, prefetchNode, postOrder) {\r\n        return this.collection && this.collection.findOne(callback, prefetchNode, postOrder);\r\n    }\r\n\r\n\r\n    /**\r\n     * 지정된 노드를 확장합니다.\r\n     */\r\n    expandNode(node) {\r\n        return this.collection && this.collection.openNode(node);\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드를 축소합니다.\r\n     */\r\n    collapseNode(node) {\r\n        return this.collection && this.collection.closeNode(node);\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 확장합니다.\r\n     */\r\n    expandAll() {\r\n        this.collection && this.collection.expandAll();\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 축소합니다.\r\n     */\r\n    collapseAll() {\r\n        this.collection && this.collection.collapseAll();\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드가 확장되어 있으면 축소하고 축소되어 있으면 확장합니다.\r\n     */\r\n    toggleNode(node) {\r\n        if (this.isOpenNode(node)) {\r\n            this.closeNode(node);\r\n        } else {\r\n            this.openNode(node);\r\n        }\r\n    }\r\n}\n\nfunction tachyon(config) {\n    if (config) {\n        mixin(defaultConfig, config);\n    }\n}\nconst version = '__VERSION__';\n\nexport { ArrayList, CellPosition, DataGrid, GridColumn, HierarchyList, IList, TreeGrid, TreeGridColumn, addon, tachyon as default, defaultDomItemRenderer, defaultHeaderRenderer, defaultItemEditor, defaultItemRenderer, defaultTreeItemRenderer, formatter$1 as formatter, canvas as helper, theme$1 as theme, version };\n//# sourceMappingURL=tachyon.esm.js.map\n","import {getCurrentInstance, VNode} from 'vue';\r\n\r\nexport function useRender(render: () => VNode | [VNode]): void {\r\n    (getCurrentInstance() as any).render = render;\r\n}\r\n","import {ComponentPublicInstance, isReactive, onMounted, onUnmounted, watch, WatchOptions} from 'vue';\r\nimport {IList} from 'tachyon.js';\r\n\r\nexport type NativeInstance<T = any> = T & {\r\n    addEventListener: (type: string, callback: (event: Event) => void, options?) => void;\r\n    removeEventListener: (type: string, callback: (event: Event) => void, options?) => void;\r\n};\r\n\r\nconst FLUSH_AFTER_MOUNTED_PROPS = ['scrollTarget', 'items'];\r\nconst DEEP_WATCH = ['items'];\r\n\r\nexport function mountNative(\r\n    componentInstance: ComponentPublicInstance,\r\n    nativeInstance: NativeInstance,\r\n    data: {\r\n        events: Array<string>;\r\n        options: {};\r\n    }\r\n): () => void {\r\n    const onDispatch = (event: Event): void => componentInstance.$emit(event.type, event);\r\n    const options = Object.keys(data.options).reduce(\r\n        (item, key) => {\r\n            const v = data.options[key];\r\n            if (v !== undefined) {\r\n                const flushAfterMounted = FLUSH_AFTER_MOUNTED_PROPS.indexOf(key) >= 0;\r\n                item[flushAfterMounted ? 'post' : 'pre'][key] = v;\r\n            }\r\n            return item;\r\n        },\r\n        {pre: {}, post: {}}\r\n    );\r\n\r\n    nativeInstance.setOptions(options.pre);\r\n\r\n    onMounted(() => {\r\n        nativeInstance.mount(componentInstance.$el, options.post);\r\n        data.events.forEach(type => {\r\n            nativeInstance.addEventListener(type, onDispatch);\r\n        });\r\n    });\r\n\r\n    onUnmounted(() => {\r\n        data.events.forEach(type => {\r\n            nativeInstance.removeEventListener(type, onDispatch);\r\n        });\r\n        nativeInstance.destroy();\r\n    });\r\n    return null;\r\n}\r\n\r\nexport function bindNative<C extends object, Props extends Record<string, any>>(target: C, props: Props, options?: WatchOptions, exceptProps?: Array<string>): () => void {\r\n    const isObjectReactive = isReactive(props);\r\n    const unwatchs = Object.keys(props)\r\n        .filter(key => !exceptProps?.includes(key))\r\n        .map(key => {\r\n            const deep = DEEP_WATCH.indexOf(key) >= 0 && props[`${key}Deep`];\r\n            const watchOptions = deep ? {...(options || {}), deep} : options;\r\n            const watchSource = isObjectReactive ? () => props[key] : props[key];\r\n            return watch(\r\n                watchSource,\r\n                (value, oldValue) => {\r\n                    try {\r\n                        if (!(key in target)) {\r\n                            return;\r\n                        }\r\n                        if (target[key] != value) {\r\n                            target[key] = value;\r\n                        } else if (deep && 'collection' in target) {\r\n                            (target.collection as IList)?.refresh();\r\n                        }\r\n                    } catch (e) {\r\n                        console.warn(e);\r\n                    }\r\n                },\r\n                watchOptions\r\n            );\r\n        });\r\n    return () => {\r\n        unwatchs.forEach(fn => fn());\r\n    };\r\n}\r\n","import {ComponentInternalInstance, ComponentPublicInstance, createVNode, DefineComponent, defineComponent, getCurrentInstance, render, VNode} from 'vue';\r\nimport {DataGrid} from 'tachyon.js';\r\nimport {CellState} from '@/components/defines/state';\r\n\r\nexport type AnyDefineComponent = DefineComponent<any, any, any, any>;\r\ntype WrapperData = {\r\n    vnode: VNode;\r\n    container: HTMLElement;\r\n};\r\n\r\nexport declare type Constructor<T = any> = new (...args: any[]) => T;\r\ninterface DataGridItem {\r\n    readonly wrapper: ItemWrapper;\r\n    readonly htmlElement: HTMLElement;\r\n    created: (grid: DataGrid, state?: CellState) => void;\r\n    prepare: (grid: DataGrid, state: CellState) => void;\r\n    dispose: () => void;\r\n    getSaveValue?: () => string;\r\n}\r\n\r\nexport class ItemWrapper {\r\n    private readonly wrapper: WrapperData;\r\n    constructor(wrapper: WrapperData) {\r\n        this.wrapper = wrapper;\r\n    }\r\n\r\n    get instance(): ComponentPublicInstance {\r\n        return this.wrapper.vnode.component.proxy;\r\n    }\r\n\r\n    get element(): HTMLElement {\r\n        return this.wrapper.vnode.el as HTMLElement;\r\n    }\r\n\r\n    prepare(grid: DataGrid, state: CellState): void {\r\n        const prepareFn = this.instance.$options.prepare;\r\n        prepareFn?.apply(this.instance, prepareFn.length === 1 ? [state] : [grid, state]);\r\n    }\r\n\r\n    getSaveValue() {\r\n        if (!this.instance.$options.getSaveValue) {\r\n            console.warn('\"getSaveValue\" is not defined.', this.instance.$options);\r\n            return;\r\n        }\r\n        return this.instance.$options.getSaveValue.apply(this.instance);\r\n    }\r\n\r\n    destroy(): void {\r\n        render(null, this.wrapper.container);\r\n    }\r\n}\r\n\r\nfunction createWrapper(instance: ComponentInternalInstance, type: AnyDefineComponent, data: {slotName?: string; initState?: CellState} = {}): ItemWrapper {\r\n    const props = type.props\r\n        ? ['slotName', 'initState'].reduce((props, key) => {\r\n              if (key in type.props) {\r\n                  props[key] = data[key];\r\n              }\r\n              return props;\r\n          }, {})\r\n        : {};\r\n\r\n    const vnode: VNode = createVNode(type, props, {...instance.slots});\r\n    const container = document.createElement('template') as HTMLElement;\r\n    container.className = 'wrapper';\r\n    if (instance.appContext) {\r\n        vnode.appContext = instance.appContext;\r\n    }\r\n    render(vnode, container);\r\n    return new ItemWrapper({vnode, container});\r\n}\r\n\r\nexport function createItemFactory(host: ComponentPublicInstance | ComponentInternalInstance, type: AnyDefineComponent, slotName: string = null): DataGridItem {\r\n    const parent = (host as ComponentPublicInstance).$ || (host as ComponentInternalInstance);\r\n    if (type.__setup) {\r\n        type = defineComponent({...type} as any) as any;\r\n    }\r\n    const hookSetup = type.__setup || type.setup;\r\n    type.__setup = hookSetup;\r\n    type.setup = (props, context) => {\r\n        const instance = getCurrentInstance();\r\n        // `provides` 값을 부모의 값으로 변경.\r\n        (instance as any).provides = (parent as any).provides;\r\n        instance.parent = parent;\r\n        if (hookSetup) {\r\n            return hookSetup(props, context);\r\n        }\r\n    };\r\n    return {\r\n        wrapper: null,\r\n        get htmlElement() {\r\n            return this.wrapper.element;\r\n        },\r\n        created(grid: DataGrid, state?: CellState) {\r\n            this.wrapper = createWrapper(parent, type, {slotName, initState: state});\r\n        },\r\n        prepare(grid, state) {\r\n            this.wrapper.prepare(grid, state);\r\n        },\r\n        dispose() {\r\n            this.wrapper.destroy();\r\n        },\r\n        /**\r\n         * ItemEditor 인터페이스\r\n         */\r\n        getSaveValue() {\r\n            return this.wrapper.getSaveValue();\r\n        }\r\n    };\r\n}\r\n","import {ComponentInternalInstance} from 'vue';\r\nimport {AnyDefineComponent, createItemFactory} from '@/util/componentWrapper';\r\nimport {CellPosition, GridColumn} from 'tachyon.js';\r\n\r\nfunction isVueComponent(value: any): boolean {\r\n    return !!(value as AnyDefineComponent) && (value.render instanceof Function || value.setup instanceof Function);\r\n}\r\n\r\nexport function useItemFactory(instance: ComponentInternalInstance, value: object, slotName: string, defaultSlotItemFactory: AnyDefineComponent) {\r\n    if (value instanceof Function) {\r\n        return (item: object, column: GridColumn, cell: CellPosition) => {\r\n            return useItemFactory(instance, value(item, column, cell), slotName, defaultSlotItemFactory);\r\n        };\r\n    } else if (slotName in instance.slots) {\r\n        return createItemFactory(instance, defaultSlotItemFactory, slotName);\r\n    } else if (isVueComponent(value)) {\r\n        return createItemFactory(instance, value as AnyDefineComponent);\r\n    }\r\n\r\n    return value;\r\n}\r\n","import {SetupContext} from 'vue';\r\nimport {VNode} from 'vue';\r\n\r\nfunction isColumnTag(slot) {\r\n    const props = slot.type?.props;\r\n    return !!(props && ['headerRenderer', 'itemRenderer'].every(k => k in props));\r\n}\r\n\r\nfunction getChildren(node: VNode) {\r\n    let children = [];\r\n    if (Array.isArray(node.children)) {\r\n        node.children.forEach((child: VNode) => {\r\n            children = children.concat(getChildren(child));\r\n            if (isColumnTag(child)) {\r\n                children.push(child);\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\n\r\nexport default function (context: SetupContext) {\r\n    const nodes = context.slots.default?.() || [];\r\n    return nodes.reduce((result, node) => {\r\n        if (typeof node.type === 'symbol') {\r\n            result = result.concat(getChildren(node));\r\n        } else if (isColumnTag(node)) {\r\n            result.push(node);\r\n        }\r\n        return result;\r\n    }, []);\r\n}\r\n","import {NativeInstance} from '@/util/native';\r\nimport {computed, getCurrentInstance, onMounted, ref, toRaw, watch} from 'vue';\r\n\r\nconst SelectableMap = {\r\n    singleRow: 'selectedItem',\r\n    multipleRows: 'selectedItems',\r\n    singleCell: 'selectedCell',\r\n    multipleCells: 'selectedCells'\r\n};\r\n\r\nexport function useModel(props: Record<string, any>, prop: string, nativeInstance: NativeInstance, nativeProp: string) {\r\n    const instance = getCurrentInstance();\r\n    const internal = ref(props[prop]);\r\n    const isTwoWay = computed(() => {\r\n        if (!(prop in props)) {\r\n            return false;\r\n        }\r\n        const vProps = instance.vnode.props;\r\n        return !!(vProps && prop in vProps && `onUpdate:${prop}` in vProps);\r\n    });\r\n\r\n    const model = computed({\r\n        get() {\r\n            return isTwoWay.value ? props[prop] : internal.value;\r\n        },\r\n        set(value) {\r\n            const rowValue = toRaw(value);\r\n            if (toRaw(internal.value) !== rowValue) {\r\n                internal.value = rowValue;\r\n                instance?.emit(`update:${prop}`, value);\r\n            }\r\n        }\r\n    });\r\n\r\n    watch(\r\n        model,\r\n        value => {\r\n            if (value === undefined) {\r\n                return;\r\n            }\r\n            const update = () => {\r\n                if (nativeInstance[nativeProp] != value) {\r\n                    nativeInstance[nativeProp] = value;\r\n                }\r\n            };\r\n\r\n            if (!instance.isMounted) {\r\n                onMounted(update);\r\n            } else {\r\n                update();\r\n            }\r\n        },\r\n        {immediate: true, flush: 'post'}\r\n    );\r\n\r\n    nativeInstance.addEventListener('selection-change', event => {\r\n        model.value = nativeInstance[nativeProp];\r\n    });\r\n\r\n    return model;\r\n}\r\n\r\nexport function useSelectableModels(props: Record<string, any>, nativeInstance: NativeInstance): void {\r\n    const {selectionMode} = props;\r\n    const field = SelectableMap[selectionMode];\r\n    useModel(props, 'modelValue', nativeInstance, field);\r\n    if (selectionMode === 'singleRow' || selectionMode === 'multipleRows') {\r\n        useModel(props, 'selectedItem', nativeInstance, 'selectedItem');\r\n        useModel(props, 'selectedItems', nativeInstance, 'selectedItems');\r\n    } else {\r\n        useModel(props, 'selectedCell', nativeInstance, 'selectedCell');\r\n        useModel(props, 'selectedCells', nativeInstance, 'selectedCells');\r\n    }\r\n}\r\n","/**\r\n * @param fn\r\n * @param delay\r\n * @param context\r\n */\r\nexport function debounce(fn: (...args) => void, delay = 100, context = null): () => void {\r\n    let timerId = null;\r\n    const callback = function (...args): void {\r\n        if (timerId) {\r\n            clearTimeout(timerId);\r\n        }\r\n        timerId = setTimeout(function () {\r\n            fn.apply(context, args);\r\n        }, delay);\r\n    };\r\n\r\n    callback.cancel = (): void => {\r\n        clearTimeout(timerId);\r\n    };\r\n    return callback;\r\n}\r\n","import {ComponentPublicInstance, SetupContext} from 'vue';\r\nimport {ComputedRef} from 'vue';\r\nimport {GridColumn} from 'tachyon.js';\r\nimport {computed, h, nextTick, ref, VNode} from 'vue';\r\nimport {useRender} from '@/util/useRender';\r\nimport getColumnSlots from '@/util/getColumnSlots';\r\n\r\nexport type ColumnComponentInstance = ComponentPublicInstance<{updateColumns: () => void; $column?: GridColumn}>;\r\n\r\n/**\r\n * 자식 목록 반환\r\n */\r\nexport function useColumnRender(context: SetupContext): ComputedRef<Array<GridColumn>> {\r\n    const source = [];\r\n    const childVNodes = ref<Array<VNode>>(source);\r\n    useRender(() => {\r\n        //columns children\r\n        const node = h('template', getColumnSlots(context));\r\n        if ((node.children as Array<VNode>)?.length > 0) {\r\n            nextTick().then(() => {\r\n                childVNodes.value = (node.children as Array<VNode>) || source;\r\n            });\r\n        }\r\n        return node;\r\n    });\r\n\r\n    return computed(() =>\r\n        childVNodes.value.map(node => {\r\n            if (!node.component?.proxy) {\r\n                console.warn('columns is wrong!!!');\r\n                return null;\r\n            }\r\n            return (node.component.proxy as ColumnComponentInstance).$column;\r\n        })\r\n    );\r\n}\r\n","type Compare = (a, b) => boolean;\r\n\r\nfunction is(a, b): boolean {\r\n    return a === b || (a == null && b == null) || (a instanceof Date && b instanceof Date && a.getTime() === b.getTime());\r\n}\r\n\r\nfunction equal(a, b, isDeep: boolean = false, compare: Compare = is): boolean {\r\n    if (compare(a, b)) {\r\n        return true;\r\n    }\r\n\r\n    if (typeof a !== 'object' || a == null || typeof b !== 'object' || b == null) {\r\n        return false;\r\n    }\r\n\r\n    //array, object\r\n    const keysA = Object.keys(a);\r\n    const keysB = Object.keys(b);\r\n    if (keysA.length !== keysB.length) {\r\n        return false;\r\n    }\r\n\r\n    return keysA.every(key => (key in b && isDeep ? equal(a[key], b[key], isDeep, compare) : compare(a[key], b[key])));\r\n}\r\n\r\n/**\r\n * a, b 얕은 값 비교\r\n * @param a\r\n * @param b\r\n * @param compare\r\n */\r\nexport function shallowEqual(a, b, compare: Compare = is): boolean {\r\n    return equal(a, b, false, compare);\r\n}\r\n\r\n/**\r\n * a, b 깊은 값 비교(중첩 배열 및 맵 고려)\r\n * @param a\r\n * @param b\r\n * @param compare\r\n */\r\nexport function deepEqual(a, b, compare: Compare = is): boolean {\r\n    return equal(a, b, true, compare);\r\n}\r\n","import {defineComponent, h, inject, PropType, ref, shallowRef, triggerRef} from 'vue';\r\nimport {CellState} from './defines/state';\r\nimport {useRender} from '@/util/useRender';\r\nimport {GridColumnSymbol} from '@/components/TachyonColumn';\r\n\r\nexport default defineComponent({\r\n    name: 'TachyonGridItemEditor',\r\n    props: {\r\n        slotName: {\r\n            type: String\r\n        },\r\n        initState: {\r\n            type: Object as PropType<CellState>\r\n        }\r\n    },\r\n    setup(props, context) {\r\n        const columnProvider = inject(GridColumnSymbol);\r\n        const state = shallowRef<CellState>(props.initState);\r\n        const lazySaveValue = ref(state.value.value);\r\n        const hookEditEnd = (value: any) => {\r\n            lazySaveValue.value = value;\r\n            columnProvider.grid.endEdit();\r\n        };\r\n        const hookSetValue = (value: any) => {\r\n            lazySaveValue.value = value;\r\n            columnProvider.grid.collection?.setItemValue(state.value.item, state.value.column.dataField, value);\r\n        };\r\n        useRender(() => {\r\n            const slot = context.slots[props.slotName];\r\n            return h(slot({...state.value, hookSetValue, hookEditEnd})[0]);\r\n        });\r\n\r\n        function triggerState() {\r\n            triggerRef(state);\r\n        }\r\n\r\n        return {\r\n            state,\r\n            lazySaveValue,\r\n            triggerState\r\n        };\r\n    },\r\n    prepare(state: CellState): void {\r\n        this.state = state;\r\n        this.triggerState();\r\n    },\r\n    getSaveValue(): any {\r\n        return this.lazySaveValue;\r\n    }\r\n});\r\n","import {\n    computed,\n    DefineComponent,\n    defineComponent,\n    ExtractPropTypes,\n    getCurrentInstance,\n    inject,\n    InjectionKey,\n    nextTick,\n    onMounted,\n    onUnmounted,\n    PropType,\n    provide,\n    PublicProps,\n    SetupContext,\n    SlotsType,\n    watch\n} from 'vue';\nimport {DataGrid, GridColumn} from 'tachyon.js';\nimport {useColumnRender} from '@/util/useColumnRender';\nimport {bindNative} from '@/util/native';\nimport {useItemFactory} from '@/util/useItemFactory';\nimport {shallowEqual} from '@/util/equal';\nimport {DataGridSymbol} from '@/components/TachyonGrid';\nimport {CellState, EditorCellState, FilterCondition, FilterType, RendererCellState} from './defines/state';\nimport {GridStyles} from './defines/styles';\nimport TachyonGridItemRenderer from '@/components/TachyonGridItemRenderer';\nimport {AnyDefineComponent} from '@/util/componentWrapper';\nimport TachyonGridItemEditor from '@/components/TachyonGridItemEditor';\n\nexport interface GridColumnProvider {\n    readonly grid: DataGrid;\n    readonly column: GridColumn;\n}\n\nexport const GridColumnSymbol: InjectionKey<GridColumnProvider> = Symbol.for('GridColumnInstance');\n\nexport declare type GridColumnGetters = {\n    /**\n     *  GridColumn 인스턴스입니다.\n     */\n    nativeInstance: GridColumn;\n};\n\nexport declare type GridColumnSlot = {\n    /**\n     * 헤더 렌더러 슬롯\n     */\n    headerRenderer?: CellState;\n    /**\n     * 아이템 렌더러 슬롯\n     */\n    itemRenderer?: RendererCellState;\n    /**\n     * 아이템 에디터 슬롯\n     */\n    itemEditor?: EditorCellState;\n};\n\nexport const defaultColumnProps = {\n    /**\n     * 셀에 표시될 텍스트를 결정하는 필드를 정의합니다.\n     */\n    dataField: {\n        type: String as PropType<string>\n    },\n    /**\n     * 셀에 표시될 텍스트를 결정하는 콜백 함수입니다.\n     * 기본적으로 컬럼의 셀의 텍스트는 `dataField`와 일치하는 아이템 객체의 프로퍼티 값으로 설정됩니다.\n     * `labelFunction` 사용시 사용자가 지정한 값으로 설정할 수 있습니다.\n     * ```typescript\n     * labelFunction (item : object, column : DataGridColumn) : string{\n     *      return item[column.dataField] + '%';\n     * }\n     * ```\n     */\n    labelFunction: {\n        type: Function as PropType<(item?: object, column?: GridColumn) => string>\n    },\n    /**\n     * 컬럼 헤더의 텍스트입니다. 지정되지 않을시 'dataField' 속성을 사용합니다.\n     */\n    headerText: {\n        type: String as PropType<string>\n    },\n    /**\n     * 컬럼의 너비입니다. 지정되지 않을시 그리드 내부에서 자동으로 조절합니다.\n     */\n    width: {\n        type: Number as PropType<number>\n    },\n    /**\n     * 컬럼의 최소 너비입니다.\n     */\n    minWidth: {\n        type: Number as PropType<number>,\n        default: 10\n    },\n    /**\n     * 컬럼의 표시 여부입니다.\n     */\n    visible: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },\n    /**\n     * 해당 컬럼 영역 셀을 편집할 수 있는지 여부입니다.\n     */\n    editable: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },\n    /**\n     * 컬럼의 크기 변경 사용여부입니다.\n     */\n    resizable: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },\n    /**\n     * 컬럼 정렬 사용 여부입니다.\n     */\n    sortable: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },\n    /**\n     * 컬럼을 드래그하여 이동하여 순서 변경가능 여부입니다.\n     */\n    draggable: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },\n    /**\n     * 정렬이 오름차순인지 아니면 내림차순 인지를 나타냅니다.\n     */\n    sortDescending: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /**\n     * 컬럼의 정렬 형태(문자열, 숫자, 콜백함수)를 정의합니다.\n     */\n    sortCompare: {\n        type: Function as PropType<(a: any, b: any, column: GridColumn) => number>\n    },\n    /**\n     * 포멧된 데이타가 아닌 원본 데이타기준으로 정렬 여부입니다.\n     */\n    isSortOriginal: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /**\n     * 표시 텍스트가 영역을 벗어난 경우 줄바꿈 여부입니다.\n     */\n    wordWrap: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /**\n     * 그리드 병합모드 사용시 행병합 여부입니다.\n     */\n    isRowMerge: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /**\n     * 그리드 병합모드 사용시 컬럼병합 여부입니다.\n     */\n    isColumnMerge: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /**\n     * 그리드 병합모드 사용시 해당 컬럼의 행 병합크기를 다른 컬럼의 행 크기를 종속하게 합니다.\n     */\n    mergeDependColumns: {\n        type: Array as PropType<Array<string>>\n    },\n    /**\n     * 해당 컬럼 영역의 스타일을 정의합니다.\n     */\n    styles: {\n        type: Object as PropType<GridStyles>\n    },\n    /**\n     * 식 컬럼 헤더를 보이거나 숨깁니다.\n     */\n    collapse: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /* open: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },*/\n    /**\n     * 이 컬럼의 셀에 라벨에 포멧를 정의합니다.\n     * 포멧의 정의 tachyon.formatter.add 사용합니다.\n     */\n    format: {\n        type: Object as PropType<{type: string; pattern: string; [p: string]: any}>\n    },\n    /**\n     * 해당 컬럼의 필터를 정의합니다.\n     */\n    filter: {\n        type: Object as PropType<{type: FilterType; condition: FilterCondition}>\n    },\n    /**\n     * 헤더영역을 구성하는 헤더 렌더러입니다.\n     */\n    headerRenderer: {\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\n    },\n    /**\n     * 데이타영역을 구성하는 셀 렌더러입니다\n     */\n    itemRenderer: {\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\n    },\n    /**\n     * 데이타편집을 구성하는 셀 렌더러입니다\n     */\n    itemEditor: {\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\n    }\n};\n\nexport function internalColumnSetup<Column extends GridColumn>(props: Record<string, any>, context: SetupContext, nativeInstance: Column) {\n    const instance = getCurrentInstance() as any;\n    const provider = inject(DataGridSymbol);\n    const factoryProps = {\n        headerRenderer: computed(() => useItemFactory(instance, props.headerRenderer, 'headerRenderer', TachyonGridItemRenderer)),\n        itemRenderer: computed(() => useItemFactory(instance, props.itemRenderer, 'itemRenderer', TachyonGridItemRenderer)),\n        itemEditor: computed(() => useItemFactory(instance, props.itemEditor, 'itemEditor', TachyonGridItemEditor))\n    };\n\n    bindNative(nativeInstance, props, {immediate: true}, Object.keys(factoryProps));\n    bindNative(nativeInstance, factoryProps, {immediate: true});\n\n    instance.proxy.$column = nativeInstance;\n    const children = useColumnRender(context);\n    watch(\n        children,\n        value => {\n            if (!shallowEqual(nativeInstance.children, value)) {\n                nativeInstance.children = value;\n            }\n        },\n        {flush: 'post'}\n    );\n\n    watch(\n        () => props.collapse,\n        value => {\n            nativeInstance.open = !value;\n        },\n        {immediate: true}\n    );\n\n    provide(GridColumnSymbol, {\n        grid: provider.grid,\n        column: nativeInstance\n    });\n\n    onMounted(() => {\n        nextTick().then(() => {\n            provider.updateColumns();\n            const element = instance.proxy.$el as HTMLElement;\n            element?.parentElement?.removeChild(element);\n        });\n    });\n\n    onUnmounted(() => {\n        provider.updateColumns();\n    });\n\n    return {\n        nativeInstance\n    };\n}\n\nexport type ColumnPropsType = typeof defaultColumnProps;\n\nconst TachyonColumnImpl = defineComponent({\n    name: 'TachyonColumn',\n    props: {\n        ...defaultColumnProps\n    },\n    setup(props, context) {\n        return internalColumnSetup<GridColumn>(props, context, new GridColumn());\n    }\n});\n\nconst TachyonColumn = TachyonColumnImpl as unknown as DefineComponent<\n    ColumnPropsType,\n    {},\n    GridColumnGetters,\n    {},\n    {},\n    {},\n    {},\n    {},\n    string,\n    PublicProps,\n    ExtractPropTypes<ColumnPropsType>,\n    ExtractPropTypes<ColumnPropsType>,\n    SlotsType<GridColumnSlot>\n>;\nexport default TachyonColumn;\n","import {defineComponent, h, inject, PropType, shallowRef, triggerRef} from 'vue';\r\nimport {CellState} from './defines/state';\r\nimport {useRender} from '@/util/useRender';\r\nimport {GridColumnSymbol} from '@/components/TachyonColumn';\r\n\r\nexport default defineComponent({\r\n    name: 'TachyonGridItemRenderer',\r\n    props: {\r\n        slotName: {\r\n            type: String\r\n        },\r\n        initState: {\r\n            type: Object as PropType<CellState>\r\n        }\r\n    },\r\n    setup(props, context) {\r\n        const columnProvider = inject(GridColumnSymbol);\r\n        const state = shallowRef<CellState>(props.initState);\r\n        const hookSetValue = (value: any) => {\r\n            columnProvider.grid.collection?.setItemValue(state.value.item, state.value.column.dataField, value);\r\n        };\r\n        useRender(() => {\r\n            const slot = context.slots[props.slotName];\r\n            return h(slot({...state.value, hookSetValue})[0]);\r\n        });\r\n\r\n        function triggerState() {\r\n            triggerRef(state);\r\n        }\r\n\r\n        return {\r\n            state,\r\n            triggerState\r\n        };\r\n    },\r\n    prepare(state: CellState): void {\r\n        this.state = state;\r\n        this.triggerState();\r\n    }\r\n});\r\n","import {\r\n    computed,\r\n    DefineComponent,\r\n    defineComponent,\r\n    ExtractPropTypes,\r\n    getCurrentInstance,\r\n    h,\r\n    InjectionKey,\r\n    MethodOptions,\r\n    onMounted,\r\n    onUnmounted,\r\n    PropType,\r\n    provide,\r\n    PublicProps,\r\n    ref,\r\n    SlotsType,\r\n    VNode\r\n} from 'vue';\r\nimport {CellPosition, DataGrid, GridColumn, IList} from 'tachyon.js';\r\nimport {useRender} from '@/util/useRender';\r\nimport {bindNative, mountNative} from '@/util/native';\r\nimport {useItemFactory} from '@/util/useItemFactory';\r\nimport {CellState, EditorCellState, RendererCellState} from './defines/state';\r\nimport getColumnSlots from '@/util/getColumnSlots';\r\nimport {useSelectableModels} from '@/util/useModel';\r\nimport {AnyDefineComponent, ItemWrapper} from '@/util/componentWrapper';\r\nimport {debounce} from '@/util/debounce';\r\nimport TachyonGridItemRenderer from '@/components/TachyonGridItemRenderer';\r\nimport TachyonGridItemEditor from '@/components/TachyonGridItemEditor';\r\n\r\ntype SelectionMode = 'singleRow' | 'multipleRows' | 'singleCell' | 'multipleCells';\r\n\r\nexport declare type DataGridGetters = {\r\n    /**\r\n     * DataGrid 인스턴스입니다.\r\n     */\r\n    nativeInstance: DataGrid;\r\n};\r\n\r\nexport declare interface DataGridMethods extends MethodOptions {\r\n    [key: string]: any;\r\n\r\n    /**\r\n     * 포커스를 설정합니다.\r\n     */\r\n    focus(): void;\r\n\r\n    /**\r\n     * 지정된 셀 위치로 스크롤을 이동합니다.\r\n     * @param rowIndex {number} - 스크롤을 이동하려는 대상 행의 인덱스입니다.\r\n     * @param columnIndex {number} - 스크롤을 이동하려는 대상 열의 인덱스입니다.\r\n     * @param allowSelection {boolean} - 이 값이 `true` 설정되면, 지정된 셀이 선택되고, 기본값은 `false` 입니다.\r\n     */\r\n    scrollToCell(rowIndex: number, columnIndex: number, allowSelection: boolean): void;\r\n\r\n    /**\r\n     * 표시 목록을 갱신을 요청합니다.\r\n     */\r\n    invalidate(): void;\r\n\r\n    /**\r\n     * 대기중인 표시 목록 갱신을 바로 실행합니다.\r\n     */\r\n    flush(): void;\r\n\r\n    /**\r\n     * 지정된 셀에서 편집을 시작합니다.\r\n     * 편집이 시작되면 'item-edit-starting', 'item-edit-start' 이벤트가 발생합니다.\r\n     * 'item-edit-starting' 이벤트가 발생할 때, `preventDefault`를 사용하여 편집을 취소할수 있습니다.\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @returns {boolean}\r\n     */\r\n    startEdit(rowIndex: number, columnIndex: number): boolean;\r\n\r\n    /**\r\n     * 편집을 종료하고 편집중인 내용이 저장됩니다.\r\n     * 편집이 종료되면 'item-edit-ending', 'item-edit-end' 이벤트가 발생합니다.\r\n     * 'item-edit-ending' 이벤트가 발생할 때, `preventDefault`를 사용하여 편집 종료를 취소할수 있습니다.\r\n     * @returns {boolean}\r\n     */\r\n    endEdit(): boolean;\r\n\r\n    /**\r\n     * 편집을 취소합니다. 편집중인 내용은 저장되지 않습니다.\r\n     * 편집이 취소되면 'item-edit-cancel' 이벤트가 발생합니다.\r\n     * @returns {boolean}\r\n     */\r\n    cancelEdit(): boolean;\r\n\r\n    /**\r\n     * 지정된 이름에 해당하는 애드온 컴포넌트를 반환합니다.\r\n     */\r\n    getAddon(name: string);\r\n\r\n    /**\r\n     * items 관리하는 collection 객체를 반환합니다.\r\n     */\r\n    getCollection(): IList;\r\n}\r\n\r\ndeclare type ArrayListKind = 'reset' | 'refresh' | 'set' | 'add' | 'remove' | 'move' | 'update';\r\ndeclare type HierarchyListKind = 'collapsing' | 'collapse' | 'expanding' | 'expand' | 'add' | 'remove' | 'move';\r\ndeclare type DataGridHeaderEvent = CustomEvent<{column: GridColumn; trigger: Event}>;\r\ndeclare type DataGridItemEvent = CustomEvent<{\r\n    rowIndex: number;\r\n    columnIndex: number;\r\n    column: GridColumn;\r\n    item: object;\r\n    trigger: Event;\r\n}>;\r\ndeclare type HierarchyListEvent = CustomEvent<{\r\n    kind: HierarchyListKind;\r\n    nodes: Array<object>;\r\n    parent: object;\r\n    toParent?: object;\r\n    toIndex?: number;\r\n}>;\r\ndeclare type ArrayListEvent = CustomEvent<{\r\n    kind: ArrayListKind;\r\n    items?: Array<object>;\r\n    index?: number;\r\n    oldIndex?: number;\r\n}>;\r\ndeclare type SelectionChangeEvent = CustomEvent<{kind: string; cell: CellPosition; cells: Array<CellPosition>}>;\r\ndeclare type DateGridItemEditEvent = CustomEvent<{\r\n    rowIndex: number;\r\n    columnIndex: number;\r\n    item: object;\r\n    column: GridColumn;\r\n    renderer: object;\r\n    editor: object;\r\n    oldValue: any;\r\n    newValue: any;\r\n    trigger: Event;\r\n}>;\r\n\r\nexport declare type DataGridEvents = {\r\n    /**\r\n     * 헤더에 마우스 다운했을때 발생합니다.\r\n     */\r\n    'header-down': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더에 마우스 업 했을때 발생합니다.\r\n     */\r\n    'header-up': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더에 마우스 클릭 했을때 발생합니다.\r\n     */\r\n    'header-click': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더에 마우스 더블 클릭했을때 발생합니다.\r\n     */\r\n    'header-double-click': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더에 마우스 드래그 했을때  발생합니다.\r\n     */\r\n    'header-drag': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 마우스가 헤더를 벗어 났을때 발생합니다.\r\n     */\r\n    'header-out': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 마우스가 헤더 위로 이동했을때 발생합니다.\r\n     */\r\n    'header-over': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더 구분선에 마우스 다운했을때 발생합니다.\r\n     */\r\n    'separator-down': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더 구분선에 마우스 업 했을때 발생합니다.\r\n     */\r\n    'separator-up': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더 구분선에 마우스 클릭 했을때 발생합니다.\r\n     */\r\n    'separator-click': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더 구분선에 마우스 더블 클릭했을때 발생합니다.\r\n     */\r\n    'separator-double-click': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더 구분선에 마우스 드래그 했을때  발생합니다.\r\n     */\r\n    'separator-drag': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 마우스가 헤더 구분선에 벗어 났을때 발생합니다.\r\n     */\r\n    'separator-over': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 마우스가 헤더 구분선에 위로 이동했을때 발생합니다.\r\n     */\r\n    'separator-out': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 아이템에 마우스 다운했을때 발생합니다.\r\n     */\r\n    'item-down': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 아이템에 마우스 업 했을때 발생합니다.\r\n     */\r\n    'item-up': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 아이템에 마우스 클릭 했을때 발생합니다.\r\n     */\r\n    'item-click': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 아이템에 마우스 더블 클릭했을때 발생합니다.\r\n     */\r\n    'item-double-click': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 아이템에 마우스 드래그 했을때  발생합니다.\r\n     */\r\n    'item-drag': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 마우스가 아이템 벗어 났을때 발생합니다.\r\n     */\r\n    'item-over': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 마우스가 아이템 위로 이동했을때 발생합니다.\r\n     */\r\n    'item-out': (event: DataGridItemEvent) => void;\r\n\r\n    /**\r\n     * 컬렉션 내부의 아이템이 변경되었을 때 발생합니다.\r\n     * - set - 다른 아이템으로 변경\r\n     * - add - 아이템 추가\r\n     * - remove - 아이템 삭제\r\n     * - move - 아이템 이동\r\n     * - update - 아이템 특정 필드 값 변경\r\n     * - reset - 컬렉션 소스 변경\r\n     * - refresh - 컬렉션 필터등 재 갱신\r\n     */\r\n    'collection-change': (event: ArrayListEvent) => void;\r\n    /**\r\n     * TreeGrid 내부의 아이템이 변경되었을때 발생합니다.\r\n     * 이벤트 종류\r\n     * - collapsing - 노드 접혀지기 전\r\n     * - collapse - 노드 접혀진 후\r\n     * - expanding - 노드 확장되기 전\r\n     * - expand - 노드 확장된 후\r\n     * - add - 노드 추가\r\n     * - remove - 노드 삭제\r\n     * - move - 노드 이동\r\n     */\r\n    'node-change': (event: HierarchyListEvent) => void;\r\n    /**\r\n     * 컬럼 내부의 아이템이 변경되었을 때 발생합니다.\r\n     */\r\n    'column-collection-change': (event: ArrayListEvent) => void;\r\n    /**\r\n     * 컬럼 내부의 노드 상태가 변경 되었을때 발생합니다.\r\n     */\r\n    'column-node-change': (event: HierarchyListEvent) => void;\r\n    /**\r\n     * 그리드에서 내부에서 사용되는 컬럼 목록 변경시 발생합니다.\r\n     */\r\n    'normalized-columns-change': (\r\n        event: CustomEvent<{\r\n            newValue: Array<GridColumn>;\r\n            oldValue: Array<GridColumn>;\r\n        }>\r\n    ) => void;\r\n    /**\r\n     * 아이템이 선택되기 전에 발생합니다.\r\n     * 이벤트 핸들러에서 이벤트의 `preventDefault` 메소드를 호출하여 선택 작업을 취소할 수 있습니다.\r\n     */\r\n    'selection-changing': (event: SelectionChangeEvent) => void;\r\n    /**\r\n     * 아이템이 선택된 후에 발생합니다.\r\n     */\r\n    'selection-change': (event: SelectionChangeEvent) => void;\r\n    /**\r\n     * 아이템 편집 전에 발생합니다..\r\n     */\r\n    'item-edit-starting': (event: DateGridItemEditEvent) => void;\r\n    /**\r\n     * 아이템 편집 할때 발생합니다.\r\n     */\r\n    'item-edit-start': (event: DateGridItemEditEvent) => void;\r\n    /**\r\n     * 아이템 편집 종료 전에 발생합니다.\r\n     */\r\n    'item-edit-ending': (event: DateGridItemEditEvent) => void;\r\n    /**\r\n     * 아이템 편집 종료 할때 발생합니다.\r\n     */\r\n    'item-edit-end': (event: DateGridItemEditEvent) => void;\r\n    /**\r\n     * 아이템 편집 취소 할때 발생합니다.\r\n     */\r\n    'item-edit-cancel': (event: DateGridItemEditEvent) => void;\r\n    /**\r\n     * 데이타 그리드 내 스크롤 할때 발생합니다.\r\n     */\r\n    scroll: (\r\n        event: CustomEvent<{\r\n            maxScrollLeft: number;\r\n            maxScrollTop: number;\r\n            scrollLeft: number;\r\n            scrollTop: number;\r\n            trigger: Event;\r\n        }>\r\n    ) => void;\r\n};\r\n\r\nexport declare type DataGridSlot = {\r\n    /**\r\n     * 헤더 렌더러 슬롯\r\n     */\r\n    headerRenderer?: CellState;\r\n    /**\r\n     * 아이템 렌더러 슬롯\r\n     */\r\n    itemRenderer?: RendererCellState;\r\n    /**\r\n     * 아이템 에디터 슬롯\r\n     */\r\n    itemEditor?: EditorCellState;\r\n};\r\n\r\nexport interface DataGridProvider<Native> {\r\n    readonly grid: Native;\r\n\r\n    updateColumns(): void;\r\n}\r\n\r\nexport const DataGridSymbol: InjectionKey<DataGridProvider<DataGrid>> = Symbol.for('DataGridInstance');\r\nexport const NativeEvents = [\r\n    'header-double-click',\r\n    'header-down',\r\n    'header-up',\r\n    'header-click',\r\n    'header-drag',\r\n    'header-out',\r\n    'header-over',\r\n    'separator-over',\r\n    'separator-out',\r\n    'separator-down',\r\n    'separator-drag',\r\n    'separator-up',\r\n    'separator-click',\r\n    'separator-double-click',\r\n    'item-over',\r\n    'item-out',\r\n    'item-down',\r\n    'item-up',\r\n    'item-drag',\r\n    'item-click',\r\n    'item-double-click',\r\n    'node-change',\r\n    'collection-change',\r\n    'column-collection-change',\r\n    'column-node-change',\r\n    'normalized-columns-change',\r\n    'selection-changing',\r\n    'selection-change',\r\n    'item-edit-starting',\r\n    'item-edit-start',\r\n    'item-edit-ending',\r\n    'item-edit-end',\r\n    'item-edit-cancel',\r\n    'scroll'\r\n];\r\n\r\nexport const defaultDataGridProps = {\r\n    modelValue: {\r\n        type: [Object, Array] as PropType<object | Array<object> | Array<CellPosition> | null>\r\n    },\r\n    /**\r\n     * 그리드 표시되는 데이타 목록입니다.\r\n     */\r\n    items: {\r\n        type: Array as PropType<Array<Record<string, any>>>\r\n    },\r\n    /**\r\n     * 그리드 헤더에 표시되는 컬럼목록입니다.\r\n     */\r\n    columns: {\r\n        type: Array as PropType<Array<GridColumn>>\r\n    },\r\n    /**\r\n     * 헤더영역을 구성하는 헤더 렌더러입니다.\r\n     */\r\n    headerRenderer: {\r\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\r\n    },\r\n    /**\r\n     * 데이타영역을 구성하는 셀 렌더러입니다\r\n     */\r\n    itemRenderer: {\r\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\r\n    },\r\n    /**\r\n     * 데이타편집을 구성하는 셀 렌더러입니다\r\n     */\r\n    itemEditor: {\r\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\r\n    },\r\n    /**\r\n     * 셀 텍스트를 결정하는 콜백 함수입니다.\r\n     * 기본적으로 각 셀의 텍스트는 그 셀이 속한 컬럼의 `dataField`와 일치하는 아이템 객체의 프로퍼티 값으로 설정됩니다.\r\n     * `labelFunction` 사용시 사용자가 지정한 값으로 설정할 수 있습니다.\r\n     * 그러나, 컬럼 자체에 `labelFunction`이 이미 정의되어 있다면, 해당 컬럼의 `labelFunction`이 우선적으로 사용되며 이 메소드는 무시됩니다.\r\n     * ```\r\n     * labelFunction (item : Object, column : DataGridColumn) : String{\r\n     *      return item[column.dataField] + '%';\r\n     * }\r\n     * ```\r\n     */\r\n    labelFunction: {\r\n        type: Function as PropType<(item?: object, column?: GridColumn) => string>\r\n    },\r\n    /**\r\n     * 그리드의 표현되는 행의 수를 설정합니다.\r\n     */\r\n    rowCount: {\r\n        type: Number as PropType<number>,\r\n        default: -1\r\n    },\r\n    /**\r\n     * 그리드의 표현되는 최대 행의 수를 설정합니다.\r\n     */\r\n    maxRowCount: {\r\n        type: Number as PropType<number>,\r\n        default: -1\r\n    },\r\n    /**\r\n     * 데이타 행의 기본 높이를 설정합니다.\r\n     */\r\n    rowHeight: {\r\n        type: Number as PropType<number>,\r\n        default: 40\r\n    },\r\n    /**\r\n     * 헤더 행의 기본 높이를 설정합니다.\r\n     */\r\n    headerRowHeight: {\r\n        type: Number as PropType<number>,\r\n        default: 40\r\n    },\r\n    /**\r\n     * 좌 기준으로 행을 고정합니다.\r\n     * 수평스크롤에 영향을 받지 않습니다.\r\n     */\r\n    frozenLeft: {\r\n        type: Number as PropType<number>,\r\n        default: 0\r\n    },\r\n    /**\r\n     * 우 기준으로 행을 고정합니다.\r\n     * 수평스크롤에 영향을 받지 않습니다.\r\n     */\r\n    frozenRight: {\r\n        type: Number as PropType<number>,\r\n        default: 0\r\n    },\r\n    /**\r\n     * 상단 기준으로 행을 고정합니다.\r\n     * 수직스크롤에 영향을 받지 않습니다.\r\n     */\r\n    frozenTop: {\r\n        type: Number as PropType<number>,\r\n        default: 0\r\n    },\r\n    /**\r\n     * 하단 기준으로 행을 고정합니다.\r\n     * 수직스크롤에 영향을 받지 않습니다.\r\n     */\r\n    frozenBottom: {\r\n        type: Number as PropType<number>,\r\n        default: 0\r\n    },\r\n    /**\r\n     * 컬럼의 정렬 사용여부입니다.\r\n     */\r\n    sortableColumns: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    },\r\n    /**\r\n     * 컬럼 멀티 정렬 사용여부입니다.\r\n     */\r\n    multiSortable: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    },\r\n    /**\r\n     * 컬럼의 크기 변경 사용여부입니다.\r\n     */\r\n    resizableColumns: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: true\r\n    },\r\n    /**\r\n     * 컬럼의 순서 변경 사용여부입니다.\r\n     * 각 컬럼의 draggable 속성에 영향을 받습니다.\r\n     */\r\n    draggableColumns: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    },\r\n    /**\r\n     * 데이타 영역 셀을 편집할 수 있는지 여부입니다.\r\n     */\r\n    editable: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    },\r\n    /**\r\n     * 편집 활성화 하는 이벤트 목록입니다.\r\n     */\r\n    editOnEvents: {\r\n        type: Array as PropType<Array<'down' | 'click' | 'doubleClick'>>,\r\n        default: ['doubleClick']\r\n    },\r\n    /**\r\n     * 그리드 스타일을 정의합니다.\r\n     */\r\n    styles: {\r\n        type: Object\r\n    },\r\n    /**\r\n     * 아이템 드래그시 항목 선택 여부입니다.\r\n     */\r\n    selectOnDrag: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: true\r\n    },\r\n    /**\r\n     * 클립 보드 붙여넣기 사용 여부입니다.\r\n     */\r\n    pasteFromClipboard: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: true\r\n    },\r\n    /**\r\n     * 데이타 자동 병합 사용 여부입니다.\r\n     */\r\n    autoMerge: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    },\r\n    /**\r\n     * 자동 병합시 병합영역을 체크하는 콜백형태의 함수입니다.\r\n     */\r\n    mergeCompare: {\r\n        type: Function as PropType<(t: object, tc: GridColumn, s: object, sc: GridColumn) => boolean>\r\n    },\r\n    /**\r\n     * 아이템 선택을 정의힙니다.\r\n     */\r\n    selectionMode: {\r\n        type: String as PropType<SelectionMode>,\r\n        default: 'singleRow'\r\n    },\r\n    /**\r\n     * 선택된 항목를 설정합니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 처음 선택된 항목이 반환됩니다.\r\n     */\r\n    selectedItem: {\r\n        type: Object as PropType<object>\r\n    },\r\n    /**\r\n     * 복수 선택된 항목을 설정합니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 선택된 항목의 배열이 반환됩니다.\r\n     */\r\n    selectedItems: {\r\n        type: Object as PropType<Array<object>>\r\n    },\r\n    /**\r\n     * 선택된 셀을 설정합니다.\r\n     */\r\n    selectedCell: {\r\n        type: Object as PropType<CellPosition>\r\n    },\r\n    /**\r\n     * 복수로 선택된 셀을 설정합니다.\r\n     */\r\n    selectedCells: {\r\n        type: Object as PropType<Array<CellPosition>>\r\n    },\r\n    /**\r\n     * 지정된 이름으로 테마를 적용합니다..\r\n     * `theme.add` 이용해 테마를 등록 후 테마를 사용할수 있습니다.\r\n     * ```\r\n     * tachyon.theme.add('themeA', {\r\n     *     css: 'themeA',\r\n     *     canvasStyle: {\r\n     *         backgroundColor: '#999900',\r\n     *         rowLine: {\r\n     *             width: 1,\r\n     *             color: '#FF0000',\r\n     *             dashed: []\r\n     *         },\r\n     *         ...\r\n     *     }\r\n     * })\r\n     * ```\r\n     */\r\n    theme: {\r\n        type: String as PropType<string>\r\n    },\r\n    /**\r\n     * `items` 대한 깊은 감시를 활성화합니다.\r\n     * 이를 통해 내부 상태 변화를 감지하고, 이에 따라 네이티브 컴포넌트의 상태를 갱신합니다.\r\n     * 성능에 영향을 줄 수 있으므로 변화 감시가 필요한 경우에만 설정하길 권장합니다.\r\n     */\r\n    itemsDeep: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    }\r\n};\r\n\r\nexport function makeDefaultDataGridMethods(instance: DataGrid) {\r\n    return {\r\n        focus() {\r\n            instance.focus();\r\n        },\r\n        scrollToCell(rowIndex: number, columnIndex: number, allowSelection: boolean) {\r\n            instance.scrollToCell(rowIndex, columnIndex, allowSelection);\r\n        },\r\n        invalidate() {\r\n            instance.invalidate(null);\r\n        },\r\n        flush() {\r\n            instance.flush();\r\n        },\r\n        startEdit(rowIndex: number, columnIndex: number): boolean {\r\n            return instance.startEdit(rowIndex, columnIndex);\r\n        },\r\n        endEdit(): boolean {\r\n            return instance.endEdit();\r\n        },\r\n        cancelEdit(): boolean {\r\n            return instance.cancelEdit();\r\n        },\r\n        getAddon(name: string) {\r\n            return instance.getAddon(name);\r\n        },\r\n        getCollection() {\r\n            return instance.collection as any;\r\n        }\r\n    };\r\n}\r\n\r\nexport function defaultDataGridSetup<Native extends DataGrid = DataGrid>(props, context, nativeInstance: Native) {\r\n    const instance = getCurrentInstance();\r\n    const factoryProps = {\r\n        headerRenderer: computed(() => useItemFactory(instance, props.headerRenderer, 'headerRenderer', TachyonGridItemRenderer)),\r\n        itemRenderer: computed(() => useItemFactory(instance, props.itemRenderer, 'itemRenderer', TachyonGridItemRenderer)),\r\n        itemEditor: computed(() => useItemFactory(instance, props.itemEditor, 'itemEditor', TachyonGridItemEditor))\r\n    };\r\n\r\n    //root columns\r\n    const columnVNodes = ref<Array<VNode>>([]);\r\n    useRender(() => {\r\n        //columns children\r\n        const node = h('div', {class: 'tachyon-grid-wrap'}, getColumnSlots(context));\r\n        if ((node.children?.length as number) > 0) {\r\n            nativeInstance.autoGenerateColumns = false;\r\n            columnVNodes.value = node.children as Array<VNode>;\r\n        }\r\n        return node;\r\n    });\r\n\r\n    function resetColumns(): void {\r\n        if (columnVNodes.value.length > 0) {\r\n            nativeInstance.columns = columnVNodes.value.map(node => (node.component.proxy as any).$column);\r\n        }\r\n    }\r\n\r\n    const debounceResetColumns = debounce(resetColumns, 1);\r\n\r\n    bindNative(nativeInstance, props, {}, Object.keys(factoryProps));\r\n    bindNative(nativeInstance, factoryProps);\r\n\r\n    mountNative(instance.proxy, nativeInstance, {\r\n        events: NativeEvents,\r\n        options: {\r\n            ...props,\r\n            headerRenderer: factoryProps.headerRenderer.value,\r\n            itemRenderer: factoryProps.itemRenderer.value,\r\n            itemEditor: factoryProps.itemEditor.value\r\n        }\r\n    });\r\n    useSelectableModels(props, nativeInstance);\r\n\r\n    //비동기 대신\r\n    let isMounted = false;\r\n    onMounted(() => {\r\n        debounceResetColumns();\r\n        isMounted = true;\r\n    });\r\n\r\n    onUnmounted(() => {\r\n        isMounted = false;\r\n        nativeInstance.destroy();\r\n    });\r\n\r\n    nativeInstance.hookFreeElement = element => {\r\n        if (element?.wrapper instanceof ItemWrapper) {\r\n            element?.wrapper.destroy();\r\n        }\r\n        return false;\r\n    };\r\n\r\n    provide(DataGridSymbol, {\r\n        grid: nativeInstance,\r\n        updateColumns() {\r\n            if (isMounted) {\r\n                debounceResetColumns();\r\n            }\r\n        }\r\n    });\r\n\r\n    return {\r\n        nativeInstance\r\n    };\r\n}\r\n\r\nexport declare type DataGridPropsType = typeof defaultDataGridProps;\r\nconst TachyonGridImpl = defineComponent({\r\n    name: 'TachyonGrid',\r\n    emits: [...NativeEvents, 'update:modelValue', 'update:selectedItem', 'update:selectedItems', 'update:selectedCell', 'update:selectedCells'],\r\n    props: {\r\n        ...defaultDataGridProps\r\n    },\r\n    setup(props, context) {\r\n        const result = defaultDataGridSetup(props, context, new DataGrid());\r\n        return {\r\n            ...result,\r\n            ...makeDefaultDataGridMethods(result.nativeInstance)\r\n        };\r\n    }\r\n});\r\n\r\nconst TachyonGrid = TachyonGridImpl as unknown as DefineComponent<\r\n    DataGridPropsType,\r\n    {},\r\n    DataGridGetters,\r\n    {},\r\n    DataGridMethods,\r\n    {},\r\n    {},\r\n    DataGridEvents,\r\n    string,\r\n    PublicProps,\r\n    ExtractPropTypes<DataGridPropsType>,\r\n    ExtractPropTypes<DataGridPropsType>,\r\n    SlotsType<DataGridSlot>\r\n>;\r\n\r\nexport default TachyonGrid;\r\n","import {DefineComponent, defineComponent, ExtractPropTypes, InjectionKey, PublicProps, SlotsType} from 'vue';\nimport {TreeGrid} from 'tachyon.js';\nimport {\n    DataGridEvents,\n    DataGridGetters,\n    DataGridMethods,\n    DataGridPropsType,\n    DataGridProvider,\n    DataGridSlot,\n    defaultDataGridProps,\n    defaultDataGridSetup,\n    makeDefaultDataGridMethods,\n    NativeEvents\n} from '../components/TachyonGrid';\nimport {TreeRendererCellState} from '@/components/defines/state';\n\nexport interface TreeGridProvider extends DataGridProvider<TreeGrid> {}\nexport const TreeGridSymbol: InjectionKey<TreeGridProvider> = Symbol.for('TreeGridInstance');\n\nexport declare interface TreeGridMethods extends DataGridMethods {\n    /**\n     * 지정된 노드를 확장합니다.\n     * @deprecated\n     */\n    openNode(node: object): boolean;\n    /**\n     * 지정된 노드를 축소합니다.\n     * @deprecated\n     */\n    closeNode(node: object): boolean;\n    /**\n     * 지정된 노드를 확장합니다.\n     */\n    expandNode(node: object): boolean;\n    /**\n     * 지정된 노드를 축소합니다.\n     */\n    collapseNode(node: object): boolean;\n    /**\n     * 전체 노드를 확장합니다.\n     */\n    expandAll(): void;\n    /**\n     * 전체 노드를 축소합니다.\n     */\n    collapseAll(): void;\n    /**\n     * 지정된 노드의 확장 상태를 확장 또는 축소합니다.\n     */\n    toggleNode(node: object): void;\n}\n\nexport declare type TreeDataGridSlot = DataGridSlot & {\n    itemRenderer?: TreeRendererCellState;\n};\n\nexport const defaultTreeGridProps = {\n    /**\n     * 트리 구조에서 아이템의 자식 목록을 포함하는 필드의 이름을 정의합니다.\n     * @default 'children'\n     */\n    childrenField: {\n        type: String,\n        default: 'children'\n    },\n    /**\n     * `items`가 갱신될 때 자동으로 확장될 아이템의 레벨을 지정합니다.\n     * 예를 들어, 이 속성의 값이 2인 경우, `items`가 갱신될 때 2번째 레벨까지 모든 아이템이 자동으로 확장됩니다.\n     */\n    autoExpandLevel: {\n        type: Number,\n        default: 0\n    }\n};\n\nexport declare type TreeGridPropsType = DataGridPropsType & typeof defaultTreeGridProps;\nconst TachyonTreeGridImpl = defineComponent({\n    name: 'TachyonTreeGrid',\n    emits: [...NativeEvents, 'update:modelValue', 'update:selectedItem', 'update:selectedItems', 'update:selectedCell', 'update:selectedCells'],\n    props: {\n        ...defaultDataGridProps,\n        ...defaultTreeGridProps\n    },\n    setup(props, context) {\n        const result = defaultDataGridSetup<any>(props, context, new TreeGrid());\n        const nativeInstance = result.nativeInstance;\n        return {\n            ...result,\n            ...makeDefaultDataGridMethods(nativeInstance as any),\n            openNode(node: object): boolean {\n                return nativeInstance.openNode(node);\n            },\n            closeNode(node: object): boolean {\n                return nativeInstance.closeNode(node);\n            },\n            expandNode(node: object): boolean {\n                return nativeInstance.openNode(node);\n            },\n            collapseNode(node: object): boolean {\n                return nativeInstance.closeNode(node);\n            },\n            expandAll(): void {\n                nativeInstance.expandAll();\n            },\n            collapseAll(): void {\n                nativeInstance.collapseAll();\n            },\n            toggleNode(node: object): void {\n                nativeInstance.toggleNode(node);\n            }\n        };\n    }\n});\n\nconst TachyonTreeGrid = TachyonTreeGridImpl as unknown as DefineComponent<\n    TreeGridPropsType,\n    {},\n    DataGridGetters,\n    {},\n    TreeGridMethods,\n    {},\n    {},\n    DataGridEvents,\n    string,\n    PublicProps,\n    ExtractPropTypes<TreeGridPropsType>,\n    ExtractPropTypes<TreeGridPropsType>,\n    SlotsType<TreeDataGridSlot>\n>;\n\nexport default TachyonTreeGrid;\n","import {defineComponent, h, inject, PropType, shallowRef, triggerRef} from 'vue';\nimport {TreeState} from './defines/state';\nimport {useRender} from '@/util/useRender';\nimport {GridColumnSymbol} from '@/components/TachyonColumn';\nimport {TreeGrid} from 'tachyon.js';\n\nexport default defineComponent({\n    name: 'TachyonTreeGridItem',\n    props: {\n        slotName: {\n            type: String\n        },\n        initState: {\n            type: Object as PropType<TreeState>\n        }\n    },\n    setup(props, context) {\n        const {grid} = inject<{grid: TreeGrid}>(GridColumnSymbol);\n        const state = shallowRef<TreeState>(props.initState);\n        const slot = context.slots[props.slotName];\n        const hookToggle = (item: any) => {\n            grid.toggleNode(item);\n        };\n\n        const hookSetValue = (value: any) => {\n            grid.collection?.setItemValue(state.value.item, state.value.column.dataField, value);\n        };\n\n        useRender(() => {\n            const children = [];\n            if (slot && state.value) {\n                children.push(slot({...state.value, hookToggle, hookSetValue}));\n            } else {\n                const toggleNode = h(\n                    'button',\n                    {\n                        class: ['item-toggle'],\n                        onMousedown: event => {\n                            event.preventDefault();\n                        },\n                        onClick: event => {\n                            event.preventDefault();\n                            grid.toggleNode(state.value.item);\n                        }\n                    },\n                    h('i', {class: 'item-toggle-icon'})\n                );\n\n                const labelNode = h('div', {class: 'item-label'}, state.value.label);\n                children.push(toggleNode, labelNode);\n            }\n\n            return h(\n                'div',\n                {\n                    class: ['tachyon-tree-item', {'item--open': state.value.isOpened}]\n                },\n                children\n            );\n        });\n\n        function triggerState() {\n            triggerRef(state);\n        }\n\n        return {\n            state,\n            triggerState\n        };\n    },\n    prepare(state: TreeState): void {\n        this.state = state;\n        this.triggerState();\n    }\n});\n","import {DefineComponent, defineComponent, ExtractPropTypes, PropType, PublicProps, SlotsType} from 'vue';\nimport {ColumnPropsType, defaultColumnProps, GridColumnGetters, GridColumnSlot, internalColumnSetup} from '../components/TachyonColumn';\nimport {GridColumn, TreeGrid, TreeGridColumn} from 'tachyon.js';\nimport TachyonTreeGridItemRenderer from '@/components/TachyonTreeGridItemRenderer';\nimport {TreeRendererCellState} from '@/components/defines/state';\nimport {AnyDefineComponent} from '@/util/componentWrapper';\n\nexport interface TreeGridColumnProvider {\n    readonly grid: TreeGrid;\n    readonly column: TreeGridColumn;\n}\n\nexport declare type TreeGridColumnSlot = GridColumnSlot & {\n    itemRenderer?: TreeRendererCellState;\n};\n\nexport const defaultTreeColumnProps = {\n    /**\n     * 레벨 별 좌측 간격입니다.\n     */\n    indent: {\n        type: Number,\n        default: 30\n    },\n    /**\n     * 노드 모양을 '┌' 보이게 합니다.\n     */\n    boxMode: {\n        type: Boolean,\n        default: false\n    },\n    itemRenderer: {\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>,\n        default: () => TachyonTreeGridItemRenderer\n    }\n};\nexport type TreeColumnPropsType = ColumnPropsType & typeof defaultTreeColumnProps;\nconst TachyonTreeColumnImpl = defineComponent({\n    name: 'TachyonTreeColumn',\n    props: {\n        ...defaultColumnProps,\n        ...defaultTreeColumnProps\n    },\n    setup(props, context) {\n        const result = internalColumnSetup<TreeGridColumn>(props, context, new TreeGridColumn());\n        return {\n            ...result\n        };\n    }\n});\n\nconst TachyonTreeColumn = TachyonTreeColumnImpl as unknown as DefineComponent<\n    TreeColumnPropsType,\n    {},\n    GridColumnGetters,\n    {},\n    {},\n    {},\n    {},\n    {},\n    string,\n    PublicProps,\n    ExtractPropTypes<TreeColumnPropsType>,\n    ExtractPropTypes<TreeColumnPropsType>,\n    SlotsType<TreeGridColumnSlot>\n>;\n\nexport default TachyonTreeColumn;\n","import {App, Plugin} from 'vue';\nimport * as components from './components';\n\nconst install: Exclude<Plugin['install'], undefined> = (app: App) => {\n    Object.entries(components).forEach(([componentName, component]) => {\n        app.component(componentName, component);\n    });\n};\n\nexport * from './components';\nexport {DataGridSymbol} from './components/TachyonGrid';\nexport {TreeGridSymbol} from './components/TachyonTreeGrid';\nexport {GridColumnSymbol, defaultColumnProps} from './components/TachyonColumn';\nexport {defaultTreeColumnProps} from './components/TachyonTreeColumn';\nexport type * from './components/TachyonColumn';\nexport type * from './components/TachyonTreeColumn';\n\nexport * from './globalComponents';\nexport type * from './components/defines';\nexport {default as config, CellPosition, DataGrid, GridColumn, TreeGrid, TreeGridColumn, addon, formatter, theme, helper} from 'tachyon.js';\nexport type * from 'tachyon.js';\n\nexport default install;\n"],"names":["mixin","args","target","end","override","i","source","name","callHook","callValue","value","clampValue","min","max","internalParsePath","cacheFunction","parsePath","path","type","getValue","data","num","o","field","setValue","getLeafNodes","node","childrenField","leaves","children","callback","cache","result","nextFrameOnce","hasMap","frameId","defaultConfig","Reason","Point","p1","p2","x","y","Rectangle","width","height","v","rect","x1","y1","x2","y2","buildTemplate","html","fragment","template","searchNode","count","search","child","parseAnnotations","annotations","index","attributes","id","events","attribute","mountDomTemplate","element","domMaps","annotation","boundHandler","event","handlerName","handler","Base","behaviors","temp","behavior","setPosition","style","setSize","w","h","setLayout","sizeFlag","setTranslate","addClass","className","classList","removeClass","isEditableNode","Element$1","Element","newIndex","parent","positionFlag","listener","useCapture","numericCompare","a","b","stringCompare","caseInsensitive","createFakeTextarea","copy","focusedElement","fakeElement","resolve","paste","ROW_TOKEN","COLUMN_TOKEN","toTable","grid","cell","dataGroup","collection","columns","c","rows","numColumns","item","row","j","cur","next","parseFromExcel","text","textRows","numRows","getDefaultExportFromCjs","thenBy_module","identity","ignoreCase","makeCompareFunction","f","opt","prop","v1","uf","preprocess","cmp","v2","descTokens","tb","func","thenBy","EventCounter","IList","fromIndex","items","property","sortFields","toIndex","oldValue","kind","oldIndex","detail","ArrayList","array","sourceIndex","activeIndex","sItem","numItems","removedItems","removed","from","to","lowerBound","upperBound","direction","CellPosition","rowIndex","columnIndex","endRowIndex","endColumnIndex","isCrossed","Styleable","values","styles","defStyles","nonStyleNames","IFormatter","options","createFactory$1","scope","Formatter","formatter","get$2","add$2","remove$2","createFormatter","factory","formatter$1","updateChildren","depth","numChildren","GridColumn","dataField","headerText","p","visible","e","column","key","Scroller","content","needAllUpdate","scroller","contentContainer","viewMinHeight","delta","scrollLeft","scrollTop","scrollChanged","DEFAULT_PADDING","lineTo","ctx","dashed","color","dx","dy","measureFontHeight","fontStyle","fontDraw","pixels","start","measureTextWidth","paintSingleLine","hAlign","vAlign","padding","textWidth","textHeight","fitText","lines","numLines","findLines","squeeze","words","stillFits","line","string","paintMultiLine","paddingWidth","totalHeight","ox","oy","canvas","Renderer","state","eventName","component","ItemRenderer","nullItemRenderer","defaultItemRenderer","cp","label","textAlign","defaultHeaderRenderer","labelDisplay","iconDisplay","iconContainer","sortColumns","numSortColumns","sortIndex","defaultTreeItemRenderer","level","indent","isOpen","hasChildren","indentBox","toggleButton","defaultItemEditor","input","inputtedKey","numChar","Cell","DataCell","cellPosition","TreeCell","HeaderCell","EditCell","Group","old","reason","reasons","layer","layers","numLayers","scrollX","scrollY","contentWidth","contentHeight","frozenRect","renderers","cellState","renderer","elements","PREFIX_CLASS_NAME","Layer","Section","H_SECTION_NAMES","V_SECTION_NAMES","RendererLayer","section","numSections","sx","sy","sw","sh","vIndex","hIndex","HeaderDimensions","headerGroup","oldHeaders","offset","header","headers","closeDepth","dimensions","oldVisibleColumns","visibleColumns","layouts","done","layout","dataDimensions","headerHeight","rowHeight","yy","pc","hh","DRAG_SHIELD","DOUBLE_CLICK_DELAY$1","HeaderGroup","boundDataGroupEvent","found","isColumnsChanged","isColumnVisibleChanged","isRendererChanged","isVisibleColumnsChanged","isColumnUpdated","context","newHeader","cacheHeader","isLeaf","columnLineStyle","parentColumn","parentLayout","lastColumnLayout","lastRight","headerRowLine","headerRenderer","trigger","point","right","separatorColumn","eventType","CrossCellPosition","cells","internalFindCell","numCells","Merger","arr","ty","tx","removedCells","visibleCells","includeCrossCells","maxCell","columnIndices","mergeDependColumns","numIndices","sourceItem","sourceColumn","sourceValue","curIndex","nextColumnIndex","nextEndRowIndex","startRowIndex","targetItem","nextValue","Mergeable","is","equals","isDeep","compare","isFirst","internalEqual","keysA","keysB","shallowEquals","SelectionCellPosition","isAdded","SINGLE_ROW","MULTIPLE_ROWS","SINGLE_CELL","MULTIPLE_CELLS","Selector","maxBounds","top","bottom","tempCell","bounds","mergedCells","hasMergedCell","r","flag","selectionCell","Selectable","indices","funcName","helper","eventCounter","cancelable","createRootNode","childField","createChildrenField","arrayInsert","arrayRemove","find","isPostOrder","onlyOne","childChildren","getDepth","NO_PARENT","PARENT_TO_ABOVE","HierarchyList","pNodes","active","parentNode","doParentMapping","nodes","displayableChildren","numNodes","toParent","removeIndex","removedNodes","dispatch","prefetchNode","postOrder","parents","bubbles","optionalParams","ColumnCollection","boundCollectionChange","BLOCK_SIZE","BLOCK_SHIFT","BLOCK_MASK","Block","lastValue","removedValue","LinearVector","blockIndex","block","size","startY","blockOffset","total","blocks","numBlocks","preValue","createEmptyArray","RowLinearVector","heights","spliceFunc","emptyArray","cellHeights","previous","current","Row","dimension","ChildColumn","hostColumn","columnLevel","TreeGridColumn","normalizeInterval","startFrozenOffset","endFrozenOffset","startIndex","endIndex","minIndex","maxIndex","startOffset","endOffset","snIndex","enIndex","containLine","from1","to1","from2","to2","containInterval","DataDimensions","cellPositions","columnInterval","scl","ecl","rl","cl","rowInterval","srl","erl","rowVisible","columnVisible","oldRows","oldMergeCells","frozenLeft","frozenRight","frozenTop","frozenBottom","isNeed","isChanged","defaultWidth","visibleIndices","flexibleIndices","calculateWidth","cw","activeTotal","leftColumnsWidth","columnWidth","startColumnIndex","nWidth","oldColumnWidth","vIndices","numVIndices","startCenterOffset","endCenterOffset","leftWidth","rightWidth","centerWidth","startCenterX","startRightX","xx","baseX","cx","TOKEN","PROPERTIES_KEY","COMPANY_URL_KEY","TABLE","GLOBAL","__isLicense","generate","d","len","COMPANY_URL","m","KEY_MAP","keyCharAt","parse","decrypt","b64Decode","o1","o2","o3","h1","h2","h3","h4","bits","isLicense","ip","keys","version","paintLicenseMark","NONE_MODE","DOUBLE_CLICK_DELAY","dummyCellPosition","GroupData","createContext","containsCellPosition","findCell","DataGroup","oldColumns","newColumns","isItemsChanged","isMergedChanged","oldColumnIndices","frozenIndexRect","startOffsetY","frozenSizeRect","removedRows","removedMergeCells","vSectionIndex","startRowY","autoRowHeight","cellMerger","autoMerge","groupData","viewHeight","asyncCreateRow","startTime","TIME","oldRowHeight","execute","lastIndex","lastY","preStartRow","preEndRow","updateRow","rowY","offsetY","newCells","newCell","mergeCell","cellCache","isMerged","columnLayouts","DEFAULT_WIDTH","DEFAULT_HEIGHT","rowColors","backgroundColor","cellBackgroundColor","isRowSelection","numColumnLayouts","rowLineStyle","rowDrawLine","fromOffset","toOffset","sl","el","columnDrawLine","frozenLineStyle","lineStyle","lineWidth","ww","isCellMode","isRowMode","position","isNullRenderer","itemRenderer","needUpdate","hChanged","vChanged","frozenIndex","frozenSize","leftIndex","rightIndex","oldLeftIndex","oldRightIndex","allowSelection","isHorizontal","isVertical","shiftKey","ctrlKey","props","left","scrollRect","scrollRight","scrollBottom","dxl","dxr","dyt","dyb","ri","removeCellPosition","newValue","caretRowIndex","caretColumnIndex","newClickTime","isDispatch","TYPE_MAP","POSSIBLE_KEY_CODES","DataGridEditor","boundGridItemEvent","editor","editCell","itemEditor","isReverse","isEdited","increments","nextRowIndex","isEditing","keyCode","createFunction","operator","contains","ignore","notContains","startsWith","endsWith","Operators","getOperator","valueToString","valueToNumber","parseConditions","conditions","setCondition","IFilter","manager","parsed","filter","SetFilter","numValues","set","compareAB","condition","RangeFilter","fromResult","NumberFilter","DateFilter","TextFilter","FuncFilter","FilterManager","activeFilters","executeFilter","isRecycle","oldMap","Filterable","IAddon","addons","getAddons","k","createFactory","Addon","get$1","add$1","remove$1","addon","AddonHelper","boundDataGroupRender","theme","get","add","remove","theme$1","HEADER_EVENTS","HEADER_SEPARATOR_EVENTS","HEADER_ALL_EVENTS","ITEM_EVENTS","DATA_GROUP_EVENTS","PRIORITY","prioritySortFunction","aPriority","bPriority","getSortFunction","isValidDropColumn","leafColumn","isNext","activeParent","childIndex","DataGrid","entries","observer","boundHeaderEvents","boundHeaderSeparatorEvents","boundRedispatch","sortFunc","oldHasVScroll","oldHasHScroll","oldScrollHeight","scrollHeight","container","_a","rowIndices","isExtend","isCellSelectionMode","firstVisibleRowIndex","lastVisibleRowIndex","SCROLL_DELTA","sizeRect","hsp","vsp","scrollFunc","oldHSP","oldVSP","group","indicator","columnX","columnLayout","destroy","htmlElement","mouseEvent","info","cursorPoint","overLeafColumnIndex","overLeafColumn","isNextColumn","insertColumnIndex","dragColumn","dropColumn","currentIndex","insertIndex","multiple","isReverseSort","oldSortDescending","oldRowIndex","oldColumnIndex","isDragStart","updateSelection","moveEvent","onItemEvent","anchorRowIndex","anchorColumnIndex","HIERARCHY_NODE_EVENTS","TreeGroup","treeColumns","maxLevel","itemIndex","sc","ec","oldChildren","cacheIndex","updateCallback","createCallback","crossCellPositions","isReset","nodeEvent","TreeGrid","boundHierarchyNodeListener","list","tachyon","config","useRender","render","getCurrentInstance","FLUSH_AFTER_MOUNTED_PROPS","DEEP_WATCH","mountNative","componentInstance","nativeInstance","onDispatch","flushAfterMounted","onMounted","onUnmounted","bindNative","exceptProps","isObjectReactive","isReactive","unwatchs","deep","watchOptions","watchSource","watch","fn","ItemWrapper","wrapper","prepareFn","createWrapper","instance","vnode","createVNode","createItemFactory","host","slotName","defineComponent","hookSetup","isVueComponent","useItemFactory","defaultSlotItemFactory","isColumnTag","slot","getChildren","getColumnSlots","_b","SelectableMap","useModel","nativeProp","internal","ref","isTwoWay","computed","vProps","model","rowValue","toRaw","update","useSelectableModels","selectionMode","debounce","delay","timerId","useColumnRender","childVNodes","nextTick","equal","shallowEqual","TachyonGridItemEditor","columnProvider","inject","GridColumnSymbol","shallowRef","lazySaveValue","hookEditEnd","hookSetValue","triggerState","triggerRef","defaultColumnProps","internalColumnSetup","provider","DataGridSymbol","factoryProps","TachyonGridItemRenderer","provide","TachyonColumnImpl","TachyonColumn","NativeEvents","defaultDataGridProps","makeDefaultDataGridMethods","defaultDataGridSetup","columnVNodes","resetColumns","debounceResetColumns","isMounted","TachyonGridImpl","TachyonGrid","TreeGridSymbol","defaultTreeGridProps","TachyonTreeGridImpl","TachyonTreeGrid","TachyonTreeGridItemRenderer","hookToggle","toggleNode","labelNode","defaultTreeColumnProps","TachyonTreeColumnImpl","TachyonTreeColumn","install","app","components","componentName"],"mappings":"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"}