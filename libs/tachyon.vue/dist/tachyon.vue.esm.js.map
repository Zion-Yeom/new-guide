{"version":3,"file":"tachyon.vue.esm.js","sources":["../../tachyon-core/dist/tachyon.esm.js","../src/util/useRender.ts","../src/util/native.ts","../src/util/componentWrapper.ts","../src/util/useItemFactory.ts","../src/util/getColumnSlots.ts","../src/util/useModel.ts","../src/util/debounce.ts","../src/util/useColumnRender.ts","../src/util/equal.ts","../src/components/TachyonGridItemEditor.ts","../src/components/TachyonColumn.ts","../src/components/TachyonGridItemRenderer.ts","../src/components/TachyonGrid.ts","../src/components/TachyonTreeGrid.ts","../src/components/TachyonTreeGridItemRenderer.ts","../src/components/TachyonTreeColumn.ts","../src/index.ts"],"sourcesContent":["/*!\n * tachyon.js v1.1.2\n */\nfunction mixin(...args) {\n    const target = args[0];\n    let end = args.length;\n    let override = true;\n    if (typeof args[end - 1] === 'boolean') {\n        override = args[end - 1];\n        end -= 1;\n    }\n\n    for (let i = 1; i < end; i++) {\n        let source = args[i];\n        let names = Object.getOwnPropertyNames(source);\n        names.forEach((name) => {\n            if ((override || !target.hasOwnProperty(name))) {\n                Object.defineProperty(target, name, Object.getOwnPropertyDescriptor(source, name));\n            }\n        });\n    }\n\n    return target;\n}\n\nfunction callHook(target, name, ...args) {\n    if (name in target) {\n        return target[name].apply(target, args);\n    }\n}\n\nfunction callValue(value, ...args) {\n    if (value instanceof Function) {\n        return value.apply(null, args);\n    }\n    return value;\n}\n\nfunction clampValue(value, min, max) {\n    if (!isNaN(min)) {\n        value = Math.max(value, min);\n    }\n    if (!isNaN(max)) {\n        value = Math.min(value, max);\n    }\n    return value;\n}\n\nconst internalParsePath = cacheFunction((value) => {\n    return value && ((value.indexOf('.') !== -1 && value.split('.')) || [value]);\n});\n\nfunction parsePath(path) {\n    if (Array.isArray(path)) ; else {\n        const type = typeof path;\n        switch (type) {\n            case 'number':\n                path += '';\n            case 'string':\n                path = internalParsePath(path);\n                break;\n            default: {\n                throw new TypeError(`path must be a Number/String/Array, received ${type} instead.`);\n            }\n        }\n    }\n    return path;\n}\n\n/**\n *\n * @param {Object} data\n * @param {Array, String} path\n * @returns {*}\n */\nfunction getValue(data, path) {\n    path = parsePath(path);\n    const num = path && path.length || 0;\n    let o = data;\n    for (let i = 0; i < num; i++) {\n        let field = path[i];\n        if (field in o) {\n            o = o[field];\n        } else {\n            return null;\n        }\n    }\n    return o;\n}\n\n/**\n *\n * @param data\n * @param path\n * @param value\n * @returns {boolean}\n */\nfunction setValue(data, path, value) {\n    path = parsePath(path);\n    const num = path && path.length || 0;\n    let o = data;\n    let i = 0;\n    for (; i < num - 1; i++) {\n        let field = path[i];\n        if (field in o) {\n            o = o[field];\n        } else {\n            //error\n            o = null;\n            break;\n        }\n    }\n\n    if (o && num > 0 && o[path[i]] !== value) {\n        o[path[i]] = value;\n        return true;\n    }\n    return false;\n}\n\nfunction getLeafNodes(node, childrenField = 'children') {\n    let leaves = [];\n    let children = node[childrenField];\n    let num = Array.isArray(children) && children.length || 0;\n    if (num > 0) {\n        for (let i = 0; i < num; i++) {\n            leaves = leaves.concat(getLeafNodes(children[i], childrenField));\n        }\n    } else {\n        leaves.push(node);\n    }\n    return leaves;\n}\n\nfunction cacheFunction(callback) {\n    let cache = {};\n    return (value) => {\n        let result = cache[value];\n        if (result === undefined) {\n            cache[value] = result = callback(value);\n        }\n        return result;\n    };\n}\n\nconst nextFrameOnce = (() => {\n    const hasMap = new WeakMap();\n    return (callback, args) => {\n        let frameId = hasMap.get(callback);\n        if (frameId) {\n            window.cancelAnimationFrame(frameId);\n            hasMap.delete(callback);\n        }\n        frameId = window.requestAnimationFrame(() => {\n            callback.apply(null, args);\n            hasMap.delete(callback);\n        });\n        hasMap.set(callback, frameId);\n    };\n})();\n\nvar defaultConfig = {\r\n\r\n    /*----------------------------\r\n     *  Styles\r\n     *----------------------------*/\r\n    styles: {\r\n        /**\r\n         * 배경 색.\r\n         */\r\n        backgroundColor: '#FFFFFF',\r\n        /**\r\n         * 기본 폰트\r\n         */\r\n        font: '14px Arial',\r\n\r\n        /**\r\n         * 기본 폰트 색\r\n         */\r\n        color: 'RGB(73,105,131)',\r\n\r\n        /**\r\n         * 셀 텍스트 정렬\r\n         */\r\n        textAlign: 'left',\r\n\r\n        /**\r\n         * 셀 수직 정렬\r\n         */\r\n        verticalAlign: 'center',\r\n\r\n        /**\r\n         * 기본 행 크기\r\n         */\r\n        rowHeight: 30,\r\n\r\n        /**\r\n         * 헤더 기본 행 크기\r\n         */\r\n        headerRowHeight: 30,\r\n\r\n        /**\r\n         * 셀 선택 배경색\r\n         */\r\n        cellSelectionColor: 'RGB(183,210,222)',\r\n\r\n        /**\r\n         * 셀 오버 배경색\r\n         */\r\n        cellOverColor: 'RGBA(215,237,247,0.5)',\r\n\r\n        /**\r\n         * 셀 선택 텍스트 색\r\n         */\r\n        textSelectionColor: 'RGB(73,105,131)',\r\n\r\n        /**\r\n         * 셀 오버 텍스트 색\r\n         */\r\n        textOverColor: 'RGB(73,105,131)',\r\n\r\n        /**\r\n         * 행 배경 색\r\n         */\r\n        rowColors: ['#F2F5F8'],\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        cellPadding: {\r\n            left: 3,\r\n            right: 3,\r\n            top: 2,\r\n            bottom: 2\r\n        },\r\n\r\n        /**\r\n         * 행 구분선\r\n         */\r\n        rowLine: {\r\n            width: 1,\r\n            color: '#B3B4B6',\r\n            dashed: []\r\n        },\r\n\r\n        /**\r\n         * 컬럼 구분선\r\n         */\r\n        columnLine: {\r\n            width: 1,\r\n            color: '#B3B4B6',\r\n            dashed: []\r\n        },\r\n\r\n        /**\r\n         * 고정 구분선\r\n         */\r\n        frozenLine: {\r\n            width: 1,\r\n            color: '#000000',\r\n            dashed: []\r\n        },\r\n\r\n        /**\r\n         * 캐럿\r\n         */\r\n        caretLine: {\r\n            width: 2,\r\n            color: 'RGB(52,102,124)',\r\n            dashed: []\r\n        },\r\n\r\n        /**\r\n         * 헤더 행 구분선\r\n         */\r\n        headerRowLine: {\r\n            width: 1,\r\n            color: 'RGBA(72,84,101, 0.7)',\r\n            dashed: []\r\n        },\r\n\r\n        /**\r\n         * 헤더 행 구분선\r\n         */\r\n        headerColumnLine: {\r\n            width: 1,\r\n            color: 'RGBA(72,84,101, 0.7)',\r\n            dashed: []\r\n        },\r\n    },\r\n\r\n    cacheMode: 'hidden',\r\n    editOnKeys: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"Â£$%^&*()_+-=[];\\'#,./\\|<>?:@~{} ',\r\n\r\n    /*----------------------------\r\n     *  itemRenderer\r\n     *----------------------------*/\r\n    itemRenderer: null,\r\n\r\n    /*----------------------------\r\n     *  headerRenderer\r\n     *----------------------------*/\r\n    headerRenderer: null,\r\n\r\n    /*----------------------------\r\n     *  itemEditor\r\n     *----------------------------*/\r\n    itemEditor: null,\r\n\r\n    /*----------------------------\r\n     *  treeItemRenderer\r\n     *----------------------------*/\r\n    treeItemRenderer: null,\r\n\r\n    /*----------------------------\r\n     *  groupingItemRenderer\r\n     *----------------------------*/\r\n    groupingItemRenderer: null,\r\n};\n\nconst Reason = {\n    //화면갱신\n    DISPLAY_UPDATE: 1 << 1,\n\n    //아이템 목록 변경\n    ITEMS_CHANGE: 1 << 2,\n    //컬럼 목록 변경\n    COLUMNS_CHANGE: 1 << 3,\n    //화면에 보이는 컬럼 변경\n    VISIBLE_COLUMNS_CHANGE: 1 << 4,\n\n    //아이템 갱신\n    ITEM_UPDATE: 1 << 5,\n    //컬럼 갱신\n    COLUMN_UPDATE: 1 << 6,\n    //컬럼 비지블 갱신\n    COLUMN_VISIBLE: 1 << 7,\n\n    //TODO change 보다 update ?????\n    //수직 스크롤 변경\n    VERTICAL_SCROLL_CHANGE: 1 << 8,\n    //스평 스크롤 변경\n    HORIZONTAL_SCROLL_CHANGE: 1 << 9,\n\n    //선택 변경\n    SELECTION_CHANGE: 1 << 10,\n    //캐럿 변경\n    CARET_CHANGE: 1 << 11,\n    //아이템 렌더러 변경\n    RENDERER_CHANGE: 1 << 12,\n\n    //스타일 변경\n    STYLES_CHANGE: 1 << 13,\n\n    ROW_HEIGHT_CHANGE: 1 << 14,\n\n    GROUP_SIZE_CHANGE: 1 << 15,\n\n    //전체 갱신\n    ALL: 0xFFFFFFFF\n};\n\n/**\r\n * Point 2차원 좌표계에서의 위치.\r\n * @param x\r\n * @param y\r\n * @constructor\r\n */\r\nclass Point {\r\n\r\n    /**\r\n     * 두점 사이의 거리를 구합니다.\r\n     * @param p1\r\n     * @param p2\r\n     * @returns {number}\r\n     */\r\n    static distance(p1, p2) {\r\n        return Math.sqrt(Math.pow((p1.x - p2.x), 2) + Math.pow((p1.y - p2.y), 2));\r\n    }\r\n\r\n    constructor(x, y) {\r\n        this.setValues(x, y);\r\n    }\r\n\r\n    get length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    /**\r\n     * x, y 좌표를 설정합니다.\r\n     * @param x\r\n     * @param y\r\n     * @returns {Point}\r\n     */\r\n    setValues(x, y) {\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 객체의 복사본을 만듭니다.\r\n     * @returns {Point}\r\n     */\r\n    clone() {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * x, y좌표를 문자열로 반환합니다.\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return '[Point (x=' + this.x + ' y=' + this.y + ')]';\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Rectangle (x,y)를 시작점으로 width, height 크기를 가진 영역.\r\n * @param x\r\n * @param y\r\n * @param width\r\n * @param height\r\n * @constructor\r\n */\r\nclass Rectangle {\r\n    constructor(x, y, width, height) {\r\n        this.setValues(x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * 사각형의 왼쪽 x 좌표 입니다.\r\n     * @returns {number}\r\n     */\r\n    get left() {\r\n        return this.x;\r\n    }\r\n\r\n    set left(v) {\r\n        this.width -= v - this.x;\r\n        this.x = v;\r\n    }\r\n\r\n    /**\r\n     * 사각형의 오른쪽 x 좌표 입니다.\r\n     * @returns {number}\r\n     */\r\n    get right() {\r\n        return this.x + this.width;\r\n    }\r\n\r\n    set right(v) {\r\n        this.width = v - this.x;\r\n    }\r\n\r\n    /**\r\n     * 사각형의 위쪽 y 좌표 입니다.\r\n     * @returns {number}\r\n     */\r\n    get top() {\r\n        return this.y;\r\n    }\r\n\r\n    set top(v) {\r\n        this.height -= v - this.y;\r\n        this.y = v;\r\n    }\r\n\r\n    /**\r\n     * 사각형의 아래쪽 y 좌표 입니다.\r\n     * @returns {number}\r\n     */\r\n    get bottom() {\r\n        return this.y + this.height;\r\n    }\r\n\r\n    set bottom(v) {\r\n        this.height = v - this.y;\r\n    }\r\n\r\n    /**\r\n     * x, y, width, height 속성을 설정합니다.\r\n     * @param x\r\n     * @param y\r\n     * @param width\r\n     * @param height\r\n     * @returns {Rectangle}\r\n     */\r\n    setValues(x, y, width, height) {\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n        this.width = width || 0;\r\n        this.height = height || 0;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *  지정된 rect이 자신의 영역과 같은지 여부입니다.\r\n     * @param rect\r\n     * @returns {boolean}\r\n     */\r\n    equals(rect) {\r\n        return (rect && rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height);\r\n    }\r\n\r\n    extend(x, y, width, height) {\r\n        width = width || 0;\r\n        height = height || 0;\r\n        if (x + width > this.x + this.width) {\r\n            this.width = x + width - this.x;\r\n        }\r\n        if (y + height > this.y + this.height) {\r\n            this.height = y + height - this.y;\r\n        }\r\n        if (x < this.x) {\r\n            this.width += this.x - x;\r\n            this.x = x;\r\n        }\r\n        if (y < this.y) {\r\n            this.height += this.y - y;\r\n            this.y = y;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 지정된 영역이 자신영역 내에 포함되는지 여부입니다.\r\n     * @param x\r\n     * @param y\r\n     * @param width\r\n     * @param height\r\n     * @returns {boolean}\r\n     */\r\n    contains(x, y, width, height) {\r\n        width = width || 0;\r\n        height = height || 0;\r\n        return (x >= this.x && x + width <= this.x + this.width && y >= this.y && y + height <= this.y + this.height);\r\n    }\r\n\r\n    /**\r\n     * 지정된 rect이 자신 영역 내에 포함되는지 여부입니다.\r\n     * @param rect\r\n     * @returns {boolean}\r\n     */\r\n    containsRect(rect) {\r\n        if (!rect) {\r\n            return false;\r\n        }\r\n        return this.contains(rect.x, rect.y, rect.width, rect.height);\r\n    }\r\n\r\n    /**\r\n     * 지정된 rect과 결합하여 새로운 사각형을 반환합니다.\r\n     * @param rect\r\n     * @returns {Rectangle}\r\n     */\r\n    union(rect) {\r\n        return this.clone().extend(rect.x, rect.y, rect.width, rect.height);\r\n    }\r\n\r\n    /**\r\n     * 지정된 rect이 자신과 교차 새로운 사각형을 반환합니다.\r\n     * @param rect\r\n     * @returns {boolean}\r\n     */\r\n    intersection(rect) {\r\n        var x1 = rect.x, y1 = rect.y, x2 = x1 + rect.width, y2 = y1 + rect.height;\r\n        if (this.x > x1) {\r\n            x1 = this.x;\r\n        }\r\n        if (this.y > y1) {\r\n            y1 = this.y;\r\n        }\r\n        if (this.x + this.width < x2) {\r\n            x2 = this.x + this.width;\r\n        }\r\n        if (this.y + this.height < y2) {\r\n            y2 = this.y + this.height;\r\n        }\r\n        return (x2 <= x1 || y2 <= y1) ? null : new Rectangle(x1, y1, x2 - x1, y2 - y1);\r\n    }\r\n\r\n    /**\r\n     * 지정된 rect이 자신과 교차하는지 여부입니다.\r\n     * @param rect\r\n     * @returns {boolean}\r\n     */\r\n    intersects(rect) {\r\n        return (rect.x <= this.x + this.width && this.x <= rect.x + rect.width && rect.y <= this.y + this.height && this.y <= rect.y + rect.height);\r\n    }\r\n\r\n    /**\r\n     * 모든 속성을 0으로 설정합니다.\r\n     */\r\n    setEmpty() {\r\n        this.setValues(0, 0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * 객체 영역이 비어있는지 여부입니다.\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return this.width <= 0 || this.height <= 0;\r\n    }\r\n\r\n    /**\r\n     * 객체의 복사본을 만듭니다.\r\n     * @returns {Rectangle}\r\n     */\r\n    clone() {\r\n        return new Rectangle(this.x, this.y, this.width, this.height);\r\n    }\r\n\r\n    toString() {\r\n        return '[Rectangle (x=' + this.x + ' y=' + this.y + ' width=' + this.width + ' height=' + this.height + ')]';\r\n    }\r\n}\n\n/**\n * 해당 html를 HTMLTemplateElement 형태로 변경합니다.\n * 최상위 루트는 하나만 가능합니다.\n * @param html\n * @returns {DocumentFragment}\n */\nfunction buildTemplate(html) {\n    let fragment, template;\n    if (typeof HTMLTemplateElement === 'undefined') {\n        template = document.createElement('div');\n        template.innerHTML = html;\n        fragment = document.createDocumentFragment();\n        fragment.appendChild(template.firstChild);\n    } else {\n        template = document.createElement('template');\n        template.innerHTML = html;\n        fragment = template.content;\n    }\n    return fragment;\n}\n\n/**\n * 해당 node를 전체 탐색합니다.\n * @param node\n * @param callback\n * @returns {number}\n * @private\n */\nfunction searchNode(node, callback) {\n    let count = 0;\n    const search = (node, callback) => {\n        if (node) {\n            callback(node, count++);\n            let child = node.firstChild;\n            while (child) {\n                search(child, callback);\n                child = child.nextSibling;\n            }\n        }\n    };\n    search(node, callback);\n    return count;\n}\n\n/**\n * 해당 노드를 탐색하여 인스턴스화 되었을 때 접근를 위한 어노테이션을 생성합니다.\n * 정의된 속성은 'id'(아이디), 'on-'(이벤트)입니다.\n * @param node\n * @returns {[]}\n */\nfunction parseAnnotations(node) {\n    const annotations = [];\n    searchNode(node, (node, index) => {\n        if (node.attributes) {\n            let attributes = Array.prototype.slice.call(node.attributes);\n            let id = null;\n            let events = [];\n            attributes.forEach(attribute => {\n                const name = attribute.name;\n                const value = attribute.value;\n                if (name === 'id' && value) {\n                    id = value;\n                } else if (name.slice(0, 3) === 'on-' && value) {\n                    node.removeAttribute(name);\n                    events.push({\n                        name: name.slice(3),\n                        value: value\n                    });\n                }\n            });\n\n            if (id || events.length > 0) {\n                annotations[index] = {\n                    id: id,\n                    events: events\n                };\n            }\n        }\n    });\n    return annotations;\n}\n\nfunction mountDomTemplate(target) {\n    const template = target.constructor.__template__;\n    const annotations = target.constructor.__annotations__;\n\n    if (!template) {\n        return;\n    }\n\n    const node = document.importNode(template, true);\n    const element = node && node.querySelector('*') || null;\n    const domMaps = {};\n\n    searchNode(node, (node, index) => {\n        const annotation = annotations[index];\n        const id = annotation && annotation.id;\n        const events = annotation && annotation.events;\n\n        if (id) {\n            domMaps[id] = node;\n            domMaps[id].removeAttribute('id');\n        }\n\n        if (events) {\n            const boundHandler = {};\n            events.forEach(event => {\n                const type = event.name;\n                const handlerName = event.value;\n                if (target[handlerName] instanceof Function) {\n                    let handler = boundHandler[handlerName];\n                    if (!handler) {\n                        handler = boundHandler[handlerName] = target[handlerName].bind(target);\n                    }\n                    node.addEventListener(type, handler);\n                } else {\n                    console.warn(node.localName + ':' + type, 'listener method `' + event.value + '` not defined', node);\n                }\n            });\n        }\n    });\n\n    target.DOM = domMaps;\n    target.root = element;\n    target.root.__instance__ = target;\n}\n\n\nclass Base {\n    static withDom(html) {\n        if (html) {\n            const template = buildTemplate(html);\n            const annotations = parseAnnotations(template);\n            mixin(this, {\n                get __template__() {\n                    return template;\n                },\n                get __annotations__() {\n                    return annotations;\n                }\n            });\n        }\n        return this;\n    }\n\n    static withBehavior(...behaviors) {\n\n        //constructor override 되지 않음\n        mixin.apply(null, [this.prototype, ...behaviors, false]);\n        const temp = this.__behaviors__ || [];\n        mixin(this, {\n            get __behaviors__() {\n                return temp.concat(behaviors);\n            }\n        });\n        return this;\n    }\n\n    constructor() {\n        mountDomTemplate(this);\n        (this.constructor.__behaviors__ || []).forEach(behavior => {\n            if (behavior.constructor instanceof Function) {\n                behavior.constructor.call(this);\n            }\n        });\n    }\n\n    get htmlElement() {\n        return this.root;\n    }\n}\n\nfunction setPosition(element, x, y) {\r\n    if (element.__x !== x || element.__y !== y) {\r\n        element.__x = x;\r\n        element.__y = y;\r\n\r\n        const style = element.style;\r\n        style.left = x + 'px';\r\n        style.top = y + 'px';\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n\r\nfunction setSize(element, w, h) {\r\n    if (element.__width !== w || element.__height !== h) {\r\n        element.__width = w;\r\n        element.__height = h;\r\n\r\n        const style = element.style;\r\n        style.width = typeof w === 'number' ? w + 'px' : w;\r\n        style.height = typeof h === 'number' ? h + 'px' : h;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nfunction setLayout(element, x, y, w, h) {\r\n    let sizeFlag = setSize(element, w, h);\r\n    let positionFlag = setPosition(element, x, y);\r\n    return positionFlag || sizeFlag;\r\n}\r\n\r\nfunction setTranslate(element, x, y) {\r\n    if (element.__x !== x || element.__y !== y) {\r\n        const style = element.style;\r\n        style.transform = style.webkitTransform = 'translate(' + x + 'px,' + y + 'px)';\r\n        element.__x = x;\r\n        element.__y = y;\r\n    }\r\n}\r\n\r\nfunction addClass(element, className) {\r\n    const classList = element.classList;\r\n    if (classList && !classList.contains(className)) {\r\n        classList.add(className);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction removeClass(element, className) {\r\n    const classList = element.classList;\r\n    if (classList && classList.contains(className)) {\r\n        classList.remove(className);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isEditableNode(node) {\r\n    if (node instanceof Node) {\r\n        const name = node.nodeName.toLowerCase();\r\n        return (node.nodeType === 1 && (name === 'textarea' || (name === 'input' && /^(?:text|email|number|search|tel|url|password)$/i.test(node.type)))) || node.isContentEditable;\r\n    }\r\n    return false;\r\n}\n\nlet Element$1 = class Element extends Base {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get childContainer() {\r\n        return this.htmlElement;\r\n    }\r\n\r\n    get style() {\r\n        return this.htmlElement.style;\r\n    }\r\n\r\n    get clientWidth() {\r\n        return this.htmlElement.clientWidth;\r\n    }\r\n\r\n    get clientHeight() {\r\n        return this.htmlElement.clientHeight;\r\n    }\r\n\r\n    get childElementCount() {\r\n        return this.childContainer.childElementCount;\r\n    }\r\n\r\n    /**\r\n     * 컨테이너에 child 추가.\r\n     * @param child\r\n     */\r\n    appendChild(child) {\r\n        if (child instanceof Element) {\r\n            child = child.htmlElement;\r\n        }\r\n        return this.childContainer.appendChild(child);\r\n    }\r\n\r\n    /**\r\n     * 컨테이너에 child 삭제\r\n     * @param child\r\n     * @returns {*|Node}\r\n     */\r\n    removeChild(child) {\r\n        if (child instanceof Element) {\r\n            child = child.htmlElement;\r\n        }\r\n\r\n        if (child instanceof HTMLElement && child.parentElement) {\r\n            child.parentElement.removeChild(child);\r\n        }\r\n\r\n        return child;\r\n    }\r\n\r\n    setChildIndex(child, newIndex) {\r\n        if (child instanceof Element) {\r\n            child = child.htmlElement;\r\n        }\r\n        const parent = this.childContainer;\r\n        const children = parent.children;\r\n        const index = Array.prototype.indexOf.call(children, child);\r\n        if (newIndex === index) {\r\n            return false;\r\n        }\r\n        if (index < newIndex) {\r\n            newIndex += 1;\r\n        }\r\n        parent.insertBefore(child, children[newIndex]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * x, y만큼 위치를 변경합니다.\r\n     * @param x\r\n     * @param y\r\n     */\r\n    setPosition(x, y) {\r\n        return setPosition(this.childContainer, x, y);\r\n    }\r\n\r\n    /**\r\n     * 너비와 높이 크기를 변경합니다.\r\n     * @param width\r\n     * @param height\r\n     */\r\n    setSize(width, height) {\r\n        return setSize(this.childContainer, width, height);\r\n    }\r\n\r\n    setLayout(x, y, width, height) {\r\n        let positionFlag = this.setPosition(x, y);\r\n        let sizeFlag = this.setSize(width, height);\r\n        return positionFlag || sizeFlag;\r\n    }\r\n\r\n    addEventListener(type, listener, useCapture) {\r\n        this.htmlElement.addEventListener.apply(this.htmlElement, arguments);\r\n    }\r\n\r\n    removeEventListener(type, listener, useCapture) {\r\n        this.htmlElement.removeEventListener.apply(this.htmlElement, arguments);\r\n    }\r\n\r\n    dispatchEvent(event) {\r\n        return this.htmlElement.dispatchEvent.apply(this.htmlElement, arguments);\r\n    }\r\n};\n\nfunction numericCompare(a, b) {\n    if (isNaN(a) && isNaN(b))\n        return 0;\n\n    if (isNaN(a))\n        return 1;\n\n    if (isNaN(b))\n        return -1;\n\n    if (a < b) {\n        return -1;\n    }\n\n    if (a > b) {\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction stringCompare(a, b, caseInsensitive) {\n    if (a == null && b == null)\n        return 0;\n    if (a == null)\n        return 1;\n\n    if (b == null)\n        return -1;\n\n    if (caseInsensitive) {\n        a = a.toLowerCase();\n        b = b.toLowerCase();\n    }\n\n    if (a < b) {\n        return -1;\n    }\n\n    if (a > b) {\n        return 1;\n    }\n\n    return 0;\n}\n\n/**\n * clipboard 접근하기 위한 임시 Textarea 생성합니다.\n * @returns {HTMLTextAreaElement}\n * @private\n */\nfunction createFakeTextarea() {\n    let element = document.createElement('textarea'),\n        style = element.style;\n    element.onkeydown = (event) => {\n        event.preventDefault();\n    };\n    style.position = 'absolute';\n    style.left = style.top = '-9999px';\n    style.opacity = '0';\n    return element;\n}\n\n/**\n * 클립보드에 해당 value 복사합니다.\n * @param value\n * @returns {Promise<unknown>}\n */\nfunction copy(value) {\n    let focusedElement = document.activeElement,\n        fakeElement = createFakeTextarea();\n    document.body.appendChild(fakeElement);\n    fakeElement.value = value;\n    fakeElement.select();\n    fakeElement.offsetWidth;\n\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            document.body.removeChild(fakeElement);\n            focusedElement.focus();\n            resolve(value);\n        }, 100);\n    });\n}\n\n/**\n * 클립보드 데이타를 반환합니다.\n * @returns {Promise<unknown>}\n */\nfunction paste() {\n\n/*\n    if (navigator.clipboard && navigator.clipboard.readText) {\n        return navigator.clipboard.readText();\n    } else if (window.clipboardData) {\n        return Promise.resolve(window.clipboardData.getData('Text'))\n    }\n  */\n\n    const focusedElement = document.activeElement;\n    const fakeElement = createFakeTextarea();\n    document.body.appendChild(fakeElement);\n    fakeElement.select();\n    fakeElement.offsetWidth;\n    return new Promise(resolve => {\n        setTimeout(() => {\n            const value = fakeElement.value;\n            document.body.removeChild(fakeElement);\n            focusedElement.focus();\n            resolve(value);\n        }, 100);\n    });\n}\n\nconst ROW_TOKEN = '\\n';\nconst COLUMN_TOKEN = '\\t';\n\n/**\n *\n * @param grid\n * @param cell\n * @returns {string}\n */\nfunction toTable(grid, cell) {\n    const dataGroup = grid.dataGroup;\n    const collection = grid.collection;\n\n    let columns;\n    if (dataGroup.isCellSelectionMode) {\n        columns = dataGroup.normalizedColumns.slice(cell.columnIndex, cell.endColumnIndex + 1);\n    } else {\n        columns = dataGroup.normalizedColumns;\n    }\n\n    columns = columns.filter(c => c.visible);\n\n    let rows = [];\n    for (let i = cell.rowIndex, numColumns = columns.length; i <= cell.endRowIndex; i++) {\n        let item = collection.get(i);\n        let row = [];\n        for (let j = 0; j < numColumns; j++) {\n            row[j] = dataGroup.itemToLabel(item, columns[j]);\n        }\n        rows.push(row);\n    }\n\n    let result = rows.reduce((cur, next) => {\n        cur += next.join(COLUMN_TOKEN) + ROW_TOKEN;\n        return cur;\n    }, '');\n\n    return result.substr(0, result.length - ROW_TOKEN.length);\n}\n\n/**\n * 행은 'enter' 컬럼은 'tab'으로 구분된 텍스트 행과 컬럼을 배열 형태로 변경 반환합니다.\n * @param text\n * @returns {[]}\n */\nfunction parseFromExcel(text) {\n\n    let textRows = text.split(ROW_TOKEN);\n    let numRows = textRows.length;\n\n    let rows = [];\n    for (let i = 0; i < numRows; i++) {\n        rows[i] = textRows[i].split(COLUMN_TOKEN);\n    }\n    if (numRows > 0 && rows[numRows - 1].length === 1 && !rows[numRows - 1][0]) {\n        rows.pop();\n    }\n\n    return rows;\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\n/***\n   Copyright 2013 Teun Duynstee\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nvar thenBy_module = (function() {\n\n    function identity(v){return v;}\n\n    function ignoreCase(v){return typeof(v)===\"string\" ? v.toLowerCase() : v;}\n\n    function makeCompareFunction(f, opt){\n        opt = typeof(opt)===\"object\" ? opt : {direction:opt};\n        \n        if(typeof(f)!=\"function\"){\n            var prop = f;\n            // make unary function\n            f = function(v1){return !!v1[prop] ? v1[prop] : \"\";};\n        }\n        if(f.length === 1) {\n            // f is a unary function mapping a single item to its sort score\n            var uf = f;\n            var preprocess = opt.ignoreCase?ignoreCase:identity;\n            var cmp = opt.cmp || function(v1,v2) {return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;};\n            f = function(v1,v2) {return cmp(preprocess(uf(v1)), preprocess(uf(v2)));};\n        }\n        const descTokens = {\"-1\":'', desc:''};\n        if(opt.direction in descTokens) return function(v1,v2){return -f(v1,v2)};\n        return f;\n    }\n\n    /* adds a secondary compare function to the target function (`this` context)\n       which is applied in case the first one returns 0 (equal)\n       returns a new compare function, which has a `thenBy` method as well */\n    function tb(func, opt) {\n        /* should get value false for the first call. This can be done by calling the \n        exported function, or the firstBy property on it (for es6 module compatibility)\n        */\n        var x = (typeof(this) == \"function\" && !this.firstBy) ? this : false;\n        var y = makeCompareFunction(func, opt);\n        var f = x ? function(a, b) {\n                        return x(a,b) || y(a,b);\n                    }\n                  : y;\n        f.thenBy = tb;\n        return f;\n    }\n    tb.firstBy = tb;\n    return tb;\n})();\n\nvar thenBy = /*@__PURE__*/getDefaultExportFromCjs(thenBy_module);\n\nclass EventCounter {\n    constructor() {\n        this.count = 0;\n        if (arguments.length >= 2) {\n            this.startCallback = arguments[0];\n            this.endCallback = arguments[1];\n        } else if (arguments.length === 1) {\n            this.endCallback = arguments[0];\n        }\n    }\n\n    get counting() {\n        return this.count > 0;\n    }\n\n    start() {\n        let event = null;\n        if (this.count <= 0 && this.startCallback) {\n            event = this.startCallback.apply(null, arguments);\n        }\n        this.count++;\n        return event;\n    }\n\n    end() {\n        let event = null;\n        this.count--;\n        if (this.count <= 0 && this.endCallback) {\n            event = this.endCallback.apply(null, arguments);\n            this.count = 0;\n        }\n        return event;\n    }\n\n    cancel() {\n        this.count--;\n    }\n}\n\nclass IList extends EventTarget {\r\n    constructor() {\r\n        super();\r\n        this.collectionEventCounter = new EventCounter(this.dispatchCollectionEvent.bind(this));\r\n        this._source = null;\r\n        this._active = null;\r\n        this._sortFunction = null;\r\n        this._filterFunction = null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    get source() {\r\n        return this._source;\r\n    }\r\n\r\n    set source(v) {\r\n        if (this._source !== v) {\r\n            this._source = v;\r\n            this._reset();\r\n        }\r\n    }\r\n\r\n    get length() {\r\n        return this._active && this._active.length || 0;\r\n    }\r\n\r\n    get isEmpty() {\r\n        return this.length === 0;\r\n    }\r\n\r\n    get filterFunction() {\r\n        return this._filterFunction;\r\n    }\r\n\r\n    set filterFunction(v) {\r\n        if (this._filterFunction !== v) {\r\n            this._filterFunction = v;\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    get sortFunction() {\r\n        return this._sortFunction;\r\n    }\r\n\r\n    get localItems() {\r\n        return this._active || [];\r\n    }\r\n\r\n    get(index) {\r\n        if (index >= 0 && index < this.length) {\r\n            return this.localItems[index];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    indexOf(item, fromIndex) {\r\n        return this.localItems.indexOf(item, fromIndex);\r\n    }\r\n\r\n    lastIndexOf(item, fromIndex) {\r\n        return this.localItems.lastIndexOf(item, fromIndex);\r\n    }\r\n\r\n    contains(item) {\r\n        return this.indexOf(item) >= 0;\r\n    }\r\n\r\n    containsAll(items) {\r\n        const num = items && items.length || 0;\r\n        if (num <= 0) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < num; i++) {\r\n            if (!this.contains(items[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    setValue(index, property, value) {\r\n        return this._internalSetValue(this.get(index), property, value);\r\n    }\r\n\r\n    setItemValue(item, property, value) {\r\n        return this._internalSetValue(item, property, value);\r\n    }\r\n\r\n    sort(sortFields) {\r\n        let num = sortFields && sortFields.length || 0;\r\n        if (num > 0) {\r\n            let field = sortFields[0];\r\n            let func = thenBy(field.sortFunction, field.descending ? 0 : -1);\r\n\r\n            for (let i = 1; i < num; i++) {\r\n                field = sortFields[i];\r\n                func = func.thenBy(field.sortFunction, field.descending ? 0 : -1);\r\n            }\r\n            this._sortFunction = func;\r\n        } else {\r\n            this._sortFunction = null;\r\n        }\r\n    }\r\n\r\n    forEach(callback) {\r\n\r\n    }\r\n\r\n    /**\r\n     * 아이템 목록을 재갱신합니다.\r\n     */\r\n    refresh() {\r\n        this.collectionEventCounter.start();\r\n        this._internalRefresh();\r\n        this.collectionEventCounter.end('refresh');\r\n    }\r\n\r\n    clear() {\r\n        this.source = [];\r\n    }\r\n\r\n    toArray() {\r\n        return this.localItems.slice(0);\r\n    }\r\n\r\n    subList(fromIndex, toIndex) {\r\n        const items = this.localItems.slice(fromIndex, toIndex);\r\n        return new this.constructor(items);\r\n    }\r\n\r\n    _reset() {\r\n        this.collectionEventCounter.start();\r\n        this._internalRefresh();\r\n        this.collectionEventCounter.end('reset');\r\n    }\r\n\r\n    _internalSetValue(item, property, value) {\r\n        if (item && property != null) {\r\n            let oldValue = getValue(item, property);\r\n            if (value !== oldValue) {\r\n                this.collectionEventCounter.start();\r\n                setValue(item, property, value);\r\n                this.collectionEventCounter.end('update', {\r\n                    source: item,\r\n                    index: this.indexOf(item),\r\n                    property: property,\r\n                    newValue: value,\r\n                    oldValue: oldValue\r\n                });\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _internalRefresh() {\r\n    }\r\n\r\n    dispatchCollectionEvent(kind, item, index, oldIndex) {\r\n        const items = item && !Array.isArray(item) && [item] || item;\r\n        const detail = {\r\n            collection: this,\r\n            kind: kind\r\n        };\r\n\r\n        if (items != null) {\r\n            detail.items = items;\r\n        }\r\n\r\n        if (index != null) {\r\n            detail.index = index;\r\n        }\r\n\r\n        if (oldIndex != null) {\r\n            detail.oldIndex = oldIndex;\r\n        }\r\n\r\n        return this.dispatchEvent(new CustomEvent('collection-change', {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: detail\r\n        }));\r\n    }\r\n}\n\n/**\r\n * ArrayList 클래스는 데이터의 소스로 배열을 관리하는 IList를 구현합니다.\r\n * 내부 배열은 List 인터페이스의 메서드 및 속성을 사용하여 추가, 삭제, 변경 할 수 있습니다.\r\n */\r\nclass ArrayList extends IList {\r\n    constructor(source) {\r\n        super();\r\n        this.source = source || [];\r\n    }\r\n\r\n    /**\r\n     * 'source' 기준으로 콜백함수를 배열 요소 각각에 대해 실행합니다.\r\n     * @param callback\r\n     */\r\n    forEach(callback) {\r\n        (this.source || []).forEach((item, index, array) => {\r\n            callback(item, index, array);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 아이템을 맨끝 위치에 추가합니다.\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    add(item) {\r\n        return this.addAt(this.length, item);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스에 아이템을 추가합니다.\r\n     * @param index\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    addAt(index, item) {\r\n        if (index >= 0) {\r\n            if (index >= this.length) {\r\n                index = this.length;\r\n            }\r\n            this.collectionEventCounter.start();\r\n            if (this.source !== this._active) {\r\n                let sourceIndex = index;\r\n                let activeIndex = 0;\r\n                //원본 배열에 추가시\r\n                //1.정렬 되어 있다면 마지막 인덱스에 추가.\r\n                if (this.sortFunction) {\r\n                    sourceIndex = this.source.length;\r\n                } else if (this.filterFunction) {\r\n                    if (sourceIndex >= this._active.length) {\r\n                        sourceIndex = this.source.length;\r\n                    } else {\r\n                        sourceIndex = this.source.indexOf(this._active[index]);\r\n                    }\r\n                }\r\n\r\n                this.source.splice(sourceIndex, 0, item);\r\n\r\n                //가공된 배열 추가시.\r\n                //1. 필터링 한후 정렬..\r\n                if (!this.filterFunction || this.filterFunction(item, index, this.source)) {\r\n                    if (this.sortFunction) {\r\n                        activeIndex = this._findInsertIndex(this._active, item);\r\n                    } else {\r\n                        let i = sourceIndex - 1;\r\n                        while (i >= 0) {\r\n                            let sItem = this.source[i];\r\n                            if (this.filterFunction(sItem, i, this.source)) {\r\n                                activeIndex = this._active.indexOf(sItem);\r\n                                if (activeIndex >= 0) {\r\n                                    activeIndex += 1;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            i--;\r\n                        }\r\n\r\n                        if (activeIndex < 0) {\r\n                            activeIndex = 0;\r\n                        }\r\n                    }\r\n                } else {\r\n                    activeIndex = -1;\r\n                }\r\n\r\n                if (activeIndex >= 0) {\r\n                    this._active.splice(activeIndex, 0, item);\r\n                }\r\n\r\n                index = activeIndex;\r\n            } else {\r\n                this._active.splice(index, 0, item);\r\n            }\r\n            this.collectionEventCounter.end('add', item, index);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 항목 목록을 맨끝 위치부터 추가합니다.\r\n     * @param items\r\n     */\r\n    addAll(items) {\r\n        this.addAllAt(this.length, items);\r\n    }\r\n\r\n    /**\r\n     * 항목 목록을 지정된 위치부터 추가합니다.\r\n     * @param index\r\n     * @param items\r\n     */\r\n    addAllAt(index, items) {\r\n        let numItems = items && items.length || 0;\r\n        if (numItems > 0 && index >= 0) {\r\n            this.collectionEventCounter.start();\r\n            for (let i = 0; i < numItems; i++) {\r\n                this.addAt(index + i, items[i]);\r\n            }\r\n            this.collectionEventCounter.end('add', items, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 아이템을 삭제합니다.\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    remove(item) {\r\n        return this.removeAt(this.indexOf(item)) === item;\r\n    }\r\n\r\n    /**\r\n     * 항목 목록을 삭제합니다.\r\n     * @param items\r\n     * @returns {boolean}\r\n     */\r\n    removeAll(items) {\r\n        this.collectionEventCounter.start();\r\n        items = items && items.slice(0) || [];\r\n        const removedItems = [];\r\n        items.forEach(item => {\r\n            if (this.remove(item)) {\r\n                removedItems.push(item);\r\n            }\r\n        });\r\n        if (removedItems.length > 0) {\r\n            this.collectionEventCounter.end('remove', removedItems, -1);\r\n        } else {\r\n            this.collectionEventCounter.cancel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 지정된 위치의 아이템을 삭제합니다.\r\n     * @param index\r\n     * @returns {Array}\r\n     */\r\n    removeAt(index) {\r\n        let removed = null;\r\n        if (index >= 0 && index < this.length) {\r\n            this.collectionEventCounter.start();\r\n            removed = this._active.splice(index, 1)[0];\r\n            if (this.source !== this._active) {\r\n                this.source.splice(this.source.indexOf(removed), 1);\r\n            }\r\n            this.collectionEventCounter.end('remove', removed, index);\r\n        }\r\n        return removed;\r\n    }\r\n\r\n    /**\r\n     * 지정된 위치에 아이템을 덮어씁니다.\r\n     * @param index\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    set(index, item) {\r\n        if (index >= 0 && index < this.length) {\r\n            this.collectionEventCounter.start();\r\n            this.removeAt(index);\r\n            this.addAt(index, item);\r\n            this.collectionEventCounter.end('set', item, index);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 배열의 'from' 항목을 'to' 위치에 이동합니다.\r\n     * @param from\r\n     * @param to\r\n     * @returns {boolean}\r\n     */\r\n    move(from, to) {\r\n        if (from !== to && 0 <= from && from < this.length && 0 <= to) {\r\n            this.collectionEventCounter.start();\r\n            const item = this.removeAt(from);\r\n            this.addAt(to, item);\r\n            this.collectionEventCounter.end('move', item, this.indexOf(item), from);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _internalRefresh() {\r\n        let num = this.source && this.source.length || 0;\r\n        if (num > 0 && (this.sortFunction || this.filterFunction)) {\r\n            let array = this.source && this.source.slice(0) || 0;\r\n            if (this.filterFunction) {\r\n                array = array.filter(this.filterFunction);\r\n            }\r\n            if (this.sortFunction) {\r\n                array = array.sort(this.sortFunction);\r\n            }\r\n            this._active = array;\r\n        } else {\r\n            this._active = this.source;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findInsertIndex(items, target) {\r\n        let index = 0;\r\n        let lowerBound = 0;\r\n        let upperBound = items.length - 1;\r\n        let item = null;\r\n        let direction = 1;\r\n        while (lowerBound <= upperBound) {\r\n            index = Math.round((lowerBound + upperBound) / 2);\r\n            item = items[index];\r\n            direction = this.sortFunction(target, item);\r\n            if (direction <= -1) {\r\n                upperBound = index - 1;\r\n            } else if (direction >= 1) {\r\n                lowerBound = index + 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return (direction > 0) ? index + 1 : index;\r\n    }\r\n}\n\n/**\n * CellPosition 클래스는 데이타 그리드를 구성하는 셀의 위치, 크기를 정의합니다.\n */\nclass CellPosition extends Rectangle {\n    constructor(rowIndex, columnIndex, endRowIndex, endColumnIndex, isCrossed) {\n        super();\n        if (endRowIndex == null) {\n            endRowIndex = rowIndex;\n        }\n        if (endColumnIndex == null) {\n            endColumnIndex = columnIndex;\n        }\n\n        this.rowIndex = Math.min(rowIndex, endRowIndex);\n        this.columnIndex = Math.min(columnIndex, endColumnIndex);\n        this.endRowIndex = Math.max(rowIndex, endRowIndex);\n        this.endColumnIndex = Math.max(columnIndex, endColumnIndex);\n        /**\n         * 교차 변합된 셀인지 확인합니다.TreeGrid 'box'모드에서 사용됩니다.\n         * @returns {boolean}\n         */\n        this.isCrossed = isCrossed === true;\n    }\n\n    /**\n     * 셀의 상단 행 인덱스입니다.\n     * @returns {number}\n     */\n    get rowIndex() {\n        return this.top;\n    }\n\n    set rowIndex(v) {\n        this.top = v;\n        if (this.endRowIndex < v) {\n            this.endRowIndex = v;\n        }\n    }\n\n    /**\n     * 셀의 하단 행 인덱스입니다.\n     * @returns {number}\n     */\n    get endRowIndex() {\n        return this.bottom;\n    }\n\n    set endRowIndex(v) {\n        this.bottom = v;\n    }\n\n    /**\n     * 셀의 좌측 컬럼 인덱스입니다.\n     * @returns {number}\n     */\n    get columnIndex() {\n        return this.left;\n    }\n\n    set columnIndex(v) {\n        this.left = v;\n        if (this.endColumnIndex < v) {\n            this.endColumnIndex = v;\n        }\n    }\n\n    /**\n     * 셀의 우측 컬럼 인덱스입니다.\n     * @returns {number}\n     */\n    get endColumnIndex() {\n        return this.right;\n    }\n\n    set endColumnIndex(v) {\n        this.right = v;\n    }\n\n    /**\n     * 셀의 행 개수입니다.\n     * @returns {number}\n     */\n    get rowCount() {\n        return this.height + 1;\n    }\n\n    /**\n     * 셀의 컬럼 개수입니다.\n     * @returns {number}\n     */\n    get columnCount() {\n        return this.width + 1;\n    }\n\n\n    /**\n     * 병합된 셀인지 확인합니다.\n     * @returns {boolean}\n     */\n    get isMerged() {\n        return this.rowCount > 1 || this.columnCount > 1;\n    }\n\n\n\n    /**\n     * 객체의 복사본을 만듭니다.\n     * @returns {CellPosition}\n     */\n    clone() {\n        return new CellPosition(this.rowIndex, this.columnIndex, this.endRowIndex, this.endColumnIndex);\n    }\n\n    toPosition() {\n        return [this.rowIndex, this.columnIndex, this.endRowIndex, this.endColumnIndex].join(',');\n    }\n\n    valueOf() {\n        return {\n            rowIndex: this.rowIndex,\n            columnIndex: this.columnIndex,\n            endRowIndex: this.endRowIndex,\n            endColumnIndex: this.endColumnIndex,\n            rowCount: this.rowCount,\n            columnCount: this.columnCount,\n            isCrossed: this.isCrossed\n        }\n    }\n\n    toJSON() {\n        return ['rowIndex', 'columnIndex', 'endRowIndex', 'endColumnIndex', 'isCrossed']\n            .reduce((cur, next) => {\n                cur[next] = this[next];\n                return cur;\n            }, {});\n    }\n\n    toString() {\n        return '[CellPosition (rowIndex=' + this.rowIndex + ' columnIndex=' + this.columnIndex + ' endRowIndex=' + this.endRowIndex + ' endColumnIndex=' + this.endColumnIndex + ')]';\n    }\n\n    static create(cell) {\n        return new CellPosition(cell.rowIndex, cell.columnIndex, cell.endRowIndex, cell.endColumnIndex);\n    }\n}\n\nconst Styleable = {\n    _styles: {},\n    get defaultStyles() {\n        return {};\n    },\n    get styleParent() {\n        return null;\n    },\n    get _nonInheritingStyleNames() {\n        return [];\n    },\n    get styles() {\n        return this._styles;\n    },\n    set styles(values) {\n        this.addStyles(values || {});\n    },\n    getStyle(...args) {\n        if (args.length > 1) {\n            return args.reduce((cur, next) => {\n                cur[next] = this._internalGetStyle(next);\n                return cur;\n            }, {});\n        }\n        return this._internalGetStyle(args[0]);\n    },\n    addStyle(prop, value) {\n        this._styles[prop] = value;\n        this._notifyStyleChanged();\n    },\n    removeStyle(prop) {\n        delete this._styles[prop];\n        this._notifyStyleChanged();\n    },\n    clearStyles() {\n        this._styles = {};\n        this._notifyStyleChanged();\n    },\n    addStyles(styles) {\n        this._styles = mixin({}, this._styles, styles);\n        this._notifyStyleChanged();\n    },\n    _internalGetStyle(prop) {\n        const styles = this.styles;\n        const defStyles = this.defaultStyles;\n        const nonStyleNames = this._nonInheritingStyleNames;\n\n        let value = styles[prop];\n        if (!value && defStyles) {\n            value = defStyles[prop];\n        }\n\n        if (this.styleParent && (!value && (!nonStyleNames || nonStyleNames.indexOf(prop) < 0))) {\n            value = this.styleParent.getStyle(prop);\n        }\n        return value;\n    },\n    _styleChanged() {\n    },\n    _notifyStyleChanged() {\n        if (!this._boundStyleChanged) {\n            this._boundStyleChanged = this._styleChanged.bind(this);\n        }\n        nextFrameOnce(this._boundStyleChanged);\n    }\n};\n\nclass IFormatter {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n\r\n    get type() {\r\n        return this.options.type;\r\n    }\r\n\r\n    get pattern() {\r\n        return this.options.pattern;\r\n    }\r\n\r\n    get source() {\r\n        return this.options.source;\r\n    }\r\n\r\n    format(value) {\r\n\r\n    }\r\n}\r\n\r\nfunction createFactory$1(type, scope) {\r\n    const Formatter = class Formatter extends IFormatter {\r\n        constructor(options) {\r\n            super(options);\r\n        }\r\n    };\r\n\r\n    mixin(Formatter.prototype, scope, false);\r\n    return Formatter;\r\n}\r\n\r\nconst formatter = {};\r\n\r\nfunction get$2(type) {\r\n    return formatter[type];\r\n}\r\n\r\nfunction add$2(type, scope) {\r\n    return formatter[type] = createFactory$1(type, scope);\r\n}\r\n\r\nfunction remove$2(type) {\r\n    if (type in formatter) {\r\n        delete formatter[type];\r\n    }\r\n}\r\n\r\nfunction createFormatter(data) {\r\n    if (data && 'type' in data && 'pattern' in data) {\r\n        const factory = get$2(data.type);\r\n        if (factory) {\r\n            return new factory(data);\r\n        } else {\r\n            console.warn('Formatter not defined.', data);\r\n        }\r\n    }\r\n    return null;\r\n}\n\nvar formatter$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    IFormatter: IFormatter,\n    add: add$2,\n    createFormatter: createFormatter,\n    get: get$2,\n    remove: remove$2\n});\n\nfunction updateChildren(parent, node) {\r\n    node._level = parent && (parent.level + 1) || 0;\r\n    let depth = 0,\r\n        children = node.children || [],\r\n        numChildren = children.length;\r\n\r\n    for (let i = 0; i < numChildren; i++) {\r\n        let child = children[i];\r\n        child._parent = node;\r\n        updateChildren(node, child);\r\n        depth = Math.max(child.depth + 1, depth);\r\n    }\r\n    node._depth = depth;\r\n}\r\n\r\n/**\r\n * GridColumn 클래스는 데이타 그리드의 컬럼을 정의합니다.\r\n * @param dataField 값이 표시되는 항목의 필드\r\n * @param headerText 헤더영역에 표시되는 텍스트\r\n * @constructor\r\n */\r\nclass GridColumn extends EventTarget {\r\n    constructor(dataField = null, headerText = '') {\r\n        super();\r\n        this.index = -1;\r\n        this._open = true;\r\n        this._width = undefined;\r\n        this._visible = true;\r\n        this._minWidth = 30;\r\n        this._children = [];\r\n        this._level = 0;\r\n        this._depth = 0;\r\n        this._formatter = null;\r\n        this._itemRenderer = null;\r\n        this._itemEditor = null;\r\n        this._headerRenderer = null;\r\n\r\n        /**\r\n         * 이 컬럼 영역의 셀을 편집할 수 있는지를 나타냅니다. 'true'면 편집 가능합니다.\r\n         * 단 그리드의 editable 속성이 true 경우만 가능합니다.\r\n         * @type {boolean}\r\n         */\r\n        this.editable = true;\r\n        /**\r\n         * 에디트 활성 마우스 이벤트 타입\r\n         */\r\n        this.editOnEvents = null;\r\n\r\n        /**\r\n         * 컬럼을 드래그하여 이동하여 순서를 변경가능 여부입니다.\r\n         * @type {boolean}\r\n         */\r\n        this.draggable = true;\r\n        /**\r\n         * 컬럼의 너비를 변경 가능한지 여부입니다.\r\n         * @type {boolean}\r\n         */\r\n        this.resizable = true;\r\n\r\n        /**\r\n         * 영역을 벗어난 경우 줄바꿈 여부\r\n         * @type {boolean}\r\n         */\r\n        this.wordWrap = false;\r\n\r\n        /**\r\n         * 셀 텍스트를 결정하는 콜백 함수입니다.\r\n         * 해당 컬럼의 셀의 텍스트는 `dataField`와 일치하는 아이템 객체의 프로퍼티 값으로 설정됩니다.\r\n         * `labelFunction` 사용시 사용자가 지정한 값으로 설정할 수 있습니다.\r\n         * ```\r\n         * labelFunction (item : Object, column : DataGridColumn) : String{\r\n         *      return item[column.dataField] + '%';\r\n         * }\r\n         * ```\r\n         */\r\n        this.labelFunction = null;\r\n        /**\r\n         * 해당 컬럼의 정렬를 사용여부입니다.\r\n         * @type {boolean}\r\n         */\r\n        this.sortable = true;\r\n        /**\r\n         * 정렬이 오름차순인지 아니면 내림차순 인지를 나타냅니다.\r\n         */\r\n        this.sortDescending = false;\r\n        /**\r\n         * 정렬시 기준이 되는 데이타 타입니다. 'string', 'number', 커스텀 콜백함수(Function)를 지정합니다.\r\n         * 콜백함수는 function(a, b, column) 형태입니다.\r\n         */\r\n        this.sortCompare = null;\r\n        /**\r\n         * 데이타 정렬시 원본데이타로 정렬할지 아니면 표시된 데이타로 정렬할지 여부입니다.\r\n         */\r\n        this.isSortOriginal = false;\r\n\r\n        /**\r\n         * 그리드 병합모드 사용시 행병합 여부입니다.\r\n         */\r\n        this.isRowMerge = false;\r\n        /**\r\n         * 그리드 병합모드 사용시 컬럼병합 여부입니다.\r\n         */\r\n        this.isColumnMerge = false;\r\n        this.mergeDependColumns = null;\r\n\r\n        this.height = undefined;\r\n\r\n        this.dataField = dataField || '';\r\n        this.headerText = headerText;\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼이 있는 그리드객체입니다.\r\n     */\r\n    get grid() {\r\n        return this._grid;\r\n    }\r\n\r\n    /**\r\n     * 셀 라벨이 표시되는 항목의 속성을 정의합니다.\r\n     */\r\n    get dataField() {\r\n        return this._dataField;\r\n    }\r\n\r\n    set dataField(value) {\r\n        value = value == null ? '' : '' + value;\r\n        if (this._dataField !== value) {\r\n            this._dataField = value;\r\n            this._dataFieldPath = parsePath(value);\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get dataFieldPath() {\r\n        return this._dataFieldPath || [];\r\n    }\r\n\r\n    /**\r\n     *  컬럼 헤더의 텍스트입니다. 지정되지 않을 시 dataField를 텍스트로 사용합니다.\r\n     */\r\n    get headerText() {\r\n        return this._headerText || this.dataField;\r\n    }\r\n\r\n    set headerText(value) {\r\n        if (this._headerText !== value) {\r\n            this._headerText = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get offsetWidth() {\r\n        if (this.grid) {\r\n            return this.grid.getColumnWidth(this.index);\r\n        }\r\n        return this.width;\r\n    }\r\n\r\n    /**\r\n     * 컬럼의 너비입니다. 지정되지 않을시 그리드 내부에서 자동으로 조절합니다.\r\n     */\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value) {\r\n        if (!isNaN(value)) {\r\n            value = clampValue(value, this.minWidth);\r\n        }\r\n\r\n        if (this._width !== value) {\r\n            if (this.grid) {\r\n                this.grid.setColumnWidth(this.index, value);\r\n            } else {\r\n                this.setWidth(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 컬럼의 최소 너비입니다.\r\n     */\r\n    get minWidth() {\r\n        return this._minWidth;\r\n    }\r\n\r\n    set minWidth(value) {\r\n        if (this._minWidth !== value) {\r\n            this._minWidth = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 컬럼의 표시 여부입니다.\r\n     */\r\n    get visible() {\r\n        let p = this.parent;\r\n        while (p) {\r\n            if (!p.visible) {\r\n                return false;\r\n            }\r\n            p = p.parent;\r\n        }\r\n        return this._visible;\r\n    }\r\n\r\n    set visible(value) {\r\n        if (this._visible !== value) {\r\n            if (this.grid) {\r\n                this.grid.setColumnVisible(this, value);\r\n            } else {\r\n                this.setVisible(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 셀을 구성하는 클래스 팩토리입니다. 지정되지 않으면 그리드의 기본 itemRenderer 구성합니다.\r\n     */\r\n    get itemRenderer() {\r\n        return this._itemRenderer;\r\n    }\r\n\r\n    set itemRenderer(value) {\r\n        if (this._itemRenderer !== value) {\r\n            this._itemRenderer = value;\r\n            if (this.grid) {\r\n                this.grid.clearItemRenderers();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 셀을 구성하는 클래스 팩토리입니다. 지정되지 않으면 그리드의 기본 headerRenderer 구성합니다.\r\n     */\r\n    get headerRenderer() {\r\n        return this._headerRenderer;\r\n    }\r\n\r\n    set headerRenderer(value) {\r\n        if (this._headerRenderer !== value) {\r\n            this._headerRenderer = value;\r\n            if (this.grid) {\r\n                this.grid.clearHeaderRenderers();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 항목을 편집하는데 사용되는 클래스 팩토리입니다.\r\n     * 지정되지 않으면 그리드의 기본 itemEditor로 구성합니다.\r\n     */\r\n    get itemEditor() {\r\n        return this._itemEditor;\r\n    }\r\n\r\n    set itemEditor(value) {\r\n        if (this._itemEditor !== value) {\r\n            this._itemEditor = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 멀티 헤더 구성시 하위 컬럼을 보이거나 숨기게 합니다.\r\n     */\r\n    get open() {\r\n        return this._open;\r\n    }\r\n\r\n    set open(value) {\r\n        if (this._open !== value) {\r\n            this._open = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼의 레벨입니다.\r\n     */\r\n    get level() {\r\n        return this._level;\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼의 깊이입니다.\r\n     * @returns {*|number}\r\n     */\r\n    get depth() {\r\n        return this._depth;\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼의 부모 컬럼입니다.\r\n     * @returns {null|*}\r\n     */\r\n    get parent() {\r\n        return this._parent;\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼의 자식컬럼목록입니다.\r\n     * @returns {Array}\r\n     */\r\n    get children() {\r\n        return this._children;\r\n    }\r\n\r\n    set children(value) {\r\n        if (this._children !== value) {\r\n            this._children = value;\r\n        }\r\n    }\r\n\r\n    get isLeaf() {\r\n        return !this.children || this.children.length <= 0;\r\n    }\r\n\r\n    /**\r\n     * 컬럼 포멧를 정의합니다.\r\n     * 포멧을 사용하기 위해선 tachyon.formatter 설정 해야 합니다.\r\n     */\r\n    get format() {\r\n        return this._format;\r\n    }\r\n\r\n    set format(value) {\r\n        if (this._format !== value) {\r\n            this._format = value;\r\n            this._formatter = createFormatter(value);\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get filterInstance() {\r\n        return this.grid && this.grid.filterManager.getFilter(this);\r\n    }\r\n\r\n    /**\r\n     * 이 컬럼의 필터를 지정합니다.\r\n     * {\r\n     *     type:['number','string','date'],\r\n     *     condi\r\n     * }\r\n     */\r\n    get filter() {\r\n        return this._filter;\r\n    }\r\n\r\n    set filter(value) {\r\n        if (this._filter !== value) {\r\n            this._filter = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 스타일 부모\r\n     * @private\r\n     */\r\n    get styleParent() {\r\n        return this.grid;\r\n    }\r\n\r\n    get _nonInheritingStyleNames() {\r\n        return ['backgroundColor'];\r\n    }\r\n\r\n    setGrid(grid) {\r\n        if (this._grid !== grid) {\r\n            this._grid = grid;\r\n            this.dispatchEvent(new CustomEvent('grid-change', {\r\n                bubbles: false,\r\n                cancelable: false,\r\n                detail: {\r\n                    grid: grid\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    setWidth(width) {\r\n        if (!isNaN(width)) {\r\n            width = clampValue(width, this.minWidth);\r\n        }\r\n        this._width = width;\r\n    }\r\n\r\n    setVisible(visible) {\r\n        this._visible = visible;\r\n    }\r\n\r\n    /**\r\n     * 지정된 항목에 대해 렌더러가 표시하는 문자열을 반환합니다.\r\n     * dataField, labelFunction, format 영향을 받습니다.\r\n     */\r\n    itemToLabel(item) {\r\n        if (this.labelFunction instanceof Function) {\r\n            return this.labelFunction(item, this);\r\n        }\r\n\r\n        let value = this.itemToValue(item);\r\n        if (this._formatter) {\r\n            value = this._formatter.format(value);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 지정된 항목에 대해 원본 데이타를 반환합니다.\r\n     */\r\n    itemToValue(item) {\r\n        if (!item) {\r\n            return null;\r\n        }\r\n        try {\r\n            return getValue(item, this.dataFieldPath);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    invalidate() {\r\n        if (this._grid) {\r\n            this._grid.invalidate(Reason.COLUMN_UPDATE);\r\n        }\r\n    }\r\n\r\n    updateChildren() {\r\n        updateChildren(this.parent, this);\r\n    }\r\n\r\n    _styleChanged() {\r\n    }\r\n\r\n    toJSON() {\r\n        return ['minWidth', 'width', 'offsetWidth', 'dataField', 'headerText', 'children', 'visible', 'open', 'format'].reduce((cur, next) => {\r\n            if (next === 'children') {\r\n                cur[next] = this.children.map(child => child.toJSON());\r\n            } else {\r\n                cur[next] = this[next];\r\n            }\r\n            return cur;\r\n        }, {});\r\n    }\r\n\r\n    static create(data) {\r\n        if (data instanceof GridColumn) {\r\n            return data;\r\n        }\r\n\r\n        const column = new this();\r\n        for (let key in data) {\r\n            let value = data[key];\r\n            if (key === 'styles') {\r\n                column.addStyles(value);\r\n            } else if (key in column) {\r\n                if (key === 'children' && Array.isArray(value)) {\r\n                    value = value.map((child) => {\r\n                        return child instanceof GridColumn ? child : GridColumn.create(child);\r\n                    });\r\n                }\r\n                column[key] = value;\r\n            }\r\n        }\r\n        return column;\r\n    }\r\n}\r\nmixin(GridColumn.prototype, Styleable, false);\r\n\r\n/*\r\nvar d = 'return typeof x === 'number' && x > 50000';\r\nvar s = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', d);\r\n*/\n\nvar Scroller = (class Scroller extends Element$1 {\n    constructor(content) {\n        super();\n        this._scroller = this.DOM.scroller;\n        this._viewport = this.DOM.viewport;\n        this._contentContainer = this.DOM.contentContainer;\n\n        this._boundDoLayout = this.doLayout.bind(this);\n        this._boundContentSizeChange = this._onContentSizeChange.bind(this);\n        this._boundScrollPositionChange = this._onScrollPositionChange.bind(this);\n\n        this._contentContainer.addEventListener('wheel', this._onWheel.bind(this));\n        this._scroller.addEventListener('scroll', this._onScroll.bind(this), {passive: true});\n\n        this._inOnScroll = false;\n        this.content = content;\n    }\n\n    get childContainer() {\n        return this._contentContainer;\n    }\n\n    get maxScrollLeft() {\n        return this._scroller.scrollWidth - this._scroller.clientWidth;\n    }\n\n    get maxScrollTop() {\n        return this._scroller.scrollHeight - this._scroller.clientHeight;\n    }\n\n    get hasVerticalScroll() {\n        return this._scroller.scrollHeight > this._scroller.clientHeight;\n    }\n\n    get hasHorizontalScroll() {\n        return this._scroller.scrollWidth > this._scroller.clientWidth;\n    }\n\n    get content() {\n        return this._content;\n    }\n\n    set content(content) {\n        if (this._content !== content) {\n            if (this.content) {\n                this.content.removeEventListener('content-size-change', this._boundContentSizeChange);\n                this.content.removeEventListener('vertical-scroll-position-change', this._boundScrollPositionChange);\n                this.content.removeEventListener('horizontal-scroll-position-change', this._boundScrollPositionChange);\n                this.removeChild(content);\n            }\n            this._content = content;\n            if (this.content) {\n                this.content.addEventListener('content-size-change', this._boundContentSizeChange);\n                this.content.addEventListener('vertical-scroll-position-change', this._boundScrollPositionChange);\n                this.content.addEventListener('horizontal-scroll-position-change', this._boundScrollPositionChange);\n                this.appendChild(content);\n            }\n        }\n    }\n\n    doLayout(needAllUpdate) {\n\n        this._inDoLayout = true;\n\n        const scroller = this._scroller;\n        const contentContainer = this._contentContainer;\n        const content = this._content;\n\n        setSize(contentContainer, scroller.clientWidth, scroller.clientHeight);\n        content.doLayout(needAllUpdate);\n\n        //컨텐츠 크기로 뷰포트 크기 갱신\n        this._layoutViewport();\n\n        const viewMinHeight = content.getViewMinHeight();\n        if (viewMinHeight > 0) {\n            scroller.style.minHeight = (viewMinHeight + scroller.offsetHeight - scroller.clientHeight) + 'px';\n        }\n\n        if (setSize(contentContainer, scroller.clientWidth, scroller.clientHeight)) {\n            content.invalidateFor(Reason.GROUP_SIZE_CHANGE);\n        }\n\n        //content.contentWidth외에 실 입력된 별도 contentWidth 필요\n        //예를들어 minContentWidth 이 값을 토대로 스크롤 표시할것...\n        this._inDoLayout = false;\n    }\n\n    _layoutViewport() {\n        const content = this._content;\n        return setSize(this._viewport, content.contentWidth, content.contentHeight);\n    }\n\n    _scrollPositionChanged() {\n        if (!this._inOnScroll) {\n            this._scroller.scrollTop = this.content.scrollTop;\n            this._scroller.scrollLeft = this.content.scrollLeft;\n        }\n    }\n\n    /**\n     * 컨텐츠 사이즈 변경 핸들러\n     * @param event\n     * @private\n     */\n    _onContentSizeChange(event) {\n        this._layoutViewport();\n        if (this._inDoLayout) {\n            return;\n        }\n        nextFrameOnce(this._boundDoLayout);\n    }\n\n    _onScrollPositionChange(event) {\n        this._scrollPositionChanged();\n    }\n\n    _onWheel(event) {\n        const scroller = this._scroller;\n        const content = this._content;\n        const delta = content.getVerticalScrollPositionDelta(event.deltaY);\n        const value = clampValue(scroller.scrollTop + delta, 0, this.maxScrollTop);\n        if (scroller.scrollTop !== value) {\n            scroller.scrollTop = value;\n            event.preventDefault();\n            return false;\n        }\n    }\n\n    _onScroll(event) {\n        this._inOnScroll = true;\n\n        const scroller = this._scroller;\n        const content = this._content;\n        const scrollLeft = scroller.scrollLeft;\n        const scrollTop = scroller.scrollTop;\n\n        let scrollChanged = false;\n\n        if (content.scrollLeft !== scrollLeft) {\n            content.scrollLeft = scrollLeft;\n            scrollChanged = true;\n        }\n\n        if (content.scrollTop !== scrollTop) {\n            content.scrollTop = scrollTop;\n            scrollChanged = true;\n        }\n\n        if (scrollChanged) {\n            this.dispatchEvent(new CustomEvent('scroll', {\n                detail: {\n                    scrollTop,\n                    scrollLeft,\n                    maxScrollTop: this.maxScrollTop,\n                    maxScrollLeft: this.maxScrollLeft,\n                    trigger: event\n                }\n            }));\n        }\n\n        this._inOnScroll = false;\n    }\n}).withDom(\n    '<div class=\"tachyon-scroller\">' +\n    '<div id=\"scroller\" class=\"tachyon-scroll-container\">' +\n    '<div id=\"viewport\" class=\"tachyon-scroll-viewport\"></div>' +\n    '</div>' +\n    '<div id=\"contentContainer\" class=\"tachyon-scroll-content\">' +\n    '</div>' +\n    '</div>');\n\nconst DEFAULT_PADDING = {left: 0, right: 0, top: 0, bottom: 0};\r\n\r\nfunction lineTo(ctx, x1, y1, x2, y2, style) {\r\n    ctx.beginPath();\r\n\r\n    let dashed = callValue(style.dashed) || [];\r\n    let color = callValue(style.color) || 0;\r\n    let width = callValue(style.width) || 1;\r\n\r\n    ctx.setLineDash(dashed);\r\n\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = width;\r\n\r\n    let value = ((width || 0) % 2) / 2;\r\n    let dx = x1 === x2 ? value : 0;\r\n    let dy = y1 === y2 ? value : 0;\r\n\r\n    ctx.translate(dx, dy);\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.translate(-dx, -dy);\r\n\r\n    ctx.stroke();\r\n}\r\n\r\n\r\nconst measureFontHeight = cacheFunction(\r\n    function (fontStyle) {\r\n        let fontDraw = document.createElement('canvas');\r\n        let ctx = fontDraw.getContext('2d');\r\n        ctx.fillRect(0, 0, fontDraw.width, fontDraw.height);\r\n        ctx.textBaseline = 'top';\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = fontStyle;\r\n        ctx.fillText('gM', 0, 0);\r\n        let pixels = ctx.getImageData(0, 0, fontDraw.width, fontDraw.height).data;\r\n        let start = -1;\r\n        let end = -1;\r\n        for (let row = 0; row < fontDraw.height; row++) {\r\n            for (let column = 0; column < fontDraw.width; column++) {\r\n                let index = (row * fontDraw.width + column) * 4;\r\n                if (pixels[index] === 0) {\r\n                    if (column === fontDraw.width - 1 && start !== -1) {\r\n                        end = row;\r\n                        row = fontDraw.height;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if (start === -1) {\r\n                        start = row;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return end - start;\r\n    }\r\n);\r\n\r\nfunction measureTextWidth(ctx, text) {\r\n    if (!text || text.length <= 0) {\r\n        return 0;\r\n    }\r\n    return ctx.measureText(text).width;\r\n}\r\n\r\n\r\n/**\r\n * 싱글라인을 그립니다. 그린영역 height 반환합니다.\r\n * @param ctx\r\n * @param text\r\n * @param x\r\n * @param y\r\n * @param width\r\n * @param height\r\n * @param hAlign\r\n * @param vAlign\r\n * @param padding\r\n * @return {number}\r\n */\r\nfunction paintSingleLine(ctx, text, x, y, width, height, hAlign, vAlign, padding) {\r\n    padding = padding || DEFAULT_PADDING;\r\n    let textWidth = measureTextWidth(ctx, text),\r\n        textHeight = measureFontHeight(ctx.font);\r\n\r\n    if (width - (padding.left + padding.right) < textWidth) {\r\n        hAlign = 'left';\r\n    }\r\n\r\n    if (hAlign === 'center') {\r\n        x += (width - textWidth) / 2;\r\n    } else if (hAlign === 'right') {\r\n        x += width - textWidth - padding.right;\r\n    } else {\r\n        x += padding.left;\r\n    }\r\n\r\n    if (vAlign === 'middle' || vAlign === 'center') {\r\n        y += (height - textHeight) / 2;\r\n    } else if (vAlign === 'bottom') {\r\n        y += height - textHeight - padding.bottom;\r\n    } else {\r\n        y += padding.top;\r\n    }\r\n    ctx.fillText(text, x, y + textHeight - 1);\r\n\r\n    return padding.top + padding.bottom + textHeight;\r\n}\r\n\r\nfunction fitText(ctx, text, width) {\r\n    let lines = text.trim().split('\\n'),\r\n        numLines = lines.length,\r\n        result = [];\r\n    for (let i = 0; i < numLines; i++) {\r\n        result = result.concat(findLines(ctx, squeeze(lines[i]).split(' '), width));\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction findLines(ctx, words, width) {\r\n\r\n    if (words.length === 1) {\r\n        return words;\r\n    }\r\n\r\n    let stillFits,\r\n        line = [words.shift()];\r\n\r\n    while ((stillFits = measureTextWidth(ctx, line.join(' ')) < width) && words.length) {\r\n        line.push(words.shift());\r\n    }\r\n\r\n    if (!stillFits && line.length > 1) {\r\n        words.unshift(line.pop()); // …back off by (i.e., remove) one word\r\n    }\r\n\r\n    line = [line.join(' ')];\r\n\r\n    if (words.length) { // if there's anything left…\r\n        line = line.concat(findLines(ctx, words, width)); // …break it up as well\r\n    }\r\n\r\n    return line;\r\n}\r\n\r\nfunction squeeze(string) {\r\n    return (string + '').trim().replace(/\\s\\s+/g, ' ');\r\n}\r\n\r\nfunction paintMultiLine(ctx, text, x, y, w, h, hAlign, vAlign, padding) {\r\n    padding = padding || DEFAULT_PADDING;\r\n\r\n    const textHeight = measureFontHeight(ctx.font);\r\n    const paddingWidth = padding.left + padding.right;\r\n    const lines = fitText(ctx, text, w - paddingWidth);\r\n    const numLines = lines.length;\r\n\r\n    if (numLines <= 1) {\r\n        return paintSingleLine(ctx, text, x, y, w, h, hAlign, vAlign, padding);\r\n    }\r\n\r\n    let totalHeight = numLines * textHeight,\r\n        ox, oy;\r\n\r\n    if (vAlign === 'top') {\r\n        oy = padding.top;\r\n    } else if (vAlign === 'center' || vAlign === 'middle') {\r\n        oy = (h - totalHeight) / 2;\r\n    } else if (vAlign === 'bottom') {\r\n        oy = h - totalHeight - padding.bottom;\r\n    }\r\n\r\n    oy = Math.max(padding.top, oy) + textHeight;\r\n\r\n    let textWidth = measureTextWidth(ctx, text);\r\n    for (let i = 0; i < numLines; i++) {\r\n        let line = lines[i];\r\n        textWidth = measureTextWidth(ctx, line);\r\n\r\n        if (hAlign === 'left') {\r\n            ox = padding.left;\r\n        } else if (hAlign === 'center') {\r\n            ox = (w - textWidth) / 2;\r\n        } else if (hAlign === 'right') {\r\n            ox = w - textWidth - padding.right;\r\n        }\r\n        ctx.fillText(line, x + ox, y + oy + (i * textHeight) - 2);\r\n    }\r\n\r\n    return padding.top + padding.bottom + (textHeight * numLines);\r\n}\n\nvar canvas = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    lineTo: lineTo,\n    measureFontHeight: measureFontHeight,\n    measureTextWidth: measureTextWidth,\n    paintMultiLine: paintMultiLine,\n    paintSingleLine: paintSingleLine\n});\n\nclass Renderer extends Base {\r\n    constructor(grid) {\r\n        super();\r\n        this._grid = grid;\r\n        this._deferredFuncs = [];\r\n    }\r\n\r\n    get grid() {\r\n        return this._grid;\r\n    }\r\n\r\n    get isDomRenderer() {\r\n        return !!this.htmlElement;\r\n    }\r\n\r\n    /**\r\n     * 렌더러 생성시 호출됩니다.\r\n     * @param grid\r\n     */\r\n    created(grid) {\r\n    }\r\n\r\n    /**\r\n     * 렌더러 갱신시 호출됩니다.\r\n     * @param grid\r\n     * @param state\r\n     */\r\n    prepare(grid, state) {\r\n    }\r\n\r\n    /**\r\n     * 캔버스 영역에 그릴때 호출됩니다.\r\n     * @param ctx {CanvasRenderingContext2D}\r\n     * @param state\r\n     * @param width\r\n     * @param height\r\n     * @return {number} 셀의 height를 반환합니다.  DataGrid.autoRowHeight 와 해당 컬럼 wordWrap 'true'일때 반환된 height 으로 행 크기를 설정합니다.\r\n     */\r\n    paint(ctx, state, width, height) {\r\n    }\r\n\r\n    /**\r\n     * 렌더러 해제시 호출됩니다.\r\n     */\r\n    dispose() {\r\n        while (this._deferredFuncs.length > 0) {\r\n            this._deferredFuncs.pop()();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param target\r\n     * @param eventName\r\n     * @param listener\r\n     * @param options\r\n     */\r\n    watchEvent(target, eventName, listener, options) {\r\n        if (target && target.addEventListener) {\r\n            target.addEventListener(eventName, listener, options);\r\n            this._deferredFuncs.push(() => {\r\n                target.removeEventListener(eventName, listener, options);\r\n            });\r\n        }\r\n    }\r\n\r\n    static factory(component) {\r\n        const ItemRenderer = class ItemRenderer extends Renderer {\r\n            constructor(grid) {\r\n                super(grid);\r\n            }\r\n        };\r\n\r\n        ItemRenderer.withBehavior({\r\n            dispose() {\r\n                Renderer.prototype.dispose.apply(this);\r\n                if (component.dispose) {\r\n                    return component.dispose.apply(this);\r\n                }\r\n            }\r\n        }, component);\r\n\r\n        if (typeof component.template === 'string') {\r\n            ItemRenderer.withDom(component.template);\r\n        }\r\n        return ItemRenderer;\r\n    }\r\n}\r\n\r\nconst nullItemRenderer = {};\r\n\r\nfunction setClass(element, key, className) {\r\n    if (element[key] != className) {\r\n        if (element[key]) {\r\n            removeClass(element, element[key]);\r\n            delete element[key];\r\n        }\r\n\r\n        if (className) {\r\n            addClass(element, className);\r\n            element[key] = className;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst defaultItemRenderer = {\r\n    created() {\r\n    },\r\n    prepare(grid, state) {\r\n    },\r\n    paint(ctx, state, w, h) {\r\n\r\n        const cp = state.cellPosition;\r\n        const column = state.column;\r\n        const label = state.label == null ? '' : ('' + state.label);\r\n\r\n        const styles = this.grid.getCellStyle(cp.rowIndex, cp.columnIndex, 'font', 'textAlign', 'verticalAlign', 'cellPadding');\r\n        const color = this.grid.getCellStyle(cp.rowIndex, cp.columnIndex, (state.hovered && 'textOverColor') || (state.selected && 'textSelectionColor') || 'color');\r\n\r\n        let textAlign = styles.textAlign;\r\n        if (column.format && column.styles.textAlign === undefined) {\r\n            const type = column.format.type;\r\n            if (type === 'number') {\r\n                textAlign = 'right';\r\n            } else if (type === 'date') {\r\n                textAlign = 'center';\r\n            }\r\n        }\r\n\r\n        if (ctx.font !== styles.font) {\r\n            ctx.font = styles.font;\r\n        }\r\n\r\n        if (ctx.fillStyle !== color) {\r\n            ctx.fillStyle = color;\r\n            ctx.strokeStyle = color;\r\n        }\r\n\r\n        if (column.wordWrap) {\r\n            return paintMultiLine(ctx, label, 0, 0, w, h, textAlign, styles.verticalAlign, styles.cellPadding);\r\n        }\r\n\r\n        return paintSingleLine(ctx, label, 0, 0, w, h, textAlign, styles.verticalAlign, styles.cellPadding);\r\n    }\r\n};\r\n\r\nconst defaultDomItemRenderer = {\r\n    template: '<div id=\"container\">' +\r\n        '<label id=\"labelDisplay\"></label>' +\r\n        '</div>',\r\n    prepare(grid, state) {\r\n\r\n        const {container, labelDisplay} = this.DOM;\r\n\r\n        const cp = state.cellPosition;\r\n        const column = state.column;\r\n        const label = state.label == null ? '' : ('' + state.label);\r\n\r\n        const color = this.grid.getCellStyle(cp.rowIndex, cp.columnIndex, (state.hovered && 'textOverColor') || (state.selected && 'textSelectionColor') || 'color');\r\n        let {font, textAlign, verticalAlign, cellPadding} = this.grid.getCellStyle(cp.rowIndex, cp.columnIndex, 'font', 'textAlign', 'verticalAlign', 'cellPadding');\r\n\r\n        if (column.format && column.styles.textAlign === undefined) {\r\n            const type = column.format.type;\r\n            if (type === 'number') {\r\n                textAlign = 'right';\r\n            } else if (type === 'date') {\r\n                textAlign = 'center';\r\n            }\r\n        }\r\n\r\n        const vClassName = (verticalAlign === 'center' && 'v-c') || (verticalAlign === 'bottom' && 'v-b') || null;\r\n        const hClassName = (textAlign === 'center' && 'h-c') || (textAlign === 'right' && 'h-r') || null;\r\n\r\n        setClass(container, '__vertical__', vClassName);\r\n        setClass(container, '__horizontal__', hClassName);\r\n\r\n        if (font && container.style.fontFamily !== font) {\r\n            container.style.fontFamily = font;\r\n        }\r\n\r\n        if (color && container.style.color !== color) {\r\n            container.style.color = color;\r\n        }\r\n\r\n        if (labelDisplay.textContent !== label) {\r\n            labelDisplay.textContent = label;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nconst defaultHeaderRenderer = {\r\n    template: '<div>' +\r\n        '<label id=\"labelDisplay\" style=\"width:100%;text-align:center;margin: 0 3px\"></label>' +\r\n        '<div id=\"iconContainer\" style=\"height:80%; display:none; align-items:center;border-left:solid 1px #c3c3c3;\">' +\r\n        '<label id=\"iconDisplay\" style=\"font-size:small;min-width:15px;text-align: center;margin:0 3px;\"></label>' +\r\n        '</div>' +\r\n        '</div>' +\r\n        '</div>',\r\n    prepare(grid, state) {\r\n\r\n        const {labelDisplay, iconDisplay, iconContainer} = this.DOM;\r\n        const {column, label} = state;\r\n        const sortColumns = grid.getSortColumns() || [];\r\n        const numSortColumns = sortColumns.length;\r\n        const sortIndex = sortColumns.indexOf(column);\r\n\r\n        labelDisplay.textContent = label;\r\n\r\n        if (sortIndex >= 0) {\r\n            iconDisplay.textContent = ((column.sortDescending ? '↓' : '↑') + (numSortColumns > 1 ? sortIndex + 1 : ''));\r\n            iconContainer.style.display = 'flex';\r\n        } else {\r\n            iconContainer.style.display = 'none';\r\n        }\r\n    },\r\n    dispose() {\r\n\r\n    },\r\n};\r\n\r\nconst defaultTreeItemRenderer = {\r\n    template: '<div style=\"overflow: hidden\">' +\r\n        '<div id=\"indentBox\" style=\"display:inline-block\"></div>' +\r\n        '<button id=\"toggleButton\" on-mousedown=\"onClick\"></button>' +\r\n        '<label id=\"labelDisplay\"></label>' +\r\n        '</div>',\r\n    prepare(grid, state) {\r\n        let item = state.item,\r\n            column = state.column,\r\n            label = state.label || '',\r\n            level = grid.getNodeLevel(item),\r\n            indent = column.indent,\r\n            isOpen = grid.isOpenNode(item),\r\n            hasChildren = grid.hasChildren(item);\r\n\r\n        let indentBox = this.DOM['indentBox'];\r\n        let labelDisplay = this.DOM['labelDisplay'];\r\n        let toggleButton = this.DOM['toggleButton'];\r\n\r\n        indentBox.style.marginLeft = (level * indent) + 'px';\r\n        labelDisplay.textContent = label;\r\n\r\n        if (hasChildren) {\r\n            toggleButton.removeAttribute('hidden');\r\n            toggleButton.textContent = isOpen ? '-' : '+';\r\n        } else {\r\n            toggleButton.setAttribute('hidden', 'hidden');\r\n        }\r\n\r\n        this.item = item;\r\n        this.column = column;\r\n    },\r\n    onClick(e) {\r\n        this.grid.toggleNode(this.item);\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    },\r\n};\r\n\r\n\r\nconst defaultItemEditor = {\r\n\r\n    created(grid) {\r\n        this.watchEvent(document, 'keydown', (event) => {\r\n            switch (event.keyCode) {\r\n                case 37:\r\n                case 38:\r\n                case 39:\r\n                case 40:\r\n                    event.stopImmediatePropagation();\r\n                    return true;\r\n            }\r\n        }, true);\r\n    },\r\n    /**\r\n     * 편집 완료 전 호출.\r\n     */\r\n    getSaveValue() {\r\n        return this.DOM['input'].value;\r\n    },\r\n    prepare(grid, state) {\r\n        let input = this.DOM['input'],\r\n            value = state.label != null ? '' + state.label : '',\r\n            inputtedKey = state.inputtedKey;\r\n\r\n        if (inputtedKey) {\r\n            input.value = inputtedKey;\r\n            let numChar = inputtedKey.length;\r\n            input.setSelectionRange(numChar, numChar);\r\n        } else {\r\n            input.value = value;\r\n            input.setSelectionRange(0, value.length);\r\n        }\r\n\r\n        input.focus();\r\n    },\r\n    dispose() {\r\n    },\r\n    template: '<input id=\"input\" class=\"tachyon-editor\" type=\"text\">',\r\n};\n\nclass Cell {\r\n    constructor() {\r\n        this.item = null;\r\n        this.column = null;\r\n\r\n        this.hovered = false;\r\n        this.selected = false;\r\n\r\n        this.value = null;\r\n        this.label = null;\r\n        this.renderer = null;\r\n\r\n        this.visible = true;\r\n    }\r\n}\r\n\r\nclass DataCell extends Cell {\r\n    constructor(item, column, cellPosition) {\r\n        super();\r\n        this.item = item;\r\n        this.column = column;\r\n        this.cellPosition = cellPosition;\r\n    }\r\n\r\n    get isMerged() {\r\n        return this.cellPosition.isMerged;\r\n    }\r\n}\r\n\r\nclass TreeCell extends DataCell {\r\n    constructor(item, column, cellPosition) {\r\n        super(item, column, cellPosition);\r\n        this.level = -1;\r\n        this.hasChildren = false;\r\n        this.isOpened = false;\r\n        this.isLeaf = false;\r\n    }\r\n}\r\n\r\n\r\nclass HeaderCell extends Cell {\r\n    constructor(column) {\r\n        super();\r\n        this.column = column;\r\n    }\r\n}\r\n\r\nclass EditCell extends DataCell {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\n\nclass Group extends Element$1 {\r\n    constructor(grid) {\r\n        super();\r\n        this._grid = grid;\r\n        this._layers = [];\r\n        this._reasonsMask = 0;\r\n        this._invalidateFlag = false;\r\n        this._boundValidateNow = this.validateNow.bind(this);\r\n        this._freeElementMap = new Map();\r\n        this._factoryMap = new Map();\r\n        this._scrollLeft = 0;\r\n        this._scrollTop = 0;\r\n        this._lockedDisplay = false;\r\n\r\n        this.hookFreeElement = null;\r\n    }\r\n\r\n    get grid() {\r\n        return this._grid;\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠의 너비입니다.\r\n     * @returns {number}\r\n     */\r\n    get contentWidth() {\r\n        return this._contentWidth || 0;\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠의 높이입니다.\r\n     * @returns {number}\r\n     */\r\n    get contentHeight() {\r\n        return this._contentHeight || 0;\r\n    }\r\n\r\n    /**\r\n     * scrollLeft의 최대값입니다.\r\n     * @returns {number}\r\n     */\r\n    get maxScrollLeft() {\r\n        return Math.max(0, this.contentWidth - this.clientWidth);\r\n    }\r\n\r\n    /**\r\n     * scrollTop의 최대값입니다.\r\n     * @returns {number}\r\n     */\r\n    get maxScrollTop() {\r\n        return Math.max(0, this.contentHeight - this.clientHeight);\r\n    }\r\n\r\n    /**\r\n     * 수평 스크롤 위치값입니다.\r\n     * @returns {number}\r\n     */\r\n    get scrollLeft() {\r\n        return this._scrollLeft || 0;\r\n    }\r\n\r\n    set scrollLeft(value) {\r\n        value = parseInt(clampValue(value, 0, this.maxScrollLeft));\r\n        if (this._scrollLeft !== value) {\r\n            let old = this._scrollLeft;\r\n            this._scrollLeft = value;\r\n            this.updateScrollRect();\r\n            this.dispatchEvent(new CustomEvent('horizontal-scroll-position-change', {\r\n                bubbles: false,\r\n                detail: {\r\n                    newValue: value, oldValue: old\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 수직 스크롤 위치값입니다.\r\n     * @returns {number}\r\n     */\r\n    get scrollTop() {\r\n        return this._scrollTop;\r\n    }\r\n\r\n    set scrollTop(value) {\r\n        value = parseInt(clampValue(value, 0, this.maxScrollTop));\r\n        if (this._scrollTop !== value) {\r\n            let old = this._scrollTop;\r\n            this._scrollTop = value;\r\n            this.updateScrollRect();\r\n            this.dispatchEvent(new CustomEvent('vertical-scroll-position-change', {\r\n                bubbles: false,\r\n                detail: {\r\n                    newValue: value, oldValue: old\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠 너비와 높이를 설정합니다.\r\n     * @param width\r\n     * @param height\r\n     */\r\n    setContentSize(width, height) {\r\n        if (width !== this.contentWidth || height !== this.contentHeight) {\r\n            this._contentWidth = width;\r\n            this._contentHeight = height;\r\n            this.dispatchEvent(new CustomEvent('content-size-change'));\r\n        }\r\n    }\r\n\r\n    getScrollRect() {\r\n        return new Rectangle(this.scrollLeft, this.scrollTop, this.clientWidth, this.clientHeight);\r\n    }\r\n\r\n    getHorizontalScrollPositionDelta(delta) {\r\n        return delta > 0 ? -30 : 30;\r\n    }\r\n\r\n    getVerticalScrollPositionDelta(delta) {\r\n        return delta > 0 ? -30 : 30;\r\n    }\r\n\r\n    lockDisplay() {\r\n        this._lockedDisplay = true;\r\n    }\r\n\r\n    unlockDisplay() {\r\n        if (this._lockedDisplay) {\r\n            this._invalidateFlag = false;\r\n            this._lockedDisplay = false;\r\n            this.invalidateFor(Reason.ALL);\r\n        }\r\n    }\r\n\r\n    invalidate(reason) {\r\n        this.invalidateFor(reason || Reason.DISPLAY_UPDATE);\r\n    }\r\n\r\n    validateNow() {\r\n        if (!this._lockedDisplay && this._invalidateFlag && !this._inUpdateDisplay) {\r\n            this._inUpdateDisplay = true;\r\n            this._updateDisplay();\r\n            this._inUpdateDisplay = false;\r\n            this._reasonsMask = 0;\r\n            this._invalidateFlag = false;\r\n        }\r\n    }\r\n\r\n    clearElementCache() {\r\n        this._freeElementMap.clear();\r\n        this._factoryMap.clear();\r\n    }\r\n\r\n    invalidateFor(...reasons) {\r\n        reasons.forEach((reason) => {\r\n            this._reasonsMask |= (reason | 0);\r\n        });\r\n        if (!this._invalidateFlag) {\r\n            this._invalidateFlag = true;\r\n            nextFrameOnce(this._boundValidateNow);\r\n        }\r\n    }\r\n\r\n    isInvalidateReason(...args) {\r\n        for (let i = 0, num = args.length; i < num; i++) {\r\n            let reason = args[i];\r\n            if ((this._reasonsMask & reason) === reason) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _addLayer(layer) {\r\n        if (this._layers.indexOf(layer) < 0) {\r\n            this.appendChild(layer);\r\n            this._layers.push(layer);\r\n        }\r\n        return layer;\r\n    }\r\n\r\n    _beginLayers() {\r\n        let layers = this._layers,\r\n            numLayers = layers.length,\r\n            i = 0;\r\n        for (; i < numLayers; i++) {\r\n            layers[i].begin();\r\n        }\r\n    }\r\n\r\n    _endLayers() {\r\n        this._layers.forEach(layer => layer.end());\r\n    }\r\n\r\n    _prepareLayers(scrollX, scrollY, width, height) {\r\n        this._layers.forEach(layer => layer.prepareLayout(scrollX, scrollY, width, height));\r\n    }\r\n\r\n    _updateLayers(scrollX, scrollY, width, height, contentWidth, contentHeight, frozenRect) {\r\n        //레이어 크기 업데이트\r\n        this._layers.forEach(layer => layer.updateLayout(scrollX, scrollY, width, height, contentWidth, contentHeight, frozenRect));\r\n    }\r\n\r\n    _createRenderer() {\r\n        const factory = this._itemToFactory.apply(this, arguments);\r\n        const renderers = this._freeElementMap.get(factory);\r\n        const cellState = arguments[arguments.length - 1] instanceof Cell ? arguments[arguments.length - 1] : null;\r\n        let renderer;\r\n        if (renderers && renderers.length > 0) {\r\n            renderer = renderers.pop();\r\n        } else if (factory instanceof Function) {\r\n            renderer = new factory(this.grid);\r\n            if (renderer) {\r\n                callHook(renderer, 'created', this.grid, cellState);\r\n            }\r\n        }\r\n\r\n        if (renderer) {\r\n            callHook(renderer, 'ready', this.grid, cellState);\r\n        }\r\n        return renderer;\r\n    }\r\n\r\n    _freeRenderer(element) {\r\n        if (this.hookFreeElement instanceof Function && this.hookFreeElement(element) === false) {\r\n            return;\r\n        }\r\n        let factory = element && element.constructor;\r\n        if (!factory) {\r\n            return false;\r\n        }\r\n        let elements = this._freeElementMap.get(factory);\r\n        if (!elements) {\r\n            elements = [];\r\n            this._freeElementMap.set(factory, elements);\r\n        }\r\n        elements.push(element);\r\n        return true;\r\n    }\r\n\r\n    _itemToFactory() {\r\n        const template = this._itemToTemplate.apply(this, arguments);\r\n        if (template) {\r\n            let factory = this._factoryMap.get(template);\r\n            if (!factory) {\r\n                factory = Renderer.factory(template);\r\n                this._factoryMap.set(template, factory);\r\n            }\r\n            return factory;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _itemToTemplate() {\r\n    }\r\n\r\n    _updateScrollRect() {\r\n    }\r\n\r\n    _updateDisplay() {\r\n    }\r\n\r\n    _mouseEventToContent(event) {\r\n    }\r\n\r\n    _mouseEventToLocal(event) {\r\n        let rect = this.root.getBoundingClientRect();\r\n        return new Point(Math.round(event.clientX - rect.left), Math.round(event.clientY - rect.top));\r\n    }\r\n}\n\nconst PREFIX_CLASS_NAME = 'tachyon-layer-';\r\n\r\nconst Layer = (class Layer extends Element$1 {\r\n    constructor(name) {\r\n        super();\r\n        this.useDB = false;\r\n        this._ctx = this.canvas.getContext('2d');\r\n        this._bufferCanvas = document.createElement('canvas');\r\n        this._bufferCtx = this._bufferCanvas.getContext('2d');\r\n        addClass(this.root, PREFIX_CLASS_NAME + name);\r\n    }\r\n\r\n    get canvas() {\r\n        return this.DOM.canvas;\r\n    }\r\n\r\n    get context() {\r\n        return this.useDB ? this._bufferCtx : this._ctx;\r\n    }\r\n\r\n    begin() {\r\n        this.context.save();\r\n        if (this.useDB) {\r\n            this._bufferCtx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        }\r\n        this._ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    end() {\r\n        this.context.restore();\r\n        if (this.useDB && this._bufferCanvas.width > 0 && this._bufferCanvas.height > 0) {\r\n            this._ctx.drawImage(this._bufferCanvas, 0, 0);\r\n        }\r\n    }\r\n\r\n    setSize(width, height) {\r\n        if (super.setSize(width, height)) {\r\n            if (this.canvas.width !== width) {\r\n                this.canvas.width = this._bufferCanvas.width = width;\r\n            }\r\n            if (this.canvas.height !== height) {\r\n                this.canvas.height = this._bufferCanvas.height = height;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    prepareLayout(x, y, width, height) {\r\n        this.setSize(width, height);\r\n    }\r\n\r\n    updateLayout(x, y, width, height) {\r\n\r\n    }\r\n}).withDom('<div><canvas id=\"canvas\" class=\"canvas\"></canvas></div>');\r\n\r\n\r\nconst Section = (class Section extends Element$1 {\r\n    constructor(index) {\r\n        super();\r\n        this.index = index;\r\n        this.fragment = null;\r\n    }\r\n\r\n    begin() {\r\n        this.fragment = document.createDocumentFragment();\r\n    }\r\n\r\n    end() {\r\n        if (this.fragment.childNodes.length > 0) {\r\n            this.root.appendChild(this.fragment);\r\n        }\r\n        this.fragment = null;\r\n    }\r\n\r\n    addElement(element) {\r\n        if (this.fragment && element.parentElement !== this.root) {\r\n            this.fragment.appendChild(element);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}).withDom('<div class=\"tachyon-section\"><div id=\"sizeMarker\" style=\"position:absolute;width: 1px;height: 1px;visibility: hidden;pointer-events: none\"></div></div>');\r\n\r\nmixin(Section, {\r\n    LEFT: 1,\r\n    RIGHT: 2,\r\n    CENTER: 0,\r\n    TOP: 1,\r\n    BOTTOM: 2,\r\n    MIDDLE: 0,\r\n});\r\n\r\nconst H_SECTION_NAMES = ['center', 'left', 'right'];\r\nconst V_SECTION_NAMES = ['middle', 'top', 'bottom'];\r\n\r\nclass RendererLayer extends Layer {\r\n    constructor(name) {\r\n        super(name);\r\n        /**\r\n         *\r\n         * @type {Array<Section>}\r\n         * @private\r\n         */\r\n        this._sections = [];\r\n        this._overlaySection = new Section();\r\n        this.appendChild(this._overlaySection);\r\n        addClass(this._overlaySection.root, 'overlay');\r\n    }\r\n\r\n    begin() {\r\n        super.begin();\r\n        this._sections.forEach((section, index, items) => {\r\n            if (section) {\r\n                section.begin();\r\n            }\r\n        });\r\n        this._overlaySection.begin();\r\n    }\r\n\r\n    end() {\r\n        super.end();\r\n        this._sections.forEach(section => {\r\n            if (section) {\r\n                section.end();\r\n            }\r\n        });\r\n        this._overlaySection.end();\r\n    }\r\n\r\n    updateLayout(x, y, width, height, contentWidth, contentHeight, frozenRect) {\r\n        super.updateLayout(x, y, width, height, contentWidth, contentHeight, frozenRect);\r\n        let numSections = this._sections.length,\r\n            sx, sy, sw, sh, scrollX, scrollY;\r\n\r\n        for (let i = 0; i < numSections; i++) {\r\n            let section = this._sections[i];\r\n            if (section) {\r\n                let vIndex = Math.floor(section.index / 3);\r\n                let hIndex = section.index % 3;\r\n\r\n                if (hIndex === Section.LEFT) {\r\n                    sx = 0;\r\n                    sw = frozenRect.left;\r\n                    scrollX = 0;\r\n                } else if (hIndex === Section.RIGHT) {\r\n                    sx = width - frozenRect.right;\r\n                    sw = frozenRect.right;\r\n                    scrollX = 0;\r\n                } else {\r\n                    sx = frozenRect.left;\r\n                    sw = width - (frozenRect.left + frozenRect.right);\r\n                    scrollX = x;\r\n                    section.DOM.sizeMarker.style.left = contentWidth + 'px';\r\n                }\r\n\r\n                if (vIndex === Section.TOP) {\r\n                    sy = 0;\r\n                    sh = frozenRect.top;\r\n                    scrollY = 0;\r\n                } else if (vIndex === Section.BOTTOM) {\r\n                    sy = height - frozenRect.bottom;\r\n                    sh = frozenRect.bottom;\r\n                    scrollY = 0;\r\n\r\n                } else {\r\n                    sy = frozenRect.top;\r\n                    sh = height - (frozenRect.top + frozenRect.bottom);\r\n                    scrollY = y;\r\n                    section.DOM.sizeMarker.style.top = contentHeight + 'px';\r\n                }\r\n                section.setLayout(sx, sy, sw, sh);\r\n                section.root.scrollLeft = scrollX;\r\n                section.root.scrollTop = scrollY;\r\n            }\r\n        }\r\n        this._overlaySection.setLayout(0, 0, width, height);\r\n    }\r\n\r\n    addElement(vIndex, hIndex, element) {\r\n        const section = this._getSection(vIndex, hIndex);\r\n        return section.addElement(element);\r\n    }\r\n\r\n    addOverlayElement(element) {\r\n        this._overlaySection.addElement(element);\r\n    }\r\n\r\n    removeElement(element) {\r\n        if (element instanceof HTMLElement && element.parentElement) {\r\n            element.parentElement.removeChild(element);\r\n        }\r\n    }\r\n\r\n    _getSection(vIndex, hIndex) {\r\n        let index = vIndex * 3 + hIndex;\r\n        let section = this._sections[index];\r\n        if (!section) {\r\n            section = new Section(index);\r\n            this.appendChild(section);\r\n            this.setChildIndex(this._overlaySection, this.childElementCount);\r\n            addClass(section.root, H_SECTION_NAMES[hIndex] + '-' + V_SECTION_NAMES[vIndex]);\r\n            this._sections[index] = section;\r\n            section.begin();\r\n        }\r\n        return section;\r\n    }\r\n}\n\nclass HeaderDimensions {\n    constructor(headerGroup) {\n        this.headerGroup = headerGroup;\n\n        this._visibleColumns = [];\n        this._visibleLayouts = [];\n        this._oldVisibleColumns = null;\n\n        this._pendingHeaders = null;\n        this._headers = [];\n\n        this._rowCount = 1;\n        this._rowHeight = 30;\n    }\n\n    get dataGroup() {\n        return this.headerGroup.dataGroup;\n    }\n\n    get columnCollection() {\n        return this.dataGroup.columnCollection\n    }\n\n    get rowCount() {\n        return this._rowCount;\n    }\n\n    get headers() {\n        return this._headers;\n    }\n\n    get rowHeight() {\n        return this._rowHeight;\n    }\n\n    get headerHeight() {\n        return this.rowHeight * this.rowCount;\n    }\n\n    setRowDefaultHeight(value) {\n        this._rowHeight = value;\n    }\n\n    updateStart() {\n        this._pendingHeaders = [];\n    }\n\n    updateEnd() {\n        const oldHeaders = this._headers;\n        this._headers = this._pendingHeaders;\n        this._pendingHeaders = null;\n        this._oldVisibleColumns = null;\n        return {\n            headers: oldHeaders\n        }\n    }\n\n    getHeader(column) {\n        const offset = this._visibleColumns.indexOf(column);\n        return offset >= 0 ? this._headers[offset] : null;\n    }\n\n    setHeader(column, header) {\n        const headers = this._pendingHeaders;\n        const offset = this._visibleColumns.indexOf(column);\n        headers[offset] = header;\n    }\n\n    takeHeader(column) {\n        const offset = (this._oldVisibleColumns || this._visibleColumns).indexOf(column);\n        if (offset >= 0) {\n            const header = this._headers[offset];\n            this._headers[offset] = null;\n            return header;\n        }\n        return null;\n    }\n\n    createHeader(column) {\n        return new HeaderCell(column);\n    }\n\n    isOpenColumn(column) {\n        if (!column.visible) {\n            return false;\n        }\n\n        let p = column.parent;\n        while (p) {\n            if (!p.open) {\n                return false;\n            }\n            p = p.parent;\n        }\n        return true;\n    }\n\n    getHeaderLayout(column) {\n        const offset = this._visibleColumns.indexOf(column);\n        return offset >= 0 ? this._visibleLayouts[offset] : null;\n    }\n\n    /**\n     * 헤더 행개수를 갱신합니다.\n     */\n    updateHeaderRowCount() {\n        const columns = this.dataGroup.normalizedColumns;\n        this._rowCount = columns.reduce((max, column) => {\n            if (column.visible) {\n                let depth = 0;\n                let closeDepth = 0;\n                while (column) {\n                    if (!column.open || column.height === 0) {\n                        closeDepth = depth;\n                    }\n                    depth++;\n                    column = column.parent;\n                }\n                max = Math.max(depth - closeDepth, max);\n            }\n            return max;\n        }, 0);\n    }\n\n\n    /**\n     * 헤더 컬럼 위치정보를 갱신합니다.\n     */\n    updateHeaderColumnLayouts() {\n        const dimensions = this.dataGroup._dimensions;\n        const columns = this.dataGroup.normalizedColumns;\n        const oldVisibleColumns = this._visibleColumns;\n        const visibleColumns = [];\n        const layouts = [];\n        const done = new Set();\n        dimensions.forEachColumnLayouts((layout, columnIndex) => {\n            let column = columns[columnIndex];\n            while (column && !done.has(column) && column.height !== 0) {\n                done.add(column);\n                if (this.isOpenColumn(column)) {\n                    visibleColumns.push(column);\n                    layouts.push(this.calculateHeaderLayout(column));\n                }\n\n                column = column.parent;\n            }\n        });\n        this._visibleColumns = visibleColumns;\n        this._visibleLayouts = layouts;\n        this._oldVisibleColumns = oldVisibleColumns;\n    }\n\n    calculateHeaderLayout(column) {\n        const collection = this.columnCollection;\n        const dataDimensions = this.dataGroup._dimensions;\n        const leaves = collection.getVisibleLeafColumns(column);\n        const headerHeight = this.headerGroup.headerHeight;\n        const rowHeight = this.headerGroup.headerRowHeight;\n\n        const layout = dataDimensions.getColumnLayouts(leaves[0].index, leaves[leaves.length - 1].index);\n        const yy = collection.getAncestorNodes(column).reduce((cur, pc) => {\n            let height = pc.height;\n            if (height == null || height < 0) {\n                height = rowHeight;\n            }\n            cur += height;\n            return cur;\n        }, 0);\n        const hh = (column.depth === 0 || !column.open) ? headerHeight - yy : column.height === 0 ? 0 : rowHeight;\n        return {...layout, y: yy, height: hh, sy: 0, sh: hh, dy: yy, dh: hh}\n    }\n\n    forEachHeaderLayouts(callback) {\n        this._visibleLayouts.forEach((layout, index) => callback(layout, this._visibleColumns[index]));\n    }\n\n    clear() {\n        this._visibleColumns = [];\n        this._visibleLayouts = [];\n        this._pendingHeaders = null;\n        this._headers = [];\n    }\n}\n\nconst DRAG_SHIELD = 5;\r\nconst DOUBLE_CLICK_DELAY$1 = 400;\r\n\r\nclass HeaderGroup extends Group {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this._headerDimensions = new HeaderDimensions(this);\r\n\r\n        this._selectionLayer = this._addLayer(new Layer('selection'));\r\n        this._rendererLayer = this._addLayer(new RendererLayer('renderer'));\r\n        this._separatorLayer = this._addLayer(new Layer('separator'));\r\n\r\n        this._headerRenderer = defaultConfig.headerRenderer || defaultHeaderRenderer;\r\n        this.headerRowHeight = defaultConfig.styles.headerRowHeight;\r\n\r\n        this._boundDocumentMouseMove = this._onDocumentMouseMove.bind(this);\r\n        this._boundDocumentMouseUp = this._onDocumentMouseUp.bind(this);\r\n\r\n        this.addEventListener('mousedown', this._onMouseDown.bind(this));\r\n        this.addEventListener('mousemove', this._onMouseMove.bind(this));\r\n        this.addEventListener('mouseout', this._onMouseOut.bind(this));\r\n\r\n        const boundDataGroupEvent = this._onDataGroupEvent.bind(this);\r\n        [\r\n            'visible-columns-change',\r\n            'normalized-columns-change',\r\n            'column-visible',\r\n            'column-size-change',\r\n            'horizontal-scroll-position-change',\r\n            'group-size-change',\r\n        ].forEach(type => this.dataGroup.addEventListener(type, boundDataGroupEvent));\r\n    }\r\n\r\n    get headerRenderer() {\r\n        return this._headerRenderer;\r\n    }\r\n\r\n    set headerRenderer(value) {\r\n        if (this._headerRenderer !== value) {\r\n            this._headerRenderer = value;\r\n            this.clearCache();\r\n            this.invalidateFor(Reason.RENDERER_CHANGE);\r\n        }\r\n    }\r\n\r\n    get headerHeight() {\r\n        return this._headerDimensions.headerHeight;\r\n    }\r\n\r\n    get headerRowHeight() {\r\n        return this._headerDimensions.rowHeight;\r\n    }\r\n\r\n    set headerRowHeight(value) {\r\n        if (this.headerRowHeight !== value) {\r\n            this._headerDimensions.setRowDefaultHeight(value);\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get dataGroup() {\r\n        return this.grid.dataGroup;\r\n    }\r\n\r\n    get normalizedColumns() {\r\n        return this.dataGroup.normalizedColumns;\r\n    }\r\n\r\n    doLayout(needAllUpdate) {\r\n        this.invalidateFor(needAllUpdate ? Reason.ALL : 0);\r\n        this.validateNow();\r\n    }\r\n\r\n    /**\r\n     * x,y 위치로 컬럼을 반환합니다. x,y는 컨텐츠 좌표입니다.\r\n     * @param x\r\n     * @param y\r\n     * @returns {null}\r\n     */\r\n    getColumnByPosition(x, y) {\r\n        //TODO break 적용 여부\r\n        let found = null;\r\n        this._headerDimensions.forEachHeaderLayouts((layout, column) => {\r\n            if (!found && x >= layout.x && x < layout.x + layout.width && y >= layout.y && y < layout.y + layout.height) {\r\n                found = column;\r\n            }\r\n        });\r\n\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼의 헤더 위치정보를 반환합니다.\r\n     * @param column\r\n     * @returns {*|null}\r\n     */\r\n    getHeaderLayout(column) {\r\n        return this._headerDimensions.getHeaderLayout(column);\r\n    }\r\n\r\n    clearHeaderRenderers() {\r\n        this._freeHeaders(this._headerDimensions.headers.slice(0));\r\n    }\r\n\r\n    clearCache() {\r\n        this.clearHeaderRenderers();\r\n        this._headerDimensions.clear();\r\n        this.clearElementCache();\r\n        this.invalidateFor(Reason.RENDERER_CHANGE);\r\n    }\r\n\r\n    destroy() {\r\n        this.clearCache();\r\n    }\r\n\r\n    _measureSize() {\r\n        this.style.minHeight = this.headerHeight + 'px';\r\n    }\r\n\r\n    _updateDisplay() {\r\n        const dataGroup = this.dataGroup;\r\n        const scrollX = dataGroup.scrollLeft;\r\n        const scrollY = 0;\r\n        const width = dataGroup.clientWidth;\r\n        const frozenRect = dataGroup.getVisibleFrozenSizeRect().clone();\r\n        const contentWidth = dataGroup.getContentWidth();\r\n\r\n        frozenRect.top = frozenRect.bottom = 0;\r\n\r\n        const isColumnsChanged = this.isInvalidateReason(Reason.COLUMNS_CHANGE);\r\n        const isColumnVisibleChanged = this.isInvalidateReason(Reason.COLUMN_VISIBLE);\r\n        const isRendererChanged= this.isInvalidateReason(Reason.RENDERER_CHANGE);\r\n        const isVisibleColumnsChanged = this.isInvalidateReason(Reason.VISIBLE_COLUMNS_CHANGE);\r\n        const isColumnUpdated = isColumnsChanged || isColumnVisibleChanged || isVisibleColumnsChanged ||\r\n            this.isInvalidateReason(Reason.COLUMN_UPDATE, Reason.HORIZONTAL_SCROLL_CHANGE, Reason.GROUP_SIZE_CHANGE);\r\n\r\n        if (isColumnsChanged) {\r\n            this.clearCache();\r\n        }\r\n\r\n        this._beginLayers();\r\n\r\n        if (isColumnsChanged || isColumnVisibleChanged) {\r\n            this._headerDimensions.updateHeaderRowCount();\r\n            this._measureSize();\r\n        }\r\n\r\n        if (isColumnUpdated || isRendererChanged) {\r\n            this._headerDimensions.updateHeaderColumnLayouts();\r\n        }\r\n\r\n        const height = this.headerHeight;\r\n\r\n        this._prepareLayers(scrollX, scrollY, width, height);\r\n        this._createHeaders(scrollX, scrollY, width, height);\r\n        this._paintSeparators(scrollX, scrollY, width, height);\r\n        this._updateLayers(scrollX, scrollY, width, height, contentWidth, height, frozenRect);\r\n        this._endLayers();\r\n\r\n        this.setContentSize(contentWidth, height);\r\n    }\r\n\r\n    _createHeaders(scrollX, scrollY, width, height) {\r\n        const context = this._rendererLayer.context;\r\n        const dimensions = this._headerDimensions;\r\n        dimensions.updateStart();\r\n        dimensions.forEachHeaderLayouts((layout, column) => {\r\n            const header = dimensions.takeHeader(column);\r\n            const newHeader = this._createHeader(column, layout, header);\r\n            this._paintHeader(context, newHeader, layout);\r\n            dimensions.setHeader(column, newHeader);\r\n        });\r\n        const {headers} = dimensions.updateEnd();\r\n        this._freeHeaders(headers);\r\n    }\r\n\r\n    _createHeader(column, layout, cacheHeader) {\r\n        const header = this._setupHeader(cacheHeader, column);\r\n        const renderer = header.renderer || this._createRenderer(column, header);\r\n        header.renderer = renderer;\r\n\r\n        const element = renderer && renderer.htmlElement;\r\n        if (element) {\r\n            addClass(element, 'header-cell');\r\n            const layer = this._rendererLayer;\r\n            if (!column.isLeaf) {\r\n                layer.addOverlayElement(element);\r\n                setLayout(element, layout.dx, layout.dy, Math.min(layout.dw, layout.width), layout.dh);\r\n            } else {\r\n                layer.addElement(Section.MIDDLE, this.dataGroup.getHorizontalSectionIndex(column.index), element);\r\n                setLayout(element, layout.x - layout.baseX, layout.y, layout.width, layout.height);\r\n            }\r\n        }\r\n\r\n        callHook(renderer, 'prepare', this.grid, header);\r\n\r\n        return header;\r\n    }\r\n\r\n    _setupHeader(header, column) {\r\n        if (!header) {\r\n            header = this._headerDimensions.createHeader(column);\r\n        }\r\n        header.item = column;\r\n        header.column = column;\r\n        header.label = header.value = column.headerText;\r\n        header.hovered = this._overColumn === column;\r\n        header.visible = true;\r\n\r\n        return header;\r\n    }\r\n\r\n    _paintHeader(context, header, layout) {\r\n        if (!header.visible) {\r\n            return;\r\n        }\r\n        const renderer = header.renderer;\r\n        if (renderer.paint) {\r\n            const isLeaf = header.column.isLeaf;\r\n            const dx = layout.dx;\r\n            const dy = layout.dy;\r\n            const sx = isLeaf ? layout.sx : 0;\r\n            const sy = isLeaf ? layout.sy : 0;\r\n            const sw = layout.sw;\r\n            const sh = layout.sh;\r\n            const width = isLeaf ? layout.width : sw;\r\n            const height = isLeaf ? layout.height : sh;\r\n\r\n            context.save();\r\n\r\n            context.beginPath();\r\n            context.rect(dx, dy, sw, sh);\r\n            context.clip();\r\n\r\n            context.translate(dx - sx, dy - sy);\r\n            renderer.paint(context, header, width, height);\r\n\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    _paintSeparators(scrollX, scrollY, width, height) {\r\n        const context = this._separatorLayer.context;\r\n        const dimensions = this._headerDimensions;\r\n        const columnLineStyle = this._getStyle('headerColumnLine');\r\n\r\n        //컬럼 구분선\r\n        context.save();\r\n        dimensions.forEachHeaderLayouts((layout, column) => {\r\n            const style = column.getStyle('headerColumnLine');\r\n            const parentColumn = column.parent;\r\n            const parentLayout = parentColumn && dimensions.getHeaderLayout(parentColumn) || null;\r\n            !!dimensions.getHeader(column);\r\n            if (!parentLayout || (parentLayout.x + parentLayout.width !== layout.x + layout.width)) {\r\n                lineTo(context, layout.dx + layout.dw, layout.dy, layout.dx + layout.dw, height, style || columnLineStyle);\r\n            }\r\n        });\r\n\r\n        //마지막 컬럼 구분선\r\n        const lastColumnLayout = this.dataGroup._dimensions.getColumnLayout(this.normalizedColumns.length - 1);\r\n        const lastRight = lastColumnLayout && lastColumnLayout.x + lastColumnLayout.width || -1;\r\n        if (lastRight > 0 && lastRight < width) {\r\n            lineTo(context, lastRight, 0, lastRight, height, columnLineStyle);\r\n        }\r\n\r\n        // 스크롤 구분선.\r\n        if (this._grid.hasVerticalScroll) {\r\n            lineTo(context, width - 1, 0, width - 1, height, columnLineStyle);\r\n        }\r\n        context.restore();\r\n\r\n        //행 구분선\r\n        const headerRowLine = this._getStyle('headerRowLine');\r\n        context.save();\r\n        dimensions.forEachHeaderLayouts((layout, column) => {\r\n            if (!column.isLeaf && layout.height > 0) {\r\n                lineTo(context, layout.dx, layout.dy + layout.dh, layout.dx + Math.min(layout.dw, layout.width), layout.dy + layout.dh, headerRowLine);\r\n            }\r\n        });\r\n        context.restore();\r\n    }\r\n\r\n    _freeHeaders(headers) {\r\n        const layer = this._rendererLayer;\r\n        headers.forEach(header => {\r\n            const renderer = header && header.renderer;\r\n            if (renderer) {\r\n                const element = renderer.htmlElement;\r\n                callHook(renderer, 'dispose');\r\n                if (element) {\r\n                    layer.removeElement(element);\r\n                }\r\n                this._freeRenderer(renderer);\r\n            }\r\n        });\r\n    }\r\n\r\n    _itemToTemplate(column) {\r\n        let headerRenderer = column.headerRenderer || this.headerRenderer;\r\n        let template = headerRenderer instanceof Function ? headerRenderer(column) : headerRenderer;\r\n        if (!template) {\r\n            template = defaultHeaderRenderer;\r\n        }\r\n        return template;\r\n    }\r\n\r\n    _getStyle(key) {\r\n        return this.grid.getStyle(key);\r\n    }\r\n\r\n    _dispatchDataGridHeaderEvent(type, column, trigger) {\r\n        return this.dispatchEvent(new CustomEvent(type, {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: {\r\n                column: column,\r\n                trigger: trigger,\r\n            },\r\n        }));\r\n    }\r\n\r\n    _mouseEventToContent(event) {\r\n        const point = this._mouseEventToLocal(event);\r\n        const width = this.dataGroup.clientWidth;\r\n        const contentWidth = this.dataGroup.contentWidth;\r\n        const frozenRect = this.dataGroup.getVisibleFrozenSizeRect();\r\n\r\n        if (frozenRect.left > 0 && point.x <= frozenRect.left) ; else if (frozenRect.right > 0 && width - point.x <= frozenRect.right) {\r\n            point.x = contentWidth - (width - point.x);\r\n        } else {\r\n            point.x = point.x + this.dataGroup.scrollLeft;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    _getSeparatorColumn(event) {\r\n        const GAP = 5;\r\n        const point = this._mouseEventToLocal(event);\r\n        let found = null;\r\n        this._headerDimensions.forEachHeaderLayouts((layout, column) => {\r\n            const right = layout.dx + layout.dw;\r\n            //right를 기준으로 경계영역이 보일때만 계산한다.\r\n            if ((!column.isLeaf || layout.width - (layout.sx + layout.sw) < 1) &&\r\n                point.x >= right - GAP && point.x < right + GAP && point.y >= layout.y && point.y < layout.y + layout.height) {\r\n                found = column;\r\n            }\r\n        });\r\n        if (found && !found.isLeaf) {\r\n            const leaves = this.dataGroup.columnCollection.getVisibleLeafColumns(found);\r\n            found = leaves[leaves.length - 1];\r\n        }\r\n        return found;\r\n    }\r\n\r\n    _onMouseDown(event) {\r\n        if (event.defaultPrevented) {\r\n            return;\r\n        }\r\n\r\n        const point = this._mouseEventToContent(event);\r\n        const column = point && this.getColumnByPosition(point.x, point.y);\r\n        if (column) {\r\n            this._mouseDownPoint = point;\r\n            this._mouseDownColumn = column;\r\n            this._mouseDownSeparatorColumn = this._getSeparatorColumn(event);\r\n            if (this._mouseDownSeparatorColumn) {\r\n                this._mouseDownColumn = null;\r\n                this._dispatchDataGridHeaderEvent('separator-down', this._mouseDownSeparatorColumn, event);\r\n            } else if (this._mouseDownColumn) {\r\n                this._dispatchDataGridHeaderEvent('header-down', this._mouseDownColumn, event);\r\n            }\r\n            document.addEventListener('mousemove', this._boundDocumentMouseMove);\r\n            document.addEventListener('mouseup', this._boundDocumentMouseUp);\r\n        }\r\n    }\r\n\r\n    _onMouseMove(event) {\r\n        if ((event.buttons & 1) !== 1) {\r\n            const separatorColumn = this._getSeparatorColumn(event);\r\n            const point = this._mouseEventToContent(event);\r\n            const column = !separatorColumn && this.getColumnByPosition(point.x, point.y);\r\n\r\n            if (separatorColumn !== this._overSeparatorColumn) {\r\n                if (this._overSeparatorColumn) {\r\n                    this._dispatchDataGridHeaderEvent('separator-out', this._overSeparatorColumn, event);\r\n                }\r\n                if (separatorColumn) {\r\n                    this._dispatchDataGridHeaderEvent('separator-over', separatorColumn, event);\r\n                }\r\n            }\r\n\r\n            if (column !== this._overColumn) {\r\n                if (this._overColumn) {\r\n                    this._dispatchDataGridHeaderEvent('header-out', this._overColumn, event);\r\n                }\r\n                if (column) {\r\n                    this._dispatchDataGridHeaderEvent('header-over', column, event);\r\n                }\r\n            }\r\n            this._overSeparatorColumn = separatorColumn;\r\n            this._overColumn = column;\r\n        }\r\n    }\r\n\r\n    _onMouseOut(event) {\r\n        if (this._overSeparatorColumn) {\r\n            this._dispatchDataGridHeaderEvent('separator-out', this._overSeparatorColumn, event);\r\n        }\r\n        if (this._overColumn) {\r\n            this._dispatchDataGridHeaderEvent('header-out', this._overColumn, event);\r\n        }\r\n        this._overSeparatorColumn = null;\r\n        this._overColumn = null;\r\n    }\r\n\r\n    _onDocumentMouseMove(event) {\r\n        const point = this._mouseEventToContent(event);\r\n        if (this._mouseDownSeparatorColumn) {\r\n            this._dispatchDataGridHeaderEvent('separator-drag', this._mouseDownSeparatorColumn, event);\r\n        } else if (this._mouseDownColumn) {\r\n            if (!this._mouseDownPoint || Point.distance(this._mouseDownPoint, point) > DRAG_SHIELD) {\r\n                this._dispatchDataGridHeaderEvent('header-drag', this._mouseDownColumn, event);\r\n                this._mouseDownPoint = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    _onDocumentMouseUp(event) {\r\n        document.removeEventListener('mousemove', this._boundDocumentMouseMove);\r\n        document.removeEventListener('mouseup', this._boundDocumentMouseUp);\r\n\r\n        let point = this._mouseEventToContent(event);\r\n        let column = point && this.getColumnByPosition(point.x, point.y);\r\n        let separatorColumn = this._getSeparatorColumn(event);\r\n\r\n        if (this._mouseDownSeparatorColumn) {\r\n            column = null;\r\n        }\r\n\r\n        if (separatorColumn || column) {\r\n            let eventType;\r\n            if (this._lastClickTime >= 0 && Date.now() - this._lastClickTime < DOUBLE_CLICK_DELAY$1) {\r\n                this._lastClickTime = -1;\r\n                eventType = separatorColumn ? 'separator-double-click' : 'header-double-click';\r\n            } else {\r\n                this._lastClickTime = Date.now();\r\n                eventType = separatorColumn ? 'separator-click' : 'header-click';\r\n            }\r\n\r\n            this._dispatchDataGridHeaderEvent(eventType, separatorColumn || column, event);\r\n        }\r\n\r\n        if (this._mouseDownSeparatorColumn) {\r\n            this._dispatchDataGridHeaderEvent('separator-up', this._mouseDownSeparatorColumn, event);\r\n        }\r\n\r\n        if (this._mouseDownColumn) {\r\n            this._dispatchDataGridHeaderEvent('header-up', column, event);\r\n        }\r\n\r\n        this._mouseDownSeparatorColumn = null;\r\n        this._mouseDownColumn = null;\r\n    }\r\n\r\n    _onDataGroupEvent(event) {\r\n        switch (event.type) {\r\n            case 'normalized-columns-change':\r\n                this.invalidateFor(Reason.COLUMNS_CHANGE);\r\n                break;\r\n            case 'visible-columns-change':\r\n                this.invalidateFor(Reason.VISIBLE_COLUMNS_CHANGE);\r\n                break;\r\n            case 'column-size-change':\r\n                this.invalidateFor(Reason.COLUMN_UPDATE);\r\n                break;\r\n            case 'column-visible':\r\n                this.invalidateFor(Reason.COLUMN_VISIBLE);\r\n                break;\r\n            case 'horizontal-scroll-position-change':\r\n                this.invalidateFor(Reason.HORIZONTAL_SCROLL_CHANGE);\r\n                break;\r\n            case 'group-size-change':\r\n                this.invalidateFor(Reason.GROUP_SIZE_CHANGE);\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nHeaderGroup.withDom('<div class=\"tachyon-group-header\"></div>');\n\nclass CrossCellPosition extends CellPosition {\n    constructor(rowIndex, columnIndex, endRowIndex, endColumnIndex) {\n        super(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n        this._crossCellPositions = [];\n    }\n\n    /**\n     * 셀의 상단 행 인덱스입니다.\n     * @returns {number}\n     */\n    get crossCellPositions() {\n        return this._crossCellPositions;\n    }\n\n    set crossCellPositions(cells) {\n        this._crossCellPositions = cells || [];\n    }\n\n    containsCross(columnIndex, rowIndex) {\n        return this.crossCellPositions.some(c => c.contains(columnIndex, rowIndex));\n    }\n}\n\nfunction internalFindCell(cells, rowIndex, columnIndex) {\n\tconst numCells = cells.length;\n\tfor (let i = 0; i < numCells; i++) {\n\t\tlet cell = cells[i];\n\t\tif (!cell.isCrossed && rowIndex < cell.y) {\n\t\t\tbreak;\n\t\t}\n\t\tif (cell.contains(columnIndex, rowIndex)) {\n\t\t\treturn cell;\n\t\t}\n\t}\n\n\t/*for (let i = cells.length - 1; i >= 0; i--) {\n\t\tlet cell = cells[i];\n\t\tif (!cell.isCrossed && cell.endRowIndex < rowIndex) {\n\t\t\tbreak;\n\t\t}\n\t\tif (cell.contains(columnIndex, rowIndex)) {\n\t\t\treturn cell;\n\t\t}\n\t}\n\t*/\n\treturn null;\n}\n\nclass Merger {\n\tconstructor(dataGroup) {\n\t\tthis._dataGroup = dataGroup;\n\t\tthis._cells = [];\n\n\t\tthis._affectColumnsMap = new Map();\n\t\tthis._collection = null;\n\t\tthis._compareFunction = null;\n\t\tthis._columns = [];\n\t\tthis._targetColumnIndices = [];\n\t\tthis._doneRowsMap = {};\n\t\tthis._needUpdate = true;\n\t\tthis._crossCells = [];\n\n\t\tthis._visibleRect = null;\n\t\tthis._visibleCells = [];\n\t}\n\n\t/**\n\t * 셀 목록을 환합니다.\n\t * @returns {Array<CellPosition>}\n\t */\n\tgetCells() {\n\t\treturn this._cells.slice(0);\n\t}\n\n\tgetCrossCells() {\n\t\tif (this._needUpdate) {\n\t\t\tthis._needUpdate = false;\n\t\t\tthis._crossCells = this._cells.reduce((arr, cell) => {\n\t\t\t\tif (cell instanceof CrossCellPosition) {\n\t\t\t\t\tarr = arr.concat(cell.crossCellPositions);\n\t\t\t\t}\n\t\t\t\treturn arr;\n\t\t\t}, []);\n\t\t}\n\t\treturn this._crossCells;\n\t}\n\n\t/**\n\t * 행당 셀을 추가합니다, 교차된 다른 셀은 삭제됩니다.\n\t * @param cell\n\t * @returns {boolean} 추가 되었으면 'true' 반환합니다.\n\t */\n\taddCell(cell) {\n\t\tif (!cell.isMerged) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.removeCell(cell);\n\t\tthis._internalAddCell(cell);\n\t\treturn true;\n\t}\n\n\t_internalAddCell(cell) {\n\t\tthis._needUpdate = true;\n\t\tconst cells = this._cells;\n\t\tconst numCells = cells.length;\n\t\tif (numCells <= 0) {\n\t\t\tcells.push(cell);\n\t\t\treturn true;\n\t\t}\n\n\t\tconst ty = cell.y;\n\t\tconst tx = cell.x;\n\t\tfor (let i = 0; i < numCells; i++) {\n\t\t\tconst c = cells[i];\n\t\t\tconst sy = c.y;\n\t\t\tconst sx = c.x;\n\t\t\t//추가될 셀의\n\t\t\t//행 인덱스가 작을 때\n\t\t\t//행 인덱스가 같고 컬럼 인덱스가 작을 때\n\t\t\tif (ty < sy || (ty === sy && tx < sx)) {\n\t\t\t\tcells.splice(i, 0, cell);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tcells.push(cell);\n\t\treturn true;\n\t}\n\n\t/**\n\t * 해당 셀과 교차한 모든 셀을 삭제합니다.\n\t * @param cell\n\t * @returns {Array<CellPosition>}\n\t */\n\tremoveCell(cell) {\n\t\tthis._needUpdate = true;\n\t\tconst cells = this._cells;\n\t\tconst removedCells = [];\n\t\tlet index = 0;\n\n\t\twhile (index < cells.length) {\n\t\t\tlet c = cells[index];\n\t\t\t//셀 삭제\n\t\t\tif (cell.containsRect(c)) {\n\t\t\t\tcells.splice(index, 1);\n\t\t\t\tremovedCells.push(c);\n\t\t\t} else {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn removedCells;\n\t}\n\n\t/**\n\t * 해당 셀 목록과 교차한 모든 셀을 삭제합니다.\n\t * @param cells\n\t * @returns {Array<CellPosition>[]}\n\t */\n\tremoveCells(cells) {\n\t\treturn (cells || []).map(cell => (this.removeCell(cell)));\n\t}\n\n\tinsertRows(index, count) {\n\t\tthis._needUpdate = true;\n\t\tconst cells = this._cells.slice(0);\n\t\tconst numCells = cells.length;\n\t\tconst target = new CellPosition(index, 0, index + count - 1, 1073741824);\n\t\tconst removed = [];\n\n\t\tfor (let i = numCells - 1; i >= 0; i--) {\n\t\t\tlet cell = cells[i];\n\t\t\tif (index <= cell.y) {\n\t\t\t\tcell.y += count;\n\t\t\t} else if (cell.rowCount > 1 && target.intersects(cell)) {\n\t\t\t\t//index 포함하고 cell 크기에 영향을 줄때 삭제\n\t\t\t\tremoved.push.apply(removed, cells.splice(i, 1));\n\t\t\t}\n\t\t}\n\t\tthis._cells = cells;\n\t}\n\n\tdeleteRows(index, count) {\n\t\tthis._needUpdate = true;\n\t\tconst cells = this._cells.slice(0);\n\t\tconst numCells = cells.length;\n\t\tconst target = new CellPosition(index, 0, index + count - 1, 1073741824);\n\t\tconst endRowIndex = target.endRowIndex;\n\t\tconst removed = [];\n\n\t\tfor (let i = numCells - 1; i >= 0; i--) {\n\t\t\tlet cell = cells[i];\n\t\t\tif (endRowIndex < cell.y) {\n\t\t\t\tcell.y -= count;\n\t\t\t} else if (target.intersects(cell)) {\n\t\t\t\t//cell 크기에 영향을 줄때 삭제\n\t\t\t\tremoved.push.apply(removed, cells.splice(i, 1));\n\t\t\t}\n\t\t}\n\t\tthis._cells = cells;\n\t}\n\n\tinsertColumns(index, count) {\n\n\t}\n\n\tdeleteColumns(index, count) {\n\n\t}\n\n\tfindCell(rowIndex, columnIndex) {\n\t\tlet found = internalFindCell(this._cells, rowIndex, columnIndex);\n\t\tif (!found) {\n\t\t\tfound = internalFindCell(this.getCrossCells(), rowIndex, columnIndex);\n\t\t}\n\t\treturn found;\n\t}\n\n\tfindCellFromVisibleRect(rowIndex, columnIndex) {\n\t\tif (!this._visibleRect) {\n\t\t\treturn null;\n\t\t}\n\t\tlet found = null;\n\t\tif (!this._visibleRect.contains(columnIndex, rowIndex)) {\n\t\t\tfound = internalFindCell(this._cells, rowIndex, columnIndex);\n\t\t} else if (this._visibleCells.length > 0) {\n\t\t\tfound = internalFindCell(this._visibleCells, rowIndex, columnIndex);\n\t\t}\n\n\t\tif (!found) {\n\t\t\tfound = internalFindCell(this.getCrossCells(), rowIndex, columnIndex);\n\t\t}\n\t\treturn found\n\t}\n\n\t/**\n\t * 보이는 영역 지정\n\t * @param rowIndex\n\t * @param columnIndex\n\t * @param endRowIndex\n\t * @param endColumnIndex\n\t */\n\tsetVisibleRect(rowIndex, columnIndex, endRowIndex, endColumnIndex) {\n\t\tconst rect = new CellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n\t\tconst cells = this._cells;\n\t\tconst visibleCells = [];\n\t\tfor (let i = 0, numCells = cells.length; i < numCells; i++) {\n\t\t\tlet cell = cells[i];\n\t\t\tif (endRowIndex < cell.y) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (cell.intersects(rect)) {\n\t\t\t\tvisibleCells.push(cell);\n\t\t\t}\n\t\t}\n\n\t\tthis._visibleRect = rect;\n\t\tthis._visibleCells = visibleCells;\n\t}\n\n\n\tunionCellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex, includeCrossCells) {\n\t\tlet cells = this.getCells();\n\t\tif (includeCrossCells) {\n\t\t\tcells = cells.concat(this.getCrossCells());\n\t\t}\n\t\tlet maxCell = new CellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n\t\tfor (let i = 0; i < cells.length; i++) {\n\t\t\tlet cell = cells[i];\n\t\t\tif (maxCell.intersects(cell)) {\n\t\t\t\tif (!maxCell.containsRect(cell)) {\n\t\t\t\t\tmaxCell = maxCell.union(cell);\n\t\t\t\t}\n\t\t\t\tcells.splice(i, 1);\n\t\t\t\t//처음부터 다시.\n\t\t\t\ti = -1;\n\t\t\t}\n\t\t}\n\t\treturn maxCell;\n\t}\n\n\tclear() {\n\t\tthis._cells = [];\n\t\tthis._crossCells = [];\n\t\tthis._affectColumnsMap.clear();\n\t\tthis._doneRowsMap = {};\n\t}\n\n\tanalysisReady() {\n\t\tconst columns = this._dataGroup.normalizedColumns.slice(0);\n\t\tconst columnIndices = columns.filter(column => column.isRowMerge || column.isColumnMerge).map(column => column.index);\n\n\t\tthis._affectColumnsMap.clear();\n\t\tthis._doneRowsMap = {};\n\t\tthis._collection = this._dataGroup.collection;\n\t\tthis._columns = columns;\n\t\tthis._targetColumnIndices = columnIndices;\n\t\tthis._compareFunction = this._dataGroup.mergeCompare;\n\n\t\tthis._targetColumnIndices.forEach(index => {\n\t\t\tconst column = this._columns[index];\n\t\t\tconst mergeDependColumns = column.mergeDependColumns;\n\t\t\tif (Array.isArray(mergeDependColumns)) {\n\t\t\t\tconst found = columns.filter(column => mergeDependColumns.indexOf(column.dataField) >= 0);\n\t\t\t\tif (found.length > 0) {\n\t\t\t\t\tthis._affectColumnsMap.set(column, found);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tanalysisAll() {\n\t\tlet numItems = this._collection && this._collection.length || 0;\n\t\tfor (let i = 0; i < numItems; i++) {\n\t\t\tthis.analysisRow(i);\n\t\t}\n\t}\n\n\tanalysisRow(rowIndex) {\n\t\tif (!this._doneRowsMap[rowIndex]) {\n\t\t\tthis._doneRowsMap[rowIndex] = true;\n\t\t\tthis._internalAnalysisRow(rowIndex);\n\t\t}\n\t}\n\n\tanalysisRows(from, to) {\n\t\tfor (let i = from; i <= to; i++) {\n\t\t\tthis.analysisRow(i);\n\t\t}\n\t}\n\n\t_internalAnalysisRow(rowIndex) {\n\t\tlet numIndices = this._targetColumnIndices.length,\n\t\t\tcells = [];\n\n\t\tfor (let i = 0; i < numIndices; i++) {\n\t\t\tlet columnIndex = this._targetColumnIndices[i];\n\t\t\tif (!internalFindCell(cells, rowIndex, columnIndex) && !internalFindCell(this._cells, rowIndex, columnIndex)) {\n\t\t\t\tlet cell = this._analysisCell(rowIndex, columnIndex);\n\t\t\t\tif (cell) {\n\t\t\t\t\tcells.push(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.removeCells(cells);\n\n\t\twhile (cells.length > 0) {\n\t\t\tthis._internalAddCell(cells.shift());\n\t\t}\n\t}\n\n\t_analysisCell(rowIndex, columnIndex) {\n\n\t\tlet sourceItem = this._collection.get(rowIndex),\n\t\t\tsourceColumn = this._columns[columnIndex],\n\t\t\tsourceValue = this._dataGroup.itemToLabel(sourceItem, sourceColumn),\n\t\t\tendRowIndex = rowIndex,\n\t\t\tendColumnIndex = columnIndex;\n\n\t\tif (sourceColumn.isRowMerge) {\n\t\t\tendRowIndex = this._compare(rowIndex, sourceColumn, sourceValue, sourceColumn);\n\t\t}\n\n\t\t//세로 비교가 끝나면 가로 비교를 한다.\n\t\tif (sourceColumn.isColumnMerge) {\n\t\t\tlet numIndices = this._targetColumnIndices.length,\n\t\t\t\toffset = this._targetColumnIndices.indexOf(columnIndex),\n\t\t\t\tcurIndex = columnIndex,\n\t\t\t\tnextColumnIndex, nextEndRowIndex;\n\n\t\t\tfor (let i = offset + 1; i < numIndices; i++) {\n\t\t\t\tnextColumnIndex = this._targetColumnIndices[i];\n\t\t\t\tif (curIndex !== nextColumnIndex - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t//마지막행 인덱스가 같아 병합할 영역이다.\n\t\t\t\tnextEndRowIndex = this._compare(rowIndex, this._columns[nextColumnIndex], sourceValue, sourceItem, sourceColumn);\n\n\t\t\t\tif (nextEndRowIndex < endRowIndex) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tendColumnIndex = nextColumnIndex;\n\t\t\t\tcurIndex = nextColumnIndex;\n\t\t\t}\n\t\t}\n\n\t\tif (rowIndex !== endRowIndex || columnIndex !== endColumnIndex) {\n\t\t\treturn new CellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n\t\t}\n\t\treturn null;\n\t}\n\n\t_compare(startRowIndex, column, value, sourceColumn) {\n\n\t\tlet endRowIndex = this._internalCompare(startRowIndex, column, value, sourceColumn);\n\n\t\tif (startRowIndex < endRowIndex) {\n\t\t\t//영향을 주는 컬럼 체크.\n\t\t\tlet columns = this._affectColumnsMap.get(column) || [],\n\t\t\t\tnumColumns = columns.length,\n\t\t\t\titem = this._collection.get(startRowIndex);\n\n\t\t\tfor (let i = 0; i < numColumns; i++) {\n\t\t\t\tlet column = columns[i];\n\t\t\t\tlet index = this._internalCompare(startRowIndex, column, this._dataGroup.itemToLabel(item, column), sourceColumn);\n\t\t\t\tif (index < endRowIndex) {\n\t\t\t\t\tendRowIndex = index;\n\t\t\t\t}\n\n\t\t\t\tif (startRowIndex >= endRowIndex) {\n\t\t\t\t\tendRowIndex = startRowIndex;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn endRowIndex;\n\t}\n\n\t_internalCompare(startRowIndex, column, value, sourceColumn) {\n\t\tlet num = this._collection.length,\n\t\t\tsourceItem = this._collection.get(startRowIndex),\n\t\t\tendRowIndex = -1;\n\n\t\t//비교 데이타.\n\t\tfor (let i = startRowIndex; i < num; i++) {\n\t\t\tlet targetItem = this._collection.get(i);\n\t\t\tlet nextValue = this._dataGroup.itemToLabel(targetItem, column);\n\n\t\t\tif (this._compareFunction != null) {\n\t\t\t\tif (!this._compareFunction(targetItem, column, sourceItem, sourceColumn)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (value !== nextValue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tendRowIndex = i;\n\t\t}\n\t\treturn endRowIndex;\n\t}\n}\n\nconst Mergeable = {\n\n\tget merger() {\n\t\tif (!this._merger) {\n\t\t\tthis._merger = new Merger(this);\n\t\t}\n\t\treturn this._merger;\n\t},\n\n\t/**\n\t * 병합된 셀 목록을 반환합니다.\n\t * @returns {Array<CellPosition>}\n\t */\n\tgetMergeCellPositions() {\n\t\treturn this.merger.getCells();\n\t},\n\n\t/**\n\t * 병합셀을 추가합니다.\n\t * @param cell\n\t * @returns {Boolean}\n\t */\n\taddMergeCellPosition(cell) {\n\t\treturn this.merger.addCell(cell);\n\t},\n\n\t/**\n\t * 지정된 셀영역에 있는 병합셀을 삭제합니다.\n\t * @param cell\n\t * @returns {Array<CellPosition>}\n\t */\n\tremoveMergeCellPosition(cell) {\n\t\treturn this.merger.removeCell(cell);\n\t},\n\n\t/**\n\t * 지정된 셀영역에 있는 병합셀을 삭제합니다.\n\t * @param cells\n\t * @returns {Array<CellPosition>}\n\t */\n\tremoveMergeCellPositions(cells) {\n\t\treturn this.merger.removeCells(cells);\n\t},\n\n\t/**\n\t * 지정된 위치에 병합셀을 반환합니다.\n\t * @param rowIndex 행인덱스\n\t * @param columnIndex 컬럼인덱스\n\t * @returns {CellPosition}\n\t */\n\tfindMergeCellPosition(rowIndex, columnIndex) {\n\t\treturn this.merger.findCell(rowIndex, columnIndex);\n\t},\n\n\tfindMergeCellPositionFromVisibleRect(rowIndex, columnIndex) {\n\t\treturn this.merger.findCellFromVisibleRect(rowIndex, columnIndex);\n\t},\n\n\t/**\n\t *\n\t * @param rowIndex\n\t * @param columnIndex\n\t * @param endRowIndex\n\t * @param endColumnIndex\n\t */\n\tsetMergeVisibleRect(rowIndex, columnIndex, endRowIndex, endColumnIndex) {\n\t\treturn this.merger.setVisibleRect(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n\t},\n\n\tunionCellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex, includeCrossCells = false) {\n\t\treturn this.merger.unionCellPosition(rowIndex, columnIndex, endRowIndex, endColumnIndex, includeCrossCells);\n\t},\n\n\tclearCellMerger() {\n\t\treturn this.merger.clear();\n\t},\n\n\tanalysisReady() {\n\t\tthis.merger.analysisReady();\n\t},\n\n\tanalysisAll() {\n\t\tthis.merger.analysisAll();\n\t},\n\n\tanalysisRow(rowIndex) {\n\t\tthis.merger.analysisRow(rowIndex);\n\t},\n\n\tanalysisRows(from, to) {\n\t\tthis.merger.analysisRows(from, to);\n\t},\n\n\tcollectionChangedForCellMerger(event) {\n\t\tlet detail = event.detail,\n\t\t\tindex = detail.index,\n\t\t\titems = detail.items || [];\n\n\t\tswitch (detail.kind) {\n\t\t\tcase 'add':\n\t\t\t\tthis.merger.insertRows(index, items.length);\n\t\t\t\tbreak;\n\t\t\tcase 'remove':\n\t\t\t\tthis.merger.deleteRows(index, items.length);\n\t\t\t\tbreak;\n\t\t}\n\t},\n};\n\nfunction is(a, b) {\r\n    return a === b || (a == null && b == null) || (a instanceof Date && b instanceof Date && a.getTime() === b.getTime());\r\n}\r\n\r\n\r\nfunction equals(a, b, isDeep = false, compare = is) {\r\n    let isFirst = true;\r\n    const internalEqual = (a, b, isDeep, compare) => {\r\n        if (!isFirst && compare(a, b)) {\r\n            return true;\r\n        }\r\n        isFirst = false;\r\n        if (typeof a !== 'object' || a == null || typeof b !== 'object' || b == null) {\r\n            return false;\r\n        }\r\n        //array, object\r\n        const keysA = Object.keys(a);\r\n        const keysB = Object.keys(b);\r\n        if (keysA.length !== keysB.length) {\r\n            return false;\r\n        }\r\n        return keysA.every(key => (key in b && isDeep ? internalEqual(a[key], b[key], isDeep, compare) : compare(a[key], b[key])));\r\n    };\r\n    return internalEqual(a, b, isDeep, compare);\r\n}\r\n\r\n\r\n/**\r\n * a와 b의 얕은 비교를 수행하는 함수입니다.\r\n * 즉, 두 값이 첫 번째 레벨에서만 동일한지 확인합니다.\r\n * compare 이용해 사용자 정의 비교 로직을 적용할 수 있습니다.\r\n * @param a\r\n * @param b\r\n * @param compare 사용자 정의 비교 함수\r\n */\r\nfunction shallowEquals(a, b, compare = is) {\r\n    return equals(a, b, false, compare);\r\n}\n\nclass SelectionCellPosition extends CellPosition {\n    constructor(rowIndex, columnIndex, endRowIndex, endColumnIndex, isAdded) {\n        super(rowIndex, columnIndex, endRowIndex, endColumnIndex);\n        this.isAdded = isAdded;\n    }\n}\n\n\nconst SINGLE_ROW = 'singleRow';\nconst MULTIPLE_ROWS = 'multipleRows';\nconst SINGLE_CELL = 'singleCell';\nconst MULTIPLE_CELLS = 'multipleCells';\n\nclass Selector {\n    constructor(dataGroup) {\n        this._dataGroup = dataGroup;\n        this._selectionCells = [];\n        this._maxBounds = null;\n        this._cells = [];\n        this._rows = [];\n        this._needUpdateMaxBounds = true;\n        this._needUpdateCells = true;\n\n        this.mode = SINGLE_ROW;\n    }\n\n    get isRowMode() {\n        return this.mode === SINGLE_ROW || this.mode === MULTIPLE_ROWS;\n    }\n\n    get isCellMode() {\n        return this.mode === SINGLE_CELL || this.mode === MULTIPLE_CELLS;\n    }\n\n    get isMultipleMode() {\n        return this.mode === MULTIPLE_ROWS || this.mode === MULTIPLE_CELLS;\n    }\n\n    get isSingleSelection() {\n        return this._selectionCells.length === 1 && this._selectionCells[0].isAdded;\n    }\n\n    get selectedCells() {\n        return this._selectionCells;\n    }\n\n    getSingleCell() {\n        if (this.isSingleSelection) {\n            return this._selectionCells[0].clone();\n        }\n        return null;\n    }\n\n    getRows() {\n        const rows = [];\n        const maxBounds = this._getMaxBounds();\n        const top = maxBounds.top;\n        const bottom = maxBounds.bottom;\n        const tempCell = new CellPosition(0, 0);\n        for (let index = top; index <= bottom; index++) {\n            tempCell.y = index;\n            if (this.containsCell(tempCell)) {\n                rows.push(index);\n            }\n        }\n        return rows;\n    }\n\n    getCells() {\n        if (this._needUpdateCells) {\n            const bounds = this._getMaxBounds();\n            const rowIndex = bounds.rowIndex;\n            const endRowIndex = bounds.endRowIndex;\n            const columnIndex = bounds.columnIndex;\n            const endColumnIndex = bounds.endColumnIndex;\n            const cells = [];\n            const mergedCells = [];\n            const hasMergedCell = (rowIndex, columnIndex) => {\n                for (let i = 0; i < mergedCells.length; i++) {\n                    if (mergedCells[i].contains(columnIndex, rowIndex)) {\n                        return true;\n                    }\n                }\n                return false;\n            };\n            for (let r = rowIndex; r <= endRowIndex; r++) {\n                for (let c = columnIndex; c <= endColumnIndex; c++) {\n                    if (!hasMergedCell(r, c)) {\n                        let cell = this._dataGroup.findMergeCellPosition(r, c);\n                        const x = cell && cell.x || c;\n                        const y = cell && cell.y || r;\n                        const w = cell && cell.width || 0;\n                        const h = cell && cell.height || 0;\n                        if (this.containsBounds(x, y, w, h)) {\n                            if (!cell) {\n                                cell = new CellPosition(r, c);\n                            }\n                            cells.push(cell);\n                            if (cell.isMerged) {\n                                mergedCells.push(cell);\n                            }\n                        }\n                    }\n                }\n            }\n            this._cells = cells;\n            this._needUpdateCells = false;\n        }\n\n        return this._cells;\n    }\n\n    setCell(cell) {\n        return this.setCells(cell ? [cell] : []);\n    }\n\n    setCells(cells) {\n        this.removeAll();\n        this.addCells(cells);\n        return true;\n    }\n\n    addCells(cells) {\n        return this.addCellsAt(cells, this._selectionCells.length);\n    }\n\n    addCellsAt(cells, index) {\n        let numCells = cells && cells.length || 0,\n            i, flag = false;\n        for (i = 0; i < numCells; i++) {\n            if (this.addCellAt(cells[i], index + i)) {\n                flag = true;\n            }\n        }\n        return flag;\n    }\n\n    addCell(cell) {\n        return this.addCellAt(cell, this._selectionCells.length);\n    }\n\n    addCellAt(cell, index) {\n        if (cell && !this.containsCell(cell)) {\n            let selectionCell = this._cellToSelectionCell(cell, true);\n            this._selectionCells.splice(index, 0, selectionCell);\n            this._needUpdateMaxBounds = true;\n            this._needUpdateCells = true;\n            return true;\n        }\n        return false;\n    }\n\n    removeCell(cell) {\n        if (cell && this.containsCell(cell)) {\n            const selectionCell = this._cellToSelectionCell(cell, false);\n            this._selectionCells.push(selectionCell);\n            this._needUpdateMaxBounds = true;\n            this._needUpdateCells = true;\n            return true;\n        }\n        return false;\n    }\n\n    removeAll() {\n        if (this._selectionCells.length <= 0) {\n            return false;\n        }\n        this._selectionCells = [];\n        this._needUpdateMaxBounds = true;\n        this._needUpdateCells = true;\n        return true;\n    }\n\n    itemsAdded(index, items) {\n        if (!items) {\n            return;\n        }\n        const numCells = this._selectionCells.length;\n        const numItems = items.length;\n        for (let i = 0; i < numCells; i++) {\n            const cell = this._selectionCells[i];\n            if (index <= cell.y) {\n                cell.y += numItems;\n            }\n        }\n        this._needUpdateMaxBounds = true;\n        this._needUpdateCells = true;\n    }\n\n    itemsRemoved(index, items) {\n        const numCells = this._selectionCells.length;\n        const numItems = items.length;\n        for (let i = numCells - 1; i >= 0; i--) {\n            const cell = this._selectionCells[i];\n            if (index < cell.y) {\n                cell.y -= numItems;\n            } else if (index <= cell.y && cell.height <= numItems) {\n                this._selectionCells.splice(i, 1);\n            } else if (index <= cell.y + cell.height && cell.y <= index + numItems) ;\n        }\n        this._needUpdateMaxBounds = true;\n        this._needUpdateCells = true;\n    }\n\n    containsCell(cell) {\n        return cell && this.containsBounds(cell.x, cell.y, cell.width, cell.height);\n    }\n\n    containsBounds(x, y, width, height) {\n        const cells = this._selectionCells;\n        const numCells = cells.length;\n        let index = -1;\n        for (let i = numCells - 1; i >= 0; i--) {\n            let cell = cells[i];\n            if (cell.isAdded && cell.contains(x, y, width, height)) {\n                index = i;\n                break;\n            }\n        }\n\n        if (index === -1) {\n            return false;\n        }\n\n        for (let i = index + 1; i < numCells; i++) {\n            let cell = cells[i];\n            if (!cell.isAdded && cell.contains(x, y, width, height)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    clear() {\n        this._selectionCells = [];\n        this._cells = [];\n        this._maxBounds = null;\n        this._needUpdateMaxBounds = true;\n        this._needUpdateCells = true;\n    }\n\n    _cellToSelectionCell(cell, isAdded) {\n        if (cell instanceof SelectionCellPosition) {\n            cell.isAdded = isAdded;\n            return cell;\n        }\n        return new SelectionCellPosition(cell.rowIndex, cell.columnIndex, cell.endRowIndex, cell.endColumnIndex, isAdded);\n    }\n\n    _getMaxBounds() {\n        if (this._needUpdateMaxBounds) {\n            const numCells = this._selectionCells.length;\n            let maxBounds;\n            if (numCells > 0) {\n                maxBounds = this._selectionCells[0].clone();\n                for (let i = 1, bounds; i < numCells; i++) {\n                    bounds = this._selectionCells[i];\n                    if (bounds.isAdded) {\n                        maxBounds.left = Math.min(maxBounds.left, bounds.left);\n                        maxBounds.right = Math.max(maxBounds.right, bounds.right);\n                        maxBounds.top = Math.min(maxBounds.top, bounds.top);\n                        maxBounds.bottom = Math.max(maxBounds.bottom, bounds.bottom);\n                    }\n                }\n            } else {\n                maxBounds = new CellPosition(0, 0, 0, 0);\n            }\n            this._maxBounds = maxBounds;\n            this._needUpdateMaxBounds = false;\n        }\n        return this._maxBounds;\n    }\n}\n\nconst Selectable = {\n    get selector() {\n        if (!this._selector) {\n            this._selector = new Selector(this);\n            this._counter = new EventCounter((kind, cell) => {\n                return this._dispatchSelectionEvent('selection-changing', kind, cell, true);\n            }, (kind, cell) => {\n                return this._dispatchSelectionEvent('selection-change', kind, cell, false);\n            });\n        }\n        return this._selector;\n    },\n    get hasSelectionMode() {\n        return this.isRowSelectionMode || this.isCellSelectionMode;\n    },\n    get isRowSelectionMode() {\n        return this.selector.isRowMode;\n    },\n    get isCellSelectionMode() {\n        return this.selector.isCellMode;\n    },\n    get isMultipleSelectionMode() {\n        return this.selector.isMultipleMode;\n    },\n    get isSingleSelection() {\n        return this.selector.isSingleSelection;\n    },\n    get selectionMode() {\n        return this.selector.mode;\n    },\n    set selectionMode(value) {\n        this.selector.mode = value;\n    },\n\n    get selectedIndices() {\n        let indices;\n        if (this.isRowSelectionMode) {\n            indices = this.selector.getRows();\n        } else {\n            indices = [];\n        }\n        return indices;\n    },\n    set selectedIndices(indices) {\n        this.setSelectedIndices(indices);\n    },\n    get selectedIndex() {\n        let indices = this.selectedIndices;\n        if (indices && indices.length > 0) {\n            return indices[0];\n        }\n        return -1;\n    },\n    set selectedIndex(value) {\n        if (this.selectedIndex !== value) {\n            this.setSelectedIndices([value]);\n        }\n    },\n    get selectedItems() {\n        return this.indicesToItems(this.selectedIndices);\n    },\n    set selectedItems(items) {\n        if (this.collection) {\n            this.selectedIndices = items.reduce((indices, item) => {\n                const index = this.collection.indexOf(item);\n                if (index >= 0) {\n                    indices.push(index);\n                }\n                return indices;\n            }, []);\n        }\n    },\n    get selectedItem() {\n        const items = this.selectedItems;\n        return items && items.length > 0 && items[0] || null;\n    },\n    set selectedItem(value) {\n        if (value !== this.selectedItem) {\n            this.selectedItems = value && [value] || [];\n        }\n    },\n    get selectedCells() {\n        return this.selector.getCells();\n    },\n    set selectedCells(cells) {\n        this.setSelectedCells(cells);\n    },\n    get selectedCell() {\n        const cells = this.selectedCells;\n        return cells && cells.length > 0 && cells[0] || null;\n    },\n    set selectedCell(cell) {\n        if (!(this.selectedCell && this.selectedCell.equals(cell))) {\n            if (cell) {\n                this.setSelectedCells([cell]);\n            } else {\n                this.removeSelectedAll();\n            }\n        }\n    },\n    getSingleCell() {\n        return this.selector.getSingleCell();\n    },\n    containsSelectedCell(cell) {\n        return this.selector.containsCell(cell);\n    },\n    containsSelectedPosition(rowIndex, columnIndex) {\n        return this.selector.containsBounds(columnIndex, rowIndex);\n    },\n    setSelectedIndices(indices) {\n        let cells = [];\n        indices.forEach(index => {\n            cells.push(new CellPosition(index, 0));\n        });\n        return this.setSelectedCells(cells);\n    },\n    addSelectedRow(index) {\n        return this.addSelectedCell(new CellPosition(index, 0));\n    },\n    removeSelectedRow(index) {\n        return this.removeSelectedCell(new CellPosition(index, 0));\n    },\n    setSelectedCell(cell) {\n        return this.setSelectedCells(cell ? [cell] : []);\n    },\n    setSelectedCells(cells) {\n        if (!this.isMultipleSelectionMode && cells && cells.length > 0) {\n            cells = cells.slice(0, 1);\n        }\n        if (shallowEquals(this.selector.selectedCells, cells, (a, b) => a && b && a.equals(b))) {\n            return false;\n        }\n        return this._executeSelectionFunction('setCells', 'set', cells);\n    },\n    addSelectedCell(cell) {\n        if (!this.isMultipleSelectionMode) {\n            return this.setSelectedCell(cell);\n        }\n        return this._executeSelectionFunction('addCell', 'add', cell);\n    },\n    removeSelectedCell(cell) {\n        return this._executeSelectionFunction('removeCell', 'remove', cell);\n    },\n    removeSelectedAll() {\n        return this._executeSelectionFunction('removeAll', 'remove');\n    },\n    indicesToItems(indices) {\n        if (this.collection) {\n            const numIndices = indices && indices.length || 0;\n            const items = [];\n            for (let i = 0; i < numIndices; i++) {\n                const index = indices[i];\n                const item = this.collection.get(index);\n                if (item) {\n                    items.push(item);\n                }\n            }\n            return items;\n        }\n        return null;\n    },\n    clearSelection() {\n        this.selector.clear();\n    },\n    collectionChangedForSelection(e) {\n        let detail = e.detail;\n        switch (detail.kind) {\n            case 'add':\n                this._itemsAddedForSelection(detail.index, detail.items);\n                break;\n            case 'remove':\n                this._itemsRemovedForSelection(detail.index, detail.items);\n                break;\n        }\n    },\n    _executeSelectionFunction(funcName, kind, value) {\n        const helper = this.selector;\n        const eventCounter = this._counter;\n        const prevented = eventCounter.start(kind, value);\n        if (prevented) {\n            const result = helper[funcName].call(helper, value);\n            eventCounter.end(kind, value);\n            this.invalidateFor(Reason.SELECTION_CHANGE);\n            return result;\n        }\n        eventCounter.cancel();\n        return false;\n    },\n    _itemsAddedForSelection(index, items) {\n        this.selector.itemsAdded(index, items);\n    },\n    _itemsRemovedForSelection(index, items) {\n        this.selector.itemsRemoved(index, items);\n    },\n    _dispatchSelectionEvent(type, kind, cell, cancelable) {\n        const cells = Array.isArray(cell) ? cell : (cell ? [cell] : []);\n        return this.dispatchEvent(new CustomEvent(type, {\n            bubbles: false,\n            cancelable: cancelable,\n            detail: {\n                kind: kind,\n                cell: cells[0] || null,\n                cells: cells\n            }\n        }));\n    }\n};\n\nfunction createRootNode(source, childField) {\r\n    let node = Object.create({__ROOT_NODE__: true});\r\n    node[childField] = source;\r\n    return node;\r\n}\r\n\r\nfunction createChildrenField(node, childrenField) {\r\n    if (node && !(childrenField in node)) {\r\n        node[childrenField] = [];\r\n    }\r\n}\r\n\r\nfunction arrayInsert(array, index, items) {\r\n    Array.prototype.splice.apply(array, [index, 0].concat(items));\r\n}\r\n\r\nfunction arrayRemove(array, index, items) {\r\n    array.splice(index, items.length);\r\n}\r\n\r\nfunction find(parent, children, callback, isPostOrder, onlyOne) {\r\n    let numChildren = children && children.length || 0,\r\n        result = [];\r\n\r\n    for (let i = 0; i < numChildren; ++i) {\r\n        let child = children[i];\r\n        if (!isPostOrder) {\r\n            if (callback(child, parent, children)) {\r\n                result.push(child);\r\n                if (onlyOne) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n\r\n        let childChildren = this.getChildren(child);\r\n        if (childChildren && childChildren.length > 0) {\r\n            result = result.concat(find.call(this, child, childChildren, callback, isPostOrder, onlyOne));\r\n            if (result.length > 0 && onlyOne) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        if (isPostOrder) {\r\n            if (callback(child, parent, children)) {\r\n                result.push(child);\r\n                if (onlyOne) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\nfunction getDepth(node) {\r\n    let depth = 1;\r\n    node && node.children && node.children.forEach(child => {\r\n        depth = Math.max(depth, getDepth(child) + 1);\r\n    });\r\n    return depth;\r\n}\r\n\r\nconst NO_PARENT = 'noParent';\r\nconst PARENT_TO_ABOVE = 'parentToAbove';\r\n\r\nclass HierarchyList extends IList {\r\n    constructor(source) {\r\n        super();\r\n        this.nodeEventCounter = new EventCounter(this.dispatchNodeEvent.bind(this));\r\n\r\n        this._rootNode = null;\r\n        this._displayableNodes = [];\r\n        this._openNodesMap = new Map();\r\n        this._parentMap = new Map();\r\n        this._childrenMap = new Map();\r\n        this._childrenField = 'children';\r\n        this._displayPolicy = PARENT_TO_ABOVE;\r\n        this.source = source || [];\r\n    }\r\n\r\n    get displayableNodes() {\r\n        return this._displayableNodes;\r\n    }\r\n\r\n    get childrenField() {\r\n        return this._childrenField;\r\n    }\r\n\r\n    set childrenField(v) {\r\n        if (this._childrenField !== v) {\r\n            this._childrenField = v;\r\n            this._reset();\r\n        }\r\n    }\r\n\r\n    get displayPolicy() {\r\n        return this._displayPolicy;\r\n    }\r\n\r\n    set displayPolicy(v) {\r\n        if (this._displayPolicy !== v) {\r\n            this._displayPolicy = v;\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 부모 노드를 반환합니다.\r\n     * @param node 자식 노드입니다.\r\n     * @returns {*}\r\n     */\r\n    getParentNode(node) {\r\n        let parent = this._internalGetParentNode(node);\r\n        if (parent === this._rootNode) {\r\n            parent = null;\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 조상 노드 목록을 반환합니다.\r\n     * @param node\r\n     * @returns {Array}\r\n     */\r\n    getAncestorNodes(node) {\r\n        const pNodes = [];\r\n        let active = this.getParentNode(node);\r\n        while (active) {\r\n            pNodes.unshift(active);\r\n            active = this.getParentNode(active);\r\n        }\r\n        return pNodes;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 후손 노드 목록을 반환합니다.\r\n     * @param node\r\n     * @returns {Array}\r\n     */\r\n    getDescendantNodes(node) {\r\n        return this.find(o => node !== o, node);\r\n    }\r\n\r\n    /**\r\n     * @param node\r\n     * @return {null|unknown}\r\n     * @private\r\n     */\r\n    _internalGetParentNode(node) {\r\n        let parent = this._parentMap.get(node);\r\n        if (!parent && this._rootNode) {\r\n            let children = this.getNativeChildren(this._rootNode);\r\n            if (children && children.indexOf(node) >= 0) {\r\n                return null;\r\n            }\r\n            this._addAllParentMapping();\r\n            parent = this._parentMap.get(node);\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 자식노드들을 반환합니다.\r\n     * @param node 부모 노드입니다.\r\n     * @returns {Array} 자식노드 배열입니다.\r\n     */\r\n    getChildren(node) {\r\n        if (node == null) {\r\n            node = this._rootNode;\r\n        }\r\n\r\n        let children = [];\r\n        if (!this._childrenMap.has(node)) {\r\n            if (node === this._rootNode || (this.childrenField in node)) {\r\n                children = this.getNativeChildren(node);\r\n                this._addChildrenMapping(node, children);\r\n            }\r\n        }\r\n\r\n        children = this._childrenMap.get(node);\r\n        return children || [];\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 가공되지 않은 원본 자식노드들을 반환합니다.\r\n     * @param node 부모 노드입니다.\r\n     * @returns {Array} 자식노드 배열입니다.\r\n     */\r\n    getNativeChildren(node) {\r\n        if (!node) {\r\n            node = this._rootNode;\r\n        }\r\n\r\n        if (node && this.childrenField in node) {\r\n            return node[this.childrenField] || [];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * 해당노드 하위의 열린 노드들을 배열형태로 반환합니다.\r\n     * @param node 부모 노드입니다.\r\n     * @returns {Array} 자식노드 배열입니다.\r\n     */\r\n    getDisplayableChildren(node) {\r\n        return this._internalGetDisplayableChildren(node, false);\r\n    }\r\n\r\n    /**\r\n     * 해당노드의 형제노드들을 반환합니다.\r\n     * @returns {Array} 형제노드 배열입니다.\r\n     */\r\n    getSiblingNodes(node) {\r\n        const parentNode = this.getParentNode(node);\r\n        return this.getChildren(parentNode);\r\n    }\r\n\r\n    /**\r\n     * 해당 노드 부모의 기준으로 인덱스를 반환합니다.\r\n     * @param node\r\n     * @returns {Number} 형제 노드목록에서의 인덱스.\r\n     */\r\n    getNodeIndex(node) {\r\n        const nodes = this.getSiblingNodes(node) || [];\r\n        return nodes.indexOf(node);\r\n    }\r\n\r\n    _internalGetDisplayableChildren(node, doParentMapping) {\r\n        let result = [];\r\n        if (this.isOpenNode(node)) {\r\n            let children = this.getChildren(node);\r\n            children.forEach(child => {\r\n                if (doParentMapping) {\r\n                    this._addParentMapping(node, child);\r\n                }\r\n\r\n                if (this._displayPolicy === NO_PARENT) {\r\n                    if (!this.isOpenNode(child) || !this.hasChildren(child)) {\r\n                        result.push(child);\r\n                    }\r\n                } else if (this._displayPolicy === PARENT_TO_ABOVE) {\r\n                    result.push(child);\r\n                }\r\n\r\n                result = result.concat(this._internalGetDisplayableChildren(child, doParentMapping));\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드에 자식이 있는지 확인합니다.\r\n     * @param node\r\n     * @returns {boolean}\r\n     */\r\n    hasChildren(node) {\r\n        let children = this.getChildren(node);\r\n        return children && children.length > 0 || false;\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param node 추가할 자식 노드\r\n     * @returns {boolean}\r\n     */\r\n    addNode(parent, node) {\r\n        let children = this.getNativeChildren(parent),\r\n            numChildren = children && children.length || 0;\r\n        return this.addNodeAt(parent, node, numChildren);\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param node 추가할 자식 노드.\r\n     * @param index 자식 노드 삽입 위치의 인덱스.\r\n     * @returns {boolean}\r\n     */\r\n    addNodeAt(parent, node, index) {\r\n        return this.addNodesAt(parent, [node], index);\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param nodes 추가할 자식 노드 목록\r\n     * @returns {boolean}\r\n     */\r\n    addNodes(parent, nodes) {\r\n        const children = this.getNativeChildren(parent);\r\n        return this.addNodesAt(parent, nodes, children.length);\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 노드목록을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param nodes 추가할 자식 노드 목록\r\n     * @param index 자식 노드 삽입 위치의 인덱스.\r\n     * @returns {boolean}\r\n     */\r\n    addNodesAt(parent, nodes, index) {\r\n        if (!nodes || nodes.length <= 0) {\r\n            return false;\r\n        }\r\n\r\n        this.nodeEventCounter.start();\r\n\r\n        if (!parent) {\r\n            parent = this._rootNode;\r\n        }\r\n\r\n        index = Math.max(index, 0);\r\n\r\n        createChildrenField(parent, this.childrenField);\r\n\r\n        let displayableChildren = this.getChildren(parent),\r\n            children = this.getNativeChildren(parent),\r\n            numChildren = children && children.length || 0,\r\n            numNodes = nodes.length;\r\n\r\n        if (displayableChildren !== children) {\r\n            let node = displayableChildren[index];\r\n            index = children.indexOf(node);\r\n            if (index < 0) {\r\n                index = numChildren;\r\n            }\r\n        }\r\n\r\n        index = Math.min(index, numChildren);\r\n\r\n        //1. 부모 노드 닫기.\r\n        this._internalCloseNode(parent);\r\n\r\n        //2. 노드 추가\r\n        for (let i = 0; i < numNodes; i++) {\r\n            let node = nodes[i];\r\n            this._removeParentMapping(node);\r\n            children.splice(index + i, 0, node);\r\n            this._addParentMapping(parent, node);\r\n        }\r\n        //3. 차일드 목록 삭제.\r\n        this._removeChildrenMapping(parent);\r\n\r\n        //4. 부모 노드 다시 열기.\r\n        this._internalOpenNode(parent, true);\r\n        this.nodeEventCounter.end('add', false, false, nodes, parent);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param node\r\n     * @param toParent\r\n     * @param toIndex\r\n     * @returns {boolean}\r\n     */\r\n    moveNode(node, toParent, toIndex) {\r\n        //대상 위치가 자신 하위 레벨일때.\r\n        if (this.getAncestorNodes(toParent).find(o => o === node)) {\r\n            return false;\r\n        }\r\n\r\n        const parent = this.getParentNode(node);\r\n        if (this.dispatchNodeEvent('moving', false, true, [node], parent, {toParent: toParent, toIndex: toIndex})) {\r\n\r\n            this.nodeEventCounter.start();\r\n            this.removeNode(parent, node);\r\n            this.addNodeAt(toParent, node, toIndex);\r\n            this.nodeEventCounter.end('move', false, false, [node], parent, {\r\n                toParent: toParent,\r\n                toIndex: toIndex\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * 부모 노드에서 자식 노드를 삭제합니다.\r\n     * @param parent 부모 노드입니다.\r\n     * @param node 삭제할 자식 노드 입니다.\r\n     * @returns {boolean}\r\n     */\r\n    removeNode(parent, node) {\r\n        if (!parent) {\r\n            parent = this._rootNode;\r\n        }\r\n\r\n        let children = this.getNativeChildren(parent),\r\n            removeIndex = children ? children.indexOf(node) : -1;\r\n        if (removeIndex < 0) {\r\n            return false;\r\n        }\r\n\r\n        this.nodeEventCounter.start();\r\n\r\n        //부모노드 맵 삭제.\r\n        let removedNodes = this.find((o) => {\r\n            return true;\r\n        }, node);\r\n\r\n        // 부모 노드 닫기.\r\n        this._internalCloseNode(parent);\r\n\r\n        //차일드 목록 삭제.\r\n        this._removeChildrenMapping(parent);\r\n\r\n        removedNodes && removedNodes.forEach((o) => {\r\n            this._removeOpenNodeMapping(o);\r\n            this._removeChildrenMapping(o);\r\n            this._removeParentMapping(o);\r\n        });\r\n\r\n        children.splice(removeIndex, 1);\r\n\r\n        // 부모 노드 다시 열기.\r\n        this._internalOpenNode(parent, true);\r\n\r\n        this.nodeEventCounter.end('remove', false, false, [node], parent);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에서 자식 노드를 삭제합니다.\r\n     * @param parent 부모 노드입니다.\r\n     * @param nodes 자식 노드 목록입니다.\r\n     * @returns {boolean}\r\n     */\r\n    removeNodes(parent, nodes) {\r\n        if (nodes) {\r\n            this.nodeEventCounter.start();\r\n            const removedItems = [];\r\n            nodes.forEach(node => {\r\n                if (this.removeNode(parent, node)) {\r\n                    removedItems.push(node);\r\n                }\r\n            });\r\n            if (removedItems.length > 0) {\r\n                this.nodeEventCounter.end('remove', false, false, removedItems, parent);\r\n                return true;\r\n            } else {\r\n                this.nodeEventCounter.cancel();\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * 해당 node가 있는지 확인합니다.\r\n     * @param node\r\n     * @return {boolean} 노드가 포함되어 있으면 true.\r\n     */\r\n    contains(node) {\r\n        const found = this.findOne((o) => {\r\n            return node === o;\r\n        });\r\n\r\n        return !!found;\r\n    }\r\n\r\n    /**\r\n     * 해당 node 목록 있는지 확인합니다.\r\n     * @param nodes {Array}\r\n     * @return {boolean} 노드가 포함되어 있으면 true.\r\n     */\r\n    containsAll(nodes) {\r\n        const num = nodes && nodes.length || 0;\r\n        if (num <= 0) {\r\n            return false;\r\n        }\r\n        nodes = nodes.slice(0);\r\n        this.find((node, parent) => {\r\n            const index = nodes.indexOf(node);\r\n            if (index >= 0) {\r\n                nodes.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        return nodes.length === 0;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드가 확장되어 있는지 확인합니다.\r\n     * @param node\r\n     * @return {boolean} 노드가 확장되어 있으면 true.\r\n     */\r\n    isOpenNode(node) {\r\n        if (node === this._rootNode) {\r\n            return true;\r\n        }\r\n        return this._openNodesMap.has(node);\r\n    }\r\n\r\n    /**\r\n     * 해당 노느가 출력된 노드인지 확인합니다.\r\n     * @param node\r\n     * @return {boolean} 출련된 노드면 true.\r\n     */\r\n    isDisplayableNode(node) {\r\n\r\n        let p = node;\r\n        while (p) {\r\n            if (!this.isOpenNode(p)) {\r\n                return false;\r\n            }\r\n            p = this.getParentNode(p);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드를 확장합니다.\r\n     * @param node\r\n     * @return {boolean} 해당 노드가 확장되면 true.\r\n     */\r\n    openNode(node) {\r\n        if (node !== null && !this.isOpenNode(node)) {\r\n            const parent = this.getParentNode(node);\r\n            if (this.dispatchNodeEvent('expanding', false, true, [node], parent)) {\r\n                this._addOpenNodeMapping(node);\r\n                this._internalOpenNode(node, true);\r\n                this.dispatchNodeEvent('expand', false, false, [node], parent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _internalOpenNode(node, dispatch) {\r\n        if (this.isDisplayableNode(node)) {\r\n            let children = this._internalGetDisplayableChildren(node, true);\r\n            if (children && children.length > 0) {\r\n                let nodes = this._displayableNodes,\r\n                    index = (node === this._rootNode ? nodes.length : nodes.indexOf(node));\r\n\r\n                if (index >= 0) {\r\n                    index += 1;\r\n                    arrayInsert(nodes, index, children);\r\n                    if (dispatch) {\r\n                        this.dispatchCollectionEvent('add', children, index);\r\n                    }\r\n\r\n                    if (this._displayPolicy === NO_PARENT && node && node !== this._rootNode) {\r\n                        arrayRemove(nodes, index - 1, [node]);\r\n                        this.dispatchCollectionEvent('remove', [node], index - 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 해당 노드를 축소합니다.\r\n     * @param node\r\n     * @return {boolean} 해당 노드가 축소되면 true.\r\n     */\r\n    closeNode(node) {\r\n        if (node !== null && this.isOpenNode(node)) {\r\n            const parent = this.getParentNode(node);\r\n            if (this.dispatchNodeEvent('collapsing', false, true, [node], parent)) {\r\n                this._internalCloseNode(node);\r\n                this._removeOpenNodeMapping(node);\r\n                this.dispatchNodeEvent('collapse', false, false, [node], parent);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _internalCloseNode(node) {\r\n        if (this.isDisplayableNode(node)) {\r\n            let children = this._internalGetDisplayableChildren(node, false);\r\n            if (children && children.length > 0) {\r\n                let index = this._displayableNodes.indexOf(children[0]);\r\n                if (index >= 0) {\r\n                    arrayRemove(this._displayableNodes, index, children);\r\n                    this.dispatchCollectionEvent('remove', children, index);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 해당 노드 배열을 확장합니다.\r\n     * @param nodes\r\n     */\r\n    openNodes(nodes) {\r\n        let numNodes = nodes && nodes.length,\r\n            node, i;\r\n        this._openNodesMap.clear();\r\n        for (i = 0; i < numNodes; i++) {\r\n            node = nodes[i];\r\n            this._addOpenNodeMapping(node);\r\n        }\r\n        this._resetDisplayableNodes();\r\n        this._active = this._displayableNodes;\r\n        this.dispatchCollectionEvent('refresh');\r\n    }\r\n\r\n    /**\r\n     * 확장되어있는 노드목록을 반환합니다.\r\n     * @returns {Array} 확장된 노드 목록\r\n     */\r\n    getOpenedNodes() {\r\n        let nodes = [];\r\n        this._openNodesMap.forEach((value, key) => {\r\n            nodes.push(key);\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 레벨을 반환합니다.\r\n     * @returns {Number} 노드 레벨\r\n     */\r\n    getNodeLevel(node) {\r\n        if (node == null) {\r\n            return -1;\r\n        }\r\n        let level = -1,\r\n            active = this._internalGetParentNode(node);\r\n        while (active) {\r\n            active = this._internalGetParentNode(active);\r\n            level++;\r\n        }\r\n        return level;\r\n    }\r\n\r\n    /**\r\n     * 해당 노드의 깊이를 반환합니다.\r\n     * @param node\r\n     */\r\n    getNodeDepth(node) {\r\n        let nodes = !node ? this.toArray() : [node];\r\n        return nodes.reduce((max, item) => {\r\n            return Math.max(max, getDepth(item));\r\n        }, 1);\r\n    }\r\n\r\n    forEach(callback) {\r\n        this.find((node, parent, children) => {\r\n            callback.call(this, node, parent, children);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 탐색합니다.\r\n     * 지정된 함수(callBack)에 대해 true를 반환하는 모든 항목이 포함된 새 배열을 만듭니다\r\n     * @param callback  function callback(node, parent, children)\r\n     * @param prefetchNode 시작 기준 노드입니다. 지정되지 않으면 루트노드를 기준으로 합니다.\r\n     * @param postOrder true 이면 후위탐색, false 이면 전위탐색\r\n     * @return {Array} callback true 반환하는 항목의 배열입니다.\r\n     */\r\n    find(callback, prefetchNode, postOrder) {\r\n        if (this.source && callback) {\r\n            let parent = prefetchNode && this.getParentNode(prefetchNode) || null;\r\n            let children = (prefetchNode && [prefetchNode]) || this.getNativeChildren(parent);\r\n            return find.call(this, parent, children, callback, postOrder, false);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 탐색합니다.\r\n     * 지정된 함수(callBack)에 대해 처음으로 true를 반환하는 항목을 반환하고 탐색을 중지합니다.\r\n     * @param callback  function callback(node, parent, children)\r\n     * @param prefetchNode 시작 기준 노드입니다. 지정되지 않으면 루트노드를 기준으로 합니다.\r\n     * @param postOrder true 이면 후위탐색, false 이면 전위탐색\r\n     * @return {*} 처음으로 true 반환하는 항목입니다.\r\n     */\r\n    findOne(callback, prefetchNode, postOrder) {\r\n        if (this.source && callback) {\r\n            let parent = prefetchNode && this.getParentNode(prefetchNode) || null,\r\n                children = (prefetchNode && [prefetchNode]) || this.getNativeChildren(parent),\r\n                result = find.call(this, parent, children, callback, postOrder, true);\r\n\r\n            if (result && result.length > 0) {\r\n                return result[0];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 확장합니다.\r\n     */\r\n    expandAll() {\r\n        this.openNodes(this._getParentsInNodes(this.getNativeChildren(null)));\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 축소합니다.\r\n     */\r\n    collapseAll() {\r\n        this.openNodes([]);\r\n    }\r\n\r\n    _resetDisplayableNodes() {\r\n        this._displayableNodes = [];\r\n        this._internalOpenNode(this._rootNode, false);\r\n    }\r\n\r\n    _internalRefresh() {\r\n        this._openNodesMap.clear();\r\n        this._parentMap.clear();\r\n        this._childrenMap.clear();\r\n\r\n        //루트 노드 생성.\r\n        //외부에서는 사용되지 않음.\r\n        this._rootNode = createRootNode(this.source, this.childrenField);\r\n        this._resetDisplayableNodes();\r\n        this._active = this._displayableNodes;\r\n    }\r\n\r\n    _getParentsInNodes(nodes) {\r\n        let numNodes = nodes && nodes.length || 0,\r\n            parents = [],\r\n            node, children, i;\r\n        for (i = 0; i < numNodes; i++) {\r\n            node = nodes[i];\r\n            children = this.getChildren(node);\r\n            if (children && children.length > 0) {\r\n                parents.push(node);\r\n                parents = parents.concat(this._getParentsInNodes(children));\r\n            }\r\n        }\r\n        return parents;\r\n    }\r\n\r\n    _addOpenNodeMapping(node) {\r\n        this._openNodesMap.set(node, true);\r\n    }\r\n\r\n    _removeOpenNodeMapping(node) {\r\n        this._openNodesMap.delete(node);\r\n    }\r\n\r\n    _addAllParentMapping() {\r\n        if (!this._lockAllParentMapping) {\r\n            this._lockAllParentMapping = true;\r\n            this.find((node, parent) => {\r\n                if (!parent) {\r\n                    parent = this._rootNode;\r\n                }\r\n                this._addParentMapping(parent, node);\r\n            }, null, false);\r\n\r\n            this._lockAllParentMapping = false;\r\n        }\r\n    }\r\n\r\n    _addParentMapping(parent, node) {\r\n        this._parentMap.set(node, parent);\r\n        if (!parent) {\r\n            console.warn('HierarchyList._addParentMapping !!!', node);\r\n        }\r\n    }\r\n\r\n    _removeParentMapping(node) {\r\n        this._parentMap.delete(node);\r\n    }\r\n\r\n    _addChildrenMapping(node, children) {\r\n        this._childrenMap.set(node, children);\r\n    }\r\n\r\n    _removeChildrenMapping(node) {\r\n        this._childrenMap.delete(node);\r\n    }\r\n\r\n    dispatchNodeEvent(kind, bubbles, cancelable, nodes, parent, optionalParams = null) {\r\n        const detail = {\r\n            collection: this,\r\n            kind: kind,\r\n            nodes: nodes,\r\n            parent: parent,\r\n            ...optionalParams\r\n        };\r\n\r\n        return this.dispatchEvent(new CustomEvent('node-change', {\r\n            bubbles: bubbles,\r\n            cancelable: cancelable,\r\n            detail: detail\r\n        }));\r\n    }\r\n}\n\nclass ColumnCollection extends HierarchyList {\n    constructor(source) {\n        super(source);\n        this._leafColumnsMap = new Map();\n        const boundCollectionChange = this._onCollectionChange.bind(this);\n        this.addEventListener('collection-change', boundCollectionChange);\n        this.addEventListener('node-change', boundCollectionChange);\n    }\n\n    updateColumns() {\n        this.source && this.source.forEach(column => {\n            column.updateChildren();\n        });\n    }\n\n    getLeafColumns(column) {\n        return getLeafNodes(column);\n    }\n\n    getVisibleLeafColumns(column) {\n        let nodes = this._leafColumnsMap.get(column);\n        if (!nodes) {\n            nodes = getLeafNodes(column).filter(c => c.visible);\n            this._leafColumnsMap.set(column, nodes);\n        }\n        return nodes || [];\n    }\n\n    clearCache() {\n        this._leafColumnsMap = new Map();\n    }\n\n    _onCollectionChange(event) {\n        const {type, detail: {kind}} = event;\n        if (type === 'collection-change' && kind === 'reset') {\n            this.clearCache();\n        } else if (type === 'node-change' && (kind === 'move' || kind === 'remove' || kind === 'add')) {\n            this.clearCache();\n        }\n    }\n}\n\nconst BLOCK_SIZE = 128;\nconst BLOCK_SHIFT = 7;\nconst BLOCK_MASK = 127;\n\nclass Block {\n    constructor(index, factory) {\n        this._index = index;\n        this._itemFactory = factory;\n        this._items = new Array(BLOCK_SIZE);\n        this._total = 0;\n        this._empty = BLOCK_SIZE;\n    }\n\n    get empty() {\n        return this._empty;\n    }\n\n    getTotal() {\n        return this._total;\n    }\n\n    getItem(index) {\n        return this._items[index];\n    }\n\n    addSize(index, value) {\n        const lastValue = this.getSize(BLOCK_MASK);\n        //공간확보\n        this._items.splice(index, 0, null);\n        if (value != null) {\n            this.setSize(index, value);\n        }\n\n        this._total -= (lastValue || 0);\n        this._items.length = BLOCK_SIZE;\n    }\n\n    removeSize(index) {\n        const removedValue = this.getSize(index);\n        this._items.splice(index, 1);\n        if (removedValue != null) {\n            this._total -= (removedValue || 0);\n            this._empty = Math.min(BLOCK_SIZE, this._empty + 1);\n        }\n        return removedValue;\n    }\n\n    getSize(index) {\n        const item = this._items[index];\n        if (item) {\n            return item.value;\n        }\n        return undefined;\n    }\n\n    setSize(index, value) {\n        let item = this.getItem(index);\n        if (!item) {\n            item = this._itemFactory();\n            this._items[index] = item;\n            this._empty--;\n        }\n\n        let old = item.value || 0;\n        item.value = value;\n        this._total += value - old;\n\n        return item;\n    }\n}\n\n\nclass LinearVector {\n    constructor() {\n        this._defaultSize = 30;\n        this._blocks = [];\n        this._gap = 0;\n        this._maxIndex = -1;\n    }\n\n    get itemFactory() {\n        return function () {\n            return {\n                value: 0\n            };\n        };\n    }\n\n    get gap() {\n        return this._gap;\n    }\n\n    set gap(value) {\n        this._gap = value;\n    }\n\n    get defaultSize() {\n        return this._defaultSize;\n    }\n\n    set defaultSize(value) {\n        if (value !== this._defaultSize) {\n            this._defaultSize = value;\n            this.clear();\n        }\n    }\n\n    /**\n     * 사이즈 설정된 최대 인덱스.\n     * @returns {number}\n     */\n    get maxIndex() {\n        return this._maxIndex;\n    }\n\n    get length() {\n        return Math.max(this._length > 0 ? this._length : this._maxIndex + 1, 0);\n    }\n\n    set length(value) {\n        if (this._length !== value) {\n            this._length = value;\n\n            if (this._length <= this._maxIndex) {\n                this._maxIndex = this._length - 1;\n            }\n        }\n    }\n\n    clear() {\n        this._blocks = [];\n        this._maxIndex = -1;\n    }\n\n    setSize(index, value) {\n        const blockIndex = index >> BLOCK_SHIFT;\n        const offset = index & BLOCK_MASK;\n        const block = this._getBlock(blockIndex);\n\n        const old = this.getSize(index);\n        block.setSize(offset, value);\n        this._maxIndex = Math.max(index, this._maxIndex);\n\n        return old !== value;\n    }\n\n    getSize(index) {\n        return this.getItemValue(this.getItem(index));\n    }\n\n    indexOf(size) {\n        let index = 0;//recent.index;\n        let startY = 0;//recent.startY;\n\n        let blockIndex = index >> BLOCK_SHIFT;\n        let blockOffset = index & BLOCK_MASK;\n        let block = this._getBlock(blockIndex);\n\n        //블록 총 height\n        let total = 0;\n        let value = 0;\n        let item;\n        while (startY < size) {\n\n            item = block.getItem(blockOffset);\n            value = this.getItemValue(item) + this.gap;\n\n            if (startY + value > size) {\n                break;\n            }\n\n            startY += value;\n            blockOffset++;\n            if (blockOffset >= BLOCK_SIZE) {\n                blockOffset = 0;\n                blockIndex += 1;\n                total = this._getBlockTotalAt(blockIndex);\n                while (total + startY < size) {\n                    startY += total;\n                    index += BLOCK_SIZE;\n\n                    blockIndex += 1;\n                    total = this._getBlockTotalAt(blockIndex);\n                }\n\n                block = this._getBlock(blockIndex);\n            }\n            index++;\n        }\n        //recent.index = index;\n        //recent.startY = startY;\n        return index;\n    }\n\n    getTotal(from, to) {\n        from = from || 0;\n        to = to != null ? to : this.length - 1;\n\n        let total = 0,\n            blockIndex,\n            index = from;\n\n        while (index <= to) {\n            while ((index & BLOCK_MASK) === 0 && (index + BLOCK_SIZE < to)) {\n                blockIndex = index >> BLOCK_SHIFT;\n                total += this._getBlockTotalAt(blockIndex);\n                index += BLOCK_SIZE;\n            }\n\n            total += this.getSize(index) + this.gap;\n            index++;\n        }\n\n        if (to > 0) {\n            total -= this.gap;\n        }\n        return total;\n    }\n\n    addSize(index, value) {\n\n        const blocks = this._blocks;\n        const numBlocks = blocks && blocks.length || 0;\n        let blockIndex = index >> BLOCK_SHIFT,\n            blockOffset = index & BLOCK_MASK,\n            i = blockIndex,\n            block, nextValue;\n        for (; i < numBlocks; i++) {\n            block = this._getBlock(i);\n            //마지막 값\n            nextValue = block.removeSize(BLOCK_MASK);\n            block.addSize(blockOffset, value);\n\n            //다음 블록으로 이동할 아이템\n            value = nextValue;\n            blockOffset = 0;\n        }\n\n        //캐스팅 비교\n        if (nextValue != null) {\n            block = this._getBlock(numBlocks);\n            block.addSize(0, nextValue);\n        }\n        this.length++;\n        this._maxIndex++;\n    }\n\n    removeSize(index) {\n        const blocks = this._blocks;\n        const numBlocks = blocks && blocks.length || 0;\n\n        let blockIndex = index >> BLOCK_SHIFT,\n            blockOffset = index & BLOCK_MASK,\n            i, block, value, preValue = null;\n\n        block = this._getBlock(blockIndex);\n        block.removeSize(blockOffset);\n\n        for (i = numBlocks - 1; i >= blockIndex; i--) {\n            block = this._getBlock(i);\n\n            if (i !== blockIndex) {\n                value = block.removeSize(0);\n            }\n\n            if (preValue != null) {\n                block.setSize(BLOCK_MASK, preValue);\n            }\n            preValue = value;\n        }\n        this.length--;\n        this._maxIndex--;\n    }\n\n\n    getItem(index) {\n        const blockIndex = index >> BLOCK_SHIFT;\n        const offset = index & BLOCK_MASK;\n\n        if (blockIndex >= 0 && blockIndex < this._blocks.length) {\n            const block = this._getBlock(blockIndex);\n            return block.getItem(offset);\n        }\n        return null;\n    }\n\n    getItemValue(item) {\n        return item && !isNaN(item.value) ? item.value : this.defaultSize;\n    }\n\n    _createBlock(index) {\n        return new Block(index, this.itemFactory);\n    }\n\n    _getBlock(index) {\n        let block = this._blocks[index];\n        if (!block) {\n            block = this._blocks[index] = this._createBlock(index);\n        }\n        return block;\n    }\n\n    _getBlockTotal(block) {\n        return block.getTotal() + (block.empty * this.defaultSize) + this.gap * BLOCK_SIZE;\n    }\n\n    _getBlockTotalAt(index) {\n        return this._getBlockTotal(this._getBlock(index));\n    }\n}\n\n\nfunction createEmptyArray(count) {\n    const array = [];\n    while (0 < count--) {\n        array.push(0);\n    }\n    return array;\n}\n\nclass RowLinearVector extends LinearVector {\n    constructor(index) {\n        super();\n    }\n\n    get itemFactory() {\n        return function () {\n            return {\n                value: 0,\n                cellHeights: [],\n                maxCellHeight: 0\n            };\n        }\n    }\n\n    getMaxCellHeight(rowIndex) {\n        let item = this.getItem(rowIndex);\n        return item && item.maxCellHeight || 0;\n    }\n\n    setCellHeight(rowIndex, columnIndex, height) {\n        if (isNaN(height)) {\n            return false;\n        }\n        let item = this.getItem(rowIndex);\n        if (!item) {\n            this.setSize(rowIndex, this.defaultSize);\n            item = this.getItem(rowIndex);\n        }\n\n        let heights = item.cellHeights;\n        if (heights[columnIndex] !== height) {\n            heights[columnIndex] = height;\n            this._updateMaxCellHeight(item);\n            return true;\n        }\n        return false;\n    }\n\n    insertColumns(index, count) {\n        const num = this.length;\n        const spliceFunc = Array.prototype.splice;\n        const emptyArray = createEmptyArray(count);\n\n        for (let i = 0; i < num; i++) {\n            let item = this.getItem(i);\n            let cellHeights = item.cellHeights;\n            if (cellHeights.length < index) {\n                cellHeights.length = index;\n            }\n            spliceFunc.apply(cellHeights, [index, 0].concat(emptyArray));\n\n            this._updateMaxCellHeight(item);\n        }\n    }\n\n    removeColumns(index, count) {\n        const num = this.length;\n        let item, i;\n        for (i = 0; i < num; i++) {\n            item = this.getItem(i);\n            item.cellHeights.splice(index, count);\n            this._updateMaxCellHeight(item);\n        }\n    }\n\n    _updateMaxCellHeight(item) {\n        item.maxCellHeight = item.cellHeights.reduce((previous, current) => {\n            return previous > current ? previous : current;\n        });\n    }\n}\n\nclass Row {\n    constructor(dimension, index = -1) {\n        this._dimension = dimension;\n        this._cells = [];\n        this._layout = null;\n        this._height = 0;\n        this._index = index;\n    }\n\n    get index() {\n        return this._index;\n    }\n\n    get columnIndices() {\n        return this._dimension.isColumnChanging ? this._dimension.oldColumnIndices : this._dimension.columnIndices;\n    }\n\n    get cells() {\n        return this._cells;\n    }\n\n    get layout() {\n        return this._layout;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    setIndex(index) {\n        this._index = index;\n    }\n\n    setCells(cells) {\n        this._cells = cells;\n        return this;\n    }\n\n    setHeight(value) {\n        this._height = value;\n        return this;\n    }\n\n    setLayout(layout) {\n        this._layout = layout;\n        return this;\n    }\n\n    getCellAt(columnIndex) {\n        const offset = this.columnIndices.indexOf(columnIndex);\n        return offset >= 0 ? this._cells[offset] : null;\n    }\n\n    takeCellAt(columnIndex) {\n        const offset = this.columnIndices.indexOf(columnIndex);\n        if (offset >= 0) {\n            const cell = this._cells[offset];\n            this._cells[offset] = null;\n            return cell;\n        }\n        return null;\n    }\n}\n\nclass ChildColumn extends GridColumn {\r\n    constructor(hostColumn) {\r\n        super();\r\n        this.hostColumn = hostColumn;\r\n        this.draggable = false;\r\n        this.sortable = false;\r\n        this.editable = false;\r\n        this.open = false;\r\n    }\r\n\r\n    get boxMode() {\r\n        return this.hostColumn.boxMode;\r\n    }\r\n\r\n    get indent() {\r\n        return this.hostColumn.indent;\r\n    }\r\n\r\n    get itemRenderer() {\r\n        return this.hostColumn.itemRenderer;\r\n    }\r\n\r\n    get dataField() {\r\n        return this.hostColumn.dataField;\r\n    }\r\n\r\n    set dataField(v) {\r\n    }\r\n\r\n    get dataFieldPath() {\r\n        return this.hostColumn.dataFieldPath;\r\n    }\r\n\r\n    get headerText() {\r\n        return '' + (this.hostColumn.children.indexOf(this) + 1);\r\n    }\r\n\r\n    set headerText(v) {\r\n    }\r\n\r\n    itemToLabel(item) {\r\n        const children = this.hostColumn.children;\r\n        const columnLevel = children.indexOf(this);\r\n        const itemLevel = this.grid.collection.getNodeLevel(item);\r\n        if (itemLevel > columnLevel) {\r\n            return null;\r\n        }\r\n        return super.itemToLabel(item);\r\n    }\r\n}\r\n\r\n/**\r\n * TreeGridColumn 클래스는 트리 그리드의 컬럼을 정의합니다.\r\n */\r\nclass TreeGridColumn extends GridColumn {\r\n    /**\r\n     * @param dataField 값이 표시되는 항목의 필드\r\n     * @param headerText 헤더 타이틀\r\n     */\r\n    constructor(dataField = null, headerText = '') {\r\n        super(dataField, headerText);\r\n        this._indent = 20;\r\n        this._boxMode = false;\r\n    }\r\n\r\n    get indent() {\r\n        return this._indent;\r\n    }\r\n\r\n    set indent(v) {\r\n        if (this._indent !== v) {\r\n            this._indent = v;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 노드 모양을 '┌' 보이게 합니다.\r\n     * @returns {Boolean}\r\n     */\r\n    get boxMode() {\r\n        return this._boxMode;\r\n    }\r\n\r\n    set boxMode(v) {\r\n        if (this._boxMode !== v) {\r\n            this._boxMode = v;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return [\r\n            'minWidth',\r\n            'width',\r\n            'dataField',\r\n            'headerText',\r\n            'children',\r\n            'visible',\r\n            'boxMode',\r\n            'indent',\r\n            'open'].reduce((cur, next) => {\r\n            if (next === 'children') {\r\n                cur[next] = this.children.map(child => child.toJSON());\r\n            } else {\r\n                cur[next] = this[next];\r\n                if (next === 'width' && cur[next] === undefined) ;\r\n            }\r\n            return cur;\r\n        }, {});\r\n    }\r\n}\n\nfunction normalizeInterval(indices, startFrozenOffset, endFrozenOffset, startIndex, endIndex) {\r\n    const minIndex = indices[startFrozenOffset];\r\n    const maxIndex = indices[indices.length - 1 - endFrozenOffset];\r\n    const startOffset = indices.indexOf(startIndex);\r\n    const endOffset = indices.indexOf(endIndex);\r\n\r\n    let snIndex = startIndex;\r\n    if (startOffset < 0) {\r\n        if (startIndex >= maxIndex) {\r\n            if (endFrozenOffset > 0) {\r\n                snIndex = indices[indices.length - endFrozenOffset];\r\n            } else if (endOffset >= 0) {\r\n                snIndex = endIndex;\r\n            } else {\r\n                snIndex = maxIndex;\r\n            }\r\n        } else {\r\n            snIndex = minIndex;\r\n        }\r\n    }\r\n\r\n    let enIndex = endIndex;\r\n    if (endOffset < 0) {\r\n        if (endIndex < minIndex) {\r\n            if (startFrozenOffset > 0) {\r\n                enIndex = indices[startFrozenOffset - 1];\r\n            } else if (startOffset >= 0) {\r\n                enIndex = startIndex;\r\n            } else {\r\n                enIndex = minIndex;\r\n            }\r\n        } else {\r\n            enIndex = maxIndex;\r\n        }\r\n    }\r\n    return [snIndex, enIndex];\r\n}\r\n\r\nfunction containLine(from1, to1, from2, to2) {\r\n    return !(from1 > to2 || to1 < from2);\r\n}\r\n\r\nfunction containInterval(indices, startFrozenOffset, endFrozenOffset, startIndex, endIndex) {\r\n    if (startFrozenOffset > 0) {\r\n        if (containLine(startIndex, endIndex, indices[0], indices[startFrozenOffset - 1])) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    if (endFrozenOffset > 0) {\r\n        if (containLine(startIndex, endIndex, indices[indices.length - endFrozenOffset], indices[indices.length - 1])) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    if (containLine(startIndex, endIndex, indices[startFrozenOffset], indices[indices.length - endFrozenOffset - 1])) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nclass DataDimensions {\r\n    constructor(dataGroup) {\r\n        this.dataGroup = dataGroup;\r\n        this.columnLinearVector = new LinearVector();\r\n        this.rowLinearVector = new RowLinearVector();\r\n        //컬럼\r\n        this._columnIndices = [];\r\n        this._columnLayouts = [];\r\n        this._oldColumnIndices = null;\r\n\r\n        this._rows = [];\r\n        this._rowIndices = [];\r\n\r\n        this._mergeCells = [];\r\n        this._mergeCellPositions = [];\r\n        this._mergeCellLayouts = [];\r\n\r\n        this._pendingRows = null;\r\n        this._pendingIndices = null;\r\n        this._pendingMergeCellPositions = null;\r\n\r\n        this._visibleFrozenIndexRect = new Rectangle();\r\n        this._visibleFrozenSizeRect = new Rectangle();\r\n        //  this._recentOffset = -1;\r\n    }\r\n\r\n    get columnIndices() {\r\n        return this._columnIndices;\r\n    }\r\n\r\n    get columnLayouts() {\r\n        return this._columnLayouts;\r\n    }\r\n\r\n    get oldColumnIndices() {\r\n        return this._oldColumnIndices;\r\n    }\r\n\r\n    get mergeCellLayouts() {\r\n        return this._mergeCellLayouts;\r\n    }\r\n\r\n    get rows() {\r\n        return this._rows;\r\n    }\r\n\r\n    get rowIndices() {\r\n        return this._rowIndices;\r\n    }\r\n\r\n    get mergeCellPositions() {\r\n        return this._mergeCellPositions;\r\n    }\r\n\r\n    get mergeCells() {\r\n        return this._mergeCells;\r\n    }\r\n\r\n    get cells() {\r\n        return this._rows.reduce((cells, row) => {\r\n            cells = cells.concat(row.cells);\r\n            return cells;\r\n        }, []);\r\n    }\r\n\r\n    get visibleFrozenIndexRect() {\r\n        return this._visibleFrozenIndexRect;\r\n    }\r\n\r\n    get visibleFrozenSizeRect() {\r\n        return this._visibleFrozenSizeRect;\r\n    }\r\n\r\n    get firstColumnIndex() {\r\n        return this._columnIndices.length > 0 ? this._columnIndices[0] : -1;\r\n    }\r\n\r\n    get lastColumnIndex() {\r\n        return this._columnIndices.length > 0 ? this._columnIndices[this._columnIndices.length - 1] : -1;\r\n    }\r\n\r\n    get isColumnChanging() {\r\n        return !!this._oldColumnIndices;\r\n    }\r\n\r\n    getRowDefaultHeight() {\r\n        return this.rowLinearVector.defaultSize;\r\n    }\r\n\r\n    setRowDefaultHeight(value) {\r\n        this.rowLinearVector.defaultSize = value;\r\n    }\r\n\r\n    setRowSize(value) {\r\n        this.rowLinearVector.length = value;\r\n    }\r\n\r\n    createRow(index) {\r\n        return new Row(this, index);\r\n    }\r\n\r\n    /**\r\n     * index 행 반환\r\n     * @param index\r\n     */\r\n    getRow(index) {\r\n        const offset = this._rowIndices.indexOf(index);\r\n        if (offset >= 0) {\r\n            return this._rows[offset];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getRowIndexOf(row) {\r\n        const offset = this._rows.indexOf(row);\r\n        if (offset >= 0) {\r\n            return this._rowIndices[offset];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setRow(index, row, height) {\r\n        const indices = this._pendingIndices || this._rowIndices;\r\n        const rows = this._pendingRows || this._rows;\r\n        /*\r\n          const recentIndex = indices[this._recentOffset] || 0;\r\n          const delta = index - recentIndex;\r\n\r\n          let offset = Math.Math.max(0, this._recentOffset);\r\n          while (offset >= 0 && offset < indices.length) {\r\n              const v = indices[offset];\r\n              if (delta >= 0) {\r\n                  if (index < v) {\r\n                      break;\r\n                  }\r\n              } else {\r\n                  if (index > v) {\r\n                      break;\r\n                  }\r\n              }\r\n              offset += delta >= 0 ? +1 : -1;\r\n          }\r\n          */\r\n\r\n        let offset = 0;\r\n        for (let num = indices.length; offset < num; offset++) {\r\n            if (index < indices[offset]) {\r\n                break;\r\n            }\r\n        }\r\n        indices.splice(offset, 0, index);\r\n        rows.splice(offset, 0, row);\r\n        this.rowLinearVector.setSize(index, height);\r\n        //this._recentOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스 행정보를 삭제 후 반환합니다. 전체 행의 위치와 개수는 변하지 않습니다.\r\n     * @param index\r\n     * @returns {null|*}\r\n     */\r\n    takeRow(index) {\r\n        const offset = this._rowIndices.indexOf(index);\r\n        if (offset >= 0) {\r\n            this._rowIndices.splice(offset, 1);\r\n            return this._rows.splice(offset, 1)[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    insertRow(index, row, height) {\r\n        const indices = this._rowIndices;\r\n        indices.forEach((rowIndex, i) => {\r\n            if (index <= rowIndex) {\r\n                indices[i] = rowIndex + 1;\r\n            }\r\n        });\r\n        this.rowLinearVector.addSize(index, height);\r\n        this.setRow(index, row, height);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스 행정보를 삭제 후 반환합니다. 행의 개수와 각 인덱스는 변경됩니다.\r\n     * @param index\r\n     * @returns {null|*}\r\n     */\r\n    removeRow(index) {\r\n        const row = this.takeRow(index);\r\n        const indices = this._rowIndices;\r\n        this.rowLinearVector.removeSize(index);\r\n        indices.forEach((rowIndex, i) => {\r\n            if (index <= rowIndex) {\r\n                indices[i] = rowIndex - 1;\r\n            }\r\n        });\r\n        return row;\r\n    }\r\n\r\n    insertColumn(index) {\r\n        const indices = this._columnIndices;\r\n        indices.forEach((columnIndex, i) => {\r\n            if (index <= columnIndex) {\r\n                indices[i] = columnIndex + 1;\r\n            }\r\n        });\r\n    }\r\n\r\n    removeColumn(index) {\r\n        const indices = this._columnIndices;\r\n        const offset = indices.indexOf(index);\r\n        const removed = [];\r\n        if (offset >= 0) {\r\n            indices.splice(offset, 1);\r\n            this._rows.forEach(row => {\r\n                Array.prototype.push.apply(removed, row.cells.splice(offset, 1));\r\n            });\r\n\r\n            this._columnLayouts.splice(offset, 1);\r\n            indices.forEach((columnIndex, i) => {\r\n                if (index <= columnIndex) {\r\n                    indices[i] = columnIndex - 1;\r\n                }\r\n            });\r\n        }\r\n        return removed;\r\n    }\r\n\r\n    createCell(item, column, cellPosition) {\r\n        if (column instanceof TreeGridColumn) {\r\n            return new TreeCell(item, column, cellPosition)\r\n        }\r\n        return new DataCell(item, column, cellPosition);\r\n    }\r\n\r\n    getCell(rowIndex, columnIndex) {\r\n        const offset = this._rowIndices.indexOf(rowIndex);\r\n        return offset >= 0 ? this._rows[offset].getCellAt(columnIndex) : null;\r\n    }\r\n\r\n    getMergeCell(cellPosition) {\r\n        const offset = this._mergeCellPositions.indexOf(cellPosition);\r\n        return offset >= 0 ? this._mergeCells[offset] : null;\r\n    }\r\n\r\n    removeMergeCellPosition(cellPosition) {\r\n        const offset = this._mergeCellPositions.indexOf(cellPosition);\r\n        if (offset >= 0) {\r\n            this._mergeCellPositions.splice(offset, 1);\r\n            this._mergeCellLayouts.splice(offset, 1);\r\n            return this._mergeCells.splice(offset, 1)[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    hasPendingMergeCellPosition(cellPosition) {\r\n        return (this._pendingMergeCellPositions || []).indexOf(cellPosition) >= 0;\r\n    }\r\n\r\n    setMergeCell(cellPosition, cell) {\r\n        const cellPositions = this._pendingMergeCellPositions || this._mergeCellPositions;\r\n        const cells = this._pendingMergeCells || this._mergeCells;\r\n        cellPositions.push(cellPosition);\r\n        cells.push(cell);\r\n    }\r\n\r\n    /**\r\n     * 지정된 행의 위치 정보를 반환\r\n     * @param rowIndex\r\n     * @returns {*}\r\n     */\r\n    getRowLayout(rowIndex) {\r\n        const offset = this._rowIndices.indexOf(rowIndex);\r\n        return offset >= 0 ? this._rows[offset].layout : null;\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼의 위치 정보를 반환\r\n     * @param columnIndex\r\n     * @returns {*}\r\n     */\r\n    getColumnLayout(columnIndex) {\r\n        const offset = this._columnIndices.indexOf(columnIndex);\r\n        return offset >= 0 ? this._columnLayouts[offset] : null;\r\n    }\r\n\r\n    getColumnLayouts(from, to) {\r\n        if (from === to) {\r\n            return this.getColumnLayout(from);\r\n        }\r\n\r\n        const frozenRect = this._visibleFrozenIndexRect;\r\n        if (!containInterval(this._columnIndices, frozenRect.left, frozenRect.right, from, to)) {\r\n            return null;\r\n        }\r\n\r\n        const columnInterval = normalizeInterval(this._columnIndices, frozenRect.left, frozenRect.right, from, to);\r\n        const scl = this.getColumnLayout(columnInterval[0]);\r\n        const ecl = this.getColumnLayout(columnInterval[1]);\r\n        //스크롤 만큼 이동\r\n        const layout = {\r\n            x: this.getColumnX(from),\r\n            width: this.getColumnsWidth(from, to),\r\n            sx: scl.sx + this.getColumnsWidth(from, columnInterval[0] - 1),\r\n            sw: ecl.dx + ecl.dw - scl.dx,\r\n            dx: scl.dx,\r\n            dw: ecl.dx + ecl.dw - scl.dx,\r\n        };\r\n        return layout;\r\n    }\r\n\r\n    /**\r\n     * 지정된 셀의 위치 정보 반환\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @returns {{}|null}\r\n     */\r\n    getCellLayout(rowIndex, columnIndex) {\r\n        const rl = this.getRowLayout(rowIndex);\r\n        const cl = this.getColumnLayout(columnIndex);\r\n        if (rl && cl) {\r\n            const layout = {...rl, ...cl};\r\n            delete layout['index'];\r\n            return layout;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getCellLayoutByCellPosition(cellPosition) {\r\n        if (!cellPosition.isMerged) {\r\n            return this.getCellLayout(cellPosition.rowIndex, cellPosition.columnIndex);\r\n        }\r\n        const offset = this._mergeCellPositions.indexOf(cellPosition);\r\n        return offset >= 0 ? this._mergeCellLayouts[offset] : null;\r\n    }\r\n\r\n    calculateCellLayoutByCellPosition(cellPosition) {\r\n        const {rowIndex, columnIndex, endRowIndex, endColumnIndex} = cellPosition;\r\n        if (!cellPosition.isMerged) {\r\n            return this.getCellLayout(rowIndex, columnIndex);\r\n        }\r\n\r\n        const frozenRect = this._visibleFrozenIndexRect;\r\n        const rowInterval = normalizeInterval(this._rowIndices, frozenRect.top, frozenRect.bottom, rowIndex, endRowIndex);\r\n        const columnInterval = normalizeInterval(this._columnIndices, frozenRect.left, frozenRect.right, columnIndex, endColumnIndex);\r\n\r\n        const srl = this.getRowLayout(rowInterval[0]);\r\n        const erl = this.getRowLayout(rowInterval[1]);\r\n\r\n        const scl = this.getColumnLayout(columnInterval[0]);\r\n        const ecl = this.getColumnLayout(columnInterval[1]);\r\n\r\n        /*   x: this.getColumnX(from),\r\n               width: this.getColumnsWidth(from, to),\r\n               sx: scl.sx + this.getColumnsWidth(from, columnInterval[0] - 1),\r\n           */\r\n\r\n        const layout = {\r\n            x: this.getColumnX(columnIndex),\r\n            y: this.getRowY(columnIndex),\r\n            width: this.getColumnsWidth(columnIndex, endColumnIndex),\r\n            height: this.getRowsHeight(rowIndex, endRowIndex),\r\n            sx: scl.sx + this.getColumnsWidth(columnIndex, columnInterval[0] - 1),\r\n            sy: srl.sy + this.getRowsHeight(rowIndex, rowInterval[0] - 1),\r\n            sw: ecl.dx + ecl.dw - scl.dx,\r\n            sh: erl.dy + erl.dh - srl.dy,\r\n            dx: scl.dx,\r\n            dy: srl.dy,\r\n            dw: ecl.dx + ecl.dw - scl.dx,\r\n            dh: erl.dy + erl.dh - srl.dy,\r\n        };\r\n        return layout;\r\n    }\r\n\r\n    isVisibleRow(rowIndex) {\r\n        return this._rowIndices.indexOf(rowIndex) >= 0;\r\n    }\r\n\r\n    isVisibleColumn(columnIndex) {\r\n        return this._columnIndices.indexOf(columnIndex) >= 0;\r\n    }\r\n\r\n    isVisiblePosition(rowIndex, columnIndex) {\r\n        return this.isVisibleRow(rowIndex) && this.isVisibleColumn(columnIndex);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    isVisibleCell(cellPosition) {\r\n        const {rowIndex, columnIndex, endRowIndex, endColumnIndex} = cellPosition;\r\n        const frozenRect = this._visibleFrozenIndexRect;\r\n        const rowVisible = containInterval(this._rowIndices, frozenRect.top, frozenRect.bottom, rowIndex, endRowIndex);\r\n        const columnVisible = containInterval(this._columnIndices, frozenRect.left, frozenRect.right, columnIndex, endColumnIndex);\r\n        return rowVisible && columnVisible;\r\n    }\r\n\r\n    /**\r\n     * 지정된 행을 구성하는 셀 목록을 반환\r\n     * @param index\r\n     * @returns {*}\r\n     */\r\n    getCellsByRow(index) {\r\n        const offset = this._rowIndices.indexOf(index);\r\n        return offset >= 0 ? this._rows[offset].cells : [];\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼을 구성하는 셀 목록을 반환\r\n     * @param index\r\n     * @returns {*}\r\n     */\r\n    getCellsByColumn(index) {\r\n        const offset = this._columnIndices.indexOf(index);\r\n        if (offset >= 0) {\r\n            return this._rows.map(row => row.cells[offset]);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * 주어진 callback 함수를 행 위치데이타 각각에 대해 실행합니다.\r\n     * @param callback(layout, rowIndex)\r\n     */\r\n    forEachRowLayouts(callback) {\r\n        this._rows.forEach((row, index) => callback(row.layout, this._rowIndices[index], row));\r\n    }\r\n\r\n    /**\r\n     * 주어진 callback 함수를 컬럼 위치데이타 각각에 대해 실행합니다.\r\n     * @param callback(layout, columnIndex)\r\n     */\r\n    forEachColumnLayouts(callback) {\r\n        this._columnLayouts.forEach((layout, index) => callback(layout, this._columnIndices[index]));\r\n    }\r\n\r\n    /**\r\n     * 주어진 callback 함수를 셀 위치데이타 각각에 대해 실행합니다.\r\n     * @param callback(layout, rowIndex, columnIndex, cell)\r\n     */\r\n    forEachCellLayouts(callback) {\r\n        const numRows = this._rowIndices.length;\r\n        const numColumns = this._columnIndices.length;\r\n        for (let i = 0; i < numRows; i++) {\r\n            const rowIndex = this._rowIndices[i];\r\n            const row = this._rows[i];\r\n            const rl = row.layout;\r\n            const cells = row.cells;\r\n            for (let j = 0; j < numColumns; j++) {\r\n                const columnIndex = this._columnIndices[j];\r\n                const cl = this._columnLayouts[j];\r\n                const cell = cells[j];\r\n                callback({...rl, ...cl}, rowIndex, columnIndex, cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 주어진 callback 함수를 셀 위치데이타 각각에 대해 실행합니다.\r\n     * @param callback(layout, rowIndex, columnIndex)\r\n     */\r\n    forEachMergeCellLayouts(callback) {\r\n        this._mergeCellLayouts.forEach((layout, index) => {\r\n            callback(layout, this._mergeCellPositions[index]);\r\n        });\r\n    }\r\n\r\n    updateStart() {\r\n        this._isUpdating = true;\r\n        this._pendingRows = [];\r\n        this._pendingIndices = [];\r\n        this._pendingMergeCellPositions = [];\r\n        this._pendingMergeCellLayouts = [];\r\n        this._pendingMergeCells = [];\r\n    }\r\n\r\n    updateEnd() {\r\n\r\n        this._isUpdating = false;\r\n\r\n        const oldRows = this._rows;\r\n        const oldMergeCells = this._mergeCells;\r\n\r\n        this._rows = this._pendingRows;\r\n        this._rowIndices = this._pendingIndices;\r\n        this._mergeCellPositions = this._pendingMergeCellPositions;\r\n        this._mergeCells = this._pendingMergeCells;\r\n\r\n        this._pendingRows = null;\r\n        this._pendingIndices = null;\r\n        this._pendingMergeCellPositions = null;\r\n        this._pendingMergeCells = null;\r\n\r\n        this._mergeCellLayouts = this._mergeCellPositions.map(cp => this.calculateCellLayoutByCellPosition(cp));\r\n        this._mergeCells = this._mergeCells.map(cell => cell instanceof Function ? cell() : cell);\r\n\r\n        this._oldColumnIndices = null;\r\n        return {\r\n            rows: oldRows,\r\n            mergeCells: oldMergeCells,\r\n        };\r\n    }\r\n\r\n    clear() {\r\n        //컬럼\r\n        this._columnIndices = [];\r\n        this._columnLayouts = [];\r\n\r\n        this._rows = [];\r\n        this._rowIndices = [];\r\n\r\n        this._mergeCells = [];\r\n        this._mergeCellPositions = [];\r\n        this._mergeCellLayouts = [];\r\n\r\n        this._visibleFrozenIndexRect = new Rectangle();\r\n        this._visibleFrozenSizeRect = new Rectangle();\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼인덱스의 x좌표를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getColumnX(index) {\r\n        return this.columnLinearVector.getTotal(0, index - 1);\r\n    }\r\n\r\n    /**\r\n     * 지정된 x좌표에 해당하는 컬럼 인덱스를 반환합니다. 범위 안에 없으면 -1을 반환합니다.\r\n     * @param x\r\n     * @returns {Number}\r\n     */\r\n    getColumnIndexByDistance(x) {\r\n        return this.columnLinearVector.indexOf(x);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스의 너비를 반환합니다.\r\n     * @param index 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnWidth(index) {\r\n        return this.columnLinearVector.getSize(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스 너비를 설정합니다.\r\n     * @param index\r\n     * @param size\r\n     */\r\n    setColumnWidth(index, size) {\r\n        const width = this.getColumnWidth(index);\r\n        if (width !== size) {\r\n            this.columnLinearVector.setSize(index, size);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * from 컬럼부터 to 컬럼까지의 너비의 합을 반환합니다.\r\n     * @param from 시작 컬럼 인덱스\r\n     * @param to 종료 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnsWidth(from, to) {\r\n        if (from < 0 || to < 0 || from == null) {\r\n            return 0;\r\n        }\r\n        return this.columnLinearVector.getTotal(from, to);\r\n    }\r\n\r\n    getRowY(index) {\r\n        return this.rowLinearVector.getTotal(0, index - 1);\r\n    }\r\n\r\n    /**\r\n     * 지정된 y좌표에 해당하는 행 인덱스를 반환합니다. 범위 안에 없으면 -1을 반환합니다.\r\n     * @param y\r\n     * @returns {Number}\r\n     */\r\n    getRowIndexByDistance(y) {\r\n        return this.rowLinearVector.indexOf(y);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스 행 높이를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getRowHeight(index) {\r\n        return this.rowLinearVector.getSize(index);\r\n    }\r\n\r\n    /**\r\n     * from 부터 to 높이의 합을 반환합니다.\r\n     * @param from\r\n     * @param to\r\n     * @returns {*}\r\n     */\r\n    getRowsHeight(from, to) {\r\n        return this.rowLinearVector.getTotal(from, to);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스의 행 높이를 설정합니다.\r\n     * @param index\r\n     * @param height\r\n     * @returns {boolean}\r\n     */\r\n    setRowHeight(index, height) {\r\n        return this.rowLinearVector.setSize(index, height);\r\n    }\r\n\r\n\r\n    setCellHeight(rowIndex, columnIndex, height) {\r\n        return this.rowLinearVector.setCellHeight(rowIndex, columnIndex, height);\r\n    }\r\n\r\n\r\n    /**\r\n     * 컨텐츠 너비를 반환합니다.\r\n     * @returns {Number}\r\n     */\r\n    getColumnsTotal() {\r\n        return this.columnLinearVector.getTotal();\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠 높이를 반환합니다.\r\n     * @returns {Number}\r\n     */\r\n    getRowsTotal() {\r\n        return this.rowLinearVector.getTotal();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    updateTypicalColumnSizes() {\r\n        const columns = this.dataGroup.normalizedColumns;\r\n\r\n        this.columnLinearVector.clear();\r\n        this.columnLinearVector.length = columns.length;\r\n\r\n        columns.forEach(column => {\r\n            const width = column.visible ? clampValue(column.width || 0, column.minWidth) : 0;\r\n            this.columnLinearVector.setSize(column.index, width);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 고정영역(상, 하, 좌, 우) 인덱스 업데이트\r\n     * @private\r\n     */\r\n    updateVisibleFrozenIndexRect() {\r\n        const {normalizedColumns: columns, frozenLeft, frozenRight, frozenTop, frozenBottom} = this.dataGroup;\r\n        const numColumns = columns.length;\r\n        const rect = new Rectangle();\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < frozenLeft && i < numColumns; i++) {\r\n            let column = columns[i];\r\n            if (column.visible) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        rect.left = count;\r\n\r\n        //right\r\n        count = 0;\r\n        for (let i = Math.max(0, numColumns - frozenRight); i < numColumns; i++) {\r\n            let column = columns[i];\r\n            if (column.visible) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        rect.right = count;\r\n        rect.top = frozenTop;\r\n        rect.bottom = frozenBottom;\r\n\r\n        this._visibleFrozenIndexRect = rect;\r\n    }\r\n\r\n    updateVisibleFrozenSizeRect() {\r\n        const {normalizedColumns: columns, frozenLeft, frozenRight, frozenTop, frozenBottom} = this.dataGroup;\r\n        const numColumns = columns.length;\r\n        const numRows = this.dataGroup.numRows;\r\n\r\n        this._visibleFrozenSizeRect.top = this.getRowsHeight(0, frozenTop - 1);\r\n        this._visibleFrozenSizeRect.bottom = this.getRowsHeight(numRows - frozenBottom, numRows - 1);\r\n\r\n        this._visibleFrozenSizeRect.left = this.getColumnsWidth(0, frozenLeft - 1);\r\n        this._visibleFrozenSizeRect.right = this.getColumnsWidth(numColumns - frozenRight, numColumns - 1);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param isNeed\r\n     * @returns {boolean}\r\n     */\r\n    updateVisibleColumns(isNeed) {\r\n        const {\r\n            normalizedColumns: columns,\r\n            clientWidth: width,\r\n            scrollLeft,\r\n            frozenLeft, frozenRight,\r\n        } = this.dataGroup;\r\n\r\n        this.updateVisibleFrozenIndexRect();\r\n\r\n        let isChanged = false;\r\n        if (isNeed) {\r\n            const defaultWidth = this.columnLinearVector.defaultSize;\r\n            const numColumns = columns.length;\r\n\r\n            let visibleIndices = [];\r\n            let flexibleIndices = [];\r\n\r\n            const calculateWidth = (column) => {\r\n                let cw;\r\n                if (column.visible) {\r\n                    if (isNaN(column.width)) {\r\n                        cw = clampValue(defaultWidth, column.minWidth);\r\n                        flexibleIndices.push(column.index);\r\n                    } else {\r\n                        cw = clampValue(column.width, column.minWidth);\r\n                    }\r\n                    visibleIndices.push(column.index);\r\n                } else {\r\n                    cw = 0;\r\n                }\r\n\r\n                this.columnLinearVector.setSize(column.index, cw);\r\n                return cw;\r\n            };\r\n\r\n            let activeTotal = 0;\r\n            let leftColumnsWidth = 0;\r\n            //left\r\n            for (let i = 0; i < frozenLeft && i < numColumns; i++) {\r\n                let column = columns[i];\r\n                let columnWidth = calculateWidth(column);\r\n                activeTotal += columnWidth;\r\n                leftColumnsWidth += columnWidth;\r\n            }\r\n\r\n            //right\r\n            for (let i = Math.max(0, numColumns - frozenRight); i < numColumns; i++) {\r\n                let column = columns[i];\r\n                if (visibleIndices.indexOf(column.index) < 0) {\r\n                    let columnWidth = calculateWidth(column);\r\n                    activeTotal += columnWidth;\r\n                }\r\n            }\r\n\r\n            //center\r\n            let startColumnIndex = this.getColumnIndexByDistance(leftColumnsWidth + scrollLeft);\r\n            activeTotal += this.getColumnX(startColumnIndex) - leftColumnsWidth - scrollLeft;\r\n\r\n            for (let i = startColumnIndex; i < numColumns - frozenRight && activeTotal < width; i++) {\r\n                let column = columns[i];\r\n                let columnWidth = calculateWidth(column);\r\n                activeTotal += columnWidth;\r\n            }\r\n\r\n            if (scrollLeft <= 0 && activeTotal < width && flexibleIndices.length > 0) {\r\n                const nWidth = width - 1;\r\n                let delta;\r\n                let i = 0;\r\n                while (activeTotal < nWidth - 1 && flexibleIndices.length > 0) {\r\n                    if (i === 0) {\r\n                        delta = Math.floor((nWidth - activeTotal) / flexibleIndices.length);\r\n                    }\r\n\r\n                    let columnIndex = flexibleIndices[i];\r\n                    let oldColumnWidth = this.getColumnWidth(columnIndex);\r\n                    let columnWidth = oldColumnWidth + Math.min(nWidth - activeTotal, delta);\r\n\r\n                    this.columnLinearVector.setSize(columnIndex, columnWidth);\r\n\r\n                    columnWidth = this.getColumnWidth(columnIndex);\r\n\r\n                    activeTotal += columnWidth - oldColumnWidth;\r\n                    if (oldColumnWidth === columnWidth) {\r\n                        flexibleIndices.splice(i, 1);\r\n                    }\r\n\r\n                    i = i < flexibleIndices.length - 1 ? i + 1 : 0;\r\n                }\r\n            }\r\n\r\n            visibleIndices = visibleIndices.sort(numericCompare);\r\n\r\n            if (this._columnIndices.length !== visibleIndices.length || this._columnIndices.some((columnIndex, i) => (columnIndex !== visibleIndices[i]))) {\r\n                this._oldColumnIndices = this._columnIndices;\r\n                this._columnIndices = visibleIndices;\r\n                isChanged = true;\r\n            }\r\n        }\r\n\r\n        this.updateVisibleColumnLayouts();\r\n\r\n        return isChanged;\r\n    }\r\n\r\n    /**\r\n     * 컬럼 위치 정보를 갱신합니다.(절대좌표 및 뷰포트 상대좌표)\r\n     */\r\n    updateVisibleColumnLayouts() {\r\n        const width = this.dataGroup.clientWidth;\r\n        const scrollLeft = this.dataGroup.scrollLeft;\r\n        const frozenRect = this._visibleFrozenIndexRect;\r\n        const vIndices = this._columnIndices;\r\n        const numVIndices = vIndices.length;\r\n\r\n        //center 기준\r\n        const startCenterOffset = frozenRect.left;\r\n        const endCenterOffset = numVIndices - frozenRect.right - 1;\r\n\r\n        const leftWidth = frozenRect.left > 0 ? this.getColumnsWidth(0, vIndices[startCenterOffset - 1]) : 0;\r\n        const rightWidth = frozenRect.right > 0 ? this.getColumnsWidth(vIndices[endCenterOffset + 1]) : 0;\r\n        const centerWidth = width - (leftWidth + rightWidth);\r\n\r\n        const startCenterX = frozenRect.left > 0 ? this.getColumnX(vIndices[frozenRect.left - 1] + 1) : 0;\r\n        const startRightX = frozenRect.right > 0 ? this.getColumnX(vIndices[endCenterOffset + 1]) : 0;\r\n\r\n        let xx = 0;\r\n        let baseX = 0;\r\n        this._columnLayouts = vIndices.map((columnIndex, offset) => {\r\n            const cx = this.getColumnX(columnIndex);\r\n            const cw = this.getColumnWidth(columnIndex);\r\n            let sx = 0;\r\n            let sw = cw;\r\n            let dx = xx;\r\n            if (offset === startCenterOffset) {//중간 영역 시작점\r\n                sx = scrollLeft - (this.getColumnX(columnIndex) - leftWidth);\r\n                sw = cw - sx;\r\n                baseX = cx;\r\n            } else if (offset === endCenterOffset && offset < numVIndices) {//중간 영역 끝점\r\n                sx = 0;\r\n                sw = leftWidth + centerWidth - xx;\r\n            }\r\n\r\n            if (offset === startCenterOffset) {\r\n                baseX = startCenterX;\r\n            } else if (offset === endCenterOffset + 1) {\r\n                baseX = startRightX;\r\n            }\r\n\r\n            xx += sw;\r\n            return {\r\n                index: columnIndex,\r\n                baseX,\r\n                x: cx, width: cw,\r\n                sx, sw, dx, dw: sw,\r\n            };\r\n        });\r\n    }\r\n}\n\n//import tachyon from '../tachyon';\nconst TOKEN = '#';\nconst PROPERTIES_KEY = '74616368796f6e6c6963-6c6f636174696f6e-686f73746e616d65';\nconst COMPANY_URL_KEY = '7777772E78656E6F696D706163742E636F6D';\nconst TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst GLOBAL = window;\nlet __isLicense = -1;\n\nfunction generate(value, d) {\n\tif (value) {\n\t\tlet num = value && value.length || 0,\n\t\t\tlen = 2,\n\t\t\ti = 0, c, r = '';\n\t\twhile (i < num) {\n\t\t\tc = value.substr(i, len);\n\t\t\tc = String.fromCharCode(parseInt(c.toString(d), d));\n\t\t\tr += c;\n\t\t\ti += len;\n\t\t}\n\t\treturn r;\n\t}\n\treturn null;\n}\n\nconst COMPANY_URL = (function (value) {\n\tconst r = value.split(String.fromCharCode(45));\n\tconst m = [];\n\tfor (let i = 0; i < r.length; i++) {\n\t\tm[i] = generate(r[i], 16);\n\t}\n\treturn m[0];\n})(COMPANY_URL_KEY);\n\nconst KEY_MAP = (function (value) {\n\tconst r = value.split(String.fromCharCode(45));\n\tconst m = [];\n\tfor (let i = 0; i < r.length; i++) {\n\t\tm[i] = generate(r[i], 16);\n\t}\n\treturn m;\n})(PROPERTIES_KEY);\n\nfunction keyCharAt(key, i) {\n\treturn key.charCodeAt(Math.floor(i % key.length));\n}\n\nfunction parse(data, callback) {\n\tif (typeof data === 'string') {\n\t\tdata = data.split('');\n\t}\n\tlet num = data && data.length || 0,\n\t\ti, r = [];\n\tfor (i = 0; i < num; i++) {\n\t\tr.push(callback(data[i], i));\n\t}\n\treturn r;\n}\n\nfunction decrypt(data) {\n\tconst key = KEY_MAP[0];\n\n\tfunction b64Decode(data) {\n\t\tlet o1, o2, o3, h1, h2, h3, h4, bits, i = 0, result = [];\n\t\tif (!data) {\n\t\t\treturn data;\n\t\t}\n\t\tdata += '';\n\t\tdo {\n\t\t\th1 = TABLE.indexOf(data.charAt(i++));\n\t\t\th2 = TABLE.indexOf(data.charAt(i++));\n\t\t\th3 = TABLE.indexOf(data.charAt(i++));\n\t\t\th4 = TABLE.indexOf(data.charAt(i++));\n\t\t\tbits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n\t\t\to1 = bits >> 16 & 0xff;\n\t\t\to2 = bits >> 8 & 0xff;\n\t\t\to3 = bits & 0xff;\n\t\t\tresult.push(o1);\n\t\t\tif (h3 !== 64) {\n\t\t\t\tresult.push(o2);\n\t\t\t\tif (h4 !== 64) {\n\t\t\t\t\tresult.push(o3);\n\t\t\t\t}\n\t\t\t}\n\t\t} while (i < data.length);\n\t\treturn result;\n\t}\n\n\treturn parse(b64Decode(data), function (c, i) {\n\t\treturn String.fromCharCode(c ^ keyCharAt(key, i));\n\t}).join('');\n}\n\n\nfunction isLicense() {\n\tif (__isLicense === -1) {\n\t\t__isLicense = false;\n\t\ttry {\n\t\t\tconst ip = ('' + GLOBAL[KEY_MAP[1]][KEY_MAP[2]]).toLowerCase();\n\t\t\tconst keys = decrypt(GLOBAL[KEY_MAP[0]]).split(TOKEN) || [];\n\t\t\tconst version = keys[0];\n\t\t\tconst content = (keys[1] || '').toLowerCase();\n\t\t\tif (ip && content && /*values[0] === ('' + VERSION) &&*/ content.indexOf(ip) >= 0) {\n\t\t\t\t__isLicense = true;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t__isLicense = -2;\n\t\t}\n\t}\n\treturn __isLicense;\n}\n\nfunction paintLicenseMark(context, width, height) {\n\tif (!isLicense()) {\n\t\tcontext.save();\n\t\tcontext.font = '20px Arial';\n\t\tcontext.color = '#000000';\n\t\tcontext.textBaseline = 'bottom';\n\t\tcontext.textAlign = 'right';\n\t\tcontext.strokeText(COMPANY_URL, width - 10, height - 10);\n\t\tcontext.restore();\n\t}\n}\n\nconst NONE_MODE = 'none';\r\nconst DOUBLE_CLICK_DELAY = 400;\r\nconst dummyCellPosition = new CellPosition();\r\n\r\nclass GroupData {\r\n    constructor(data = {}) {\r\n        this.data = data;\r\n    }\r\n\r\n    union(data) {\r\n        for (const key in data) {\r\n            const value = data[key];\r\n            if (Array.isArray(value)) {\r\n                if (!this.data[key]) {\r\n                    this.data[key] = [];\r\n                }\r\n                this.data[key] = this.data[key].concat(value);\r\n            } else if (value && typeof value === 'object') ; else {\r\n                this.data[key] = value;\r\n            }\r\n        }\r\n        return this.data;\r\n    }\r\n\r\n    get(name) {\r\n        return this.data[name];\r\n    }\r\n}\r\n\r\nfunction createContext() {\r\n    return document.createElement('canvas').getContext('2d');\r\n}\r\n\r\nfunction containsCellPosition(cellPosition, rowIndex, columnIndex) {\r\n    return cellPosition.isMerged && (cellPosition.contains(columnIndex, rowIndex) || (cellPosition instanceof CrossCellPosition && cellPosition.containsCross(columnIndex, rowIndex)));\r\n}\r\n\r\nconst findCell = row => {\r\n    const cells = row.cells;\r\n    for (let i = 0, num = cells.length; i < num; i++) {\r\n        const cell = cells[i];\r\n        if (!cell.cellPosition.isCrossed) {\r\n            return cell;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nclass DataGroup extends Group {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this._dimensions = new DataDimensions(this);\r\n        this._normalizedColumns = [];\r\n        this._bufferContexts = [];\r\n\r\n        this._backgroundLayer = this._addLayer(new Layer('background'));\r\n        this._selectionLayer = this._addLayer(new Layer('selection'));\r\n        /**\r\n         * @private\r\n         * @return {RendererLayer}\r\n         */\r\n        this._rendererLayer = this._addLayer(new RendererLayer('renderer'));\r\n        this._separatorLayer = this._addLayer(new Layer('separator'));\r\n\r\n        this._needGeneratedColumns = true;\r\n        this._frozenLeft = 0;\r\n        this._frozenRight = 0;\r\n        this._frozenTop = 0;\r\n        this._frozenBottom = 0;\r\n\r\n        this._itemRenderer = defaultConfig.itemRenderer || defaultItemRenderer;\r\n        this._nullItemRenderer = defaultConfig.nullItemRenderer || nullItemRenderer;\r\n        this._useNullItemRenderer = false;\r\n        this._autoRowHeight = false;\r\n        this._maxRowCount = -1;\r\n        this._rowCount = -1;\r\n\r\n        this._cacheStyle = null;\r\n\r\n        this._boundCollectionChange = this._onCollectionChange.bind(this);\r\n        this._boundColumnCollectionChange = this._onColumnCollectionChange.bind(this);\r\n        this._boundDocumentMouseMove = this._onDocumentMouseMove.bind(this);\r\n        this._boundDocumentMouseUp = this._onDocumentMouseUp.bind(this);\r\n\r\n        this.rowHeight = 30;\r\n        this.overRowIndex = -1;\r\n        this.overColumnIndex = -1;\r\n        this.overCell = null;\r\n        this.anchorRowIndex = -1;\r\n        this.anchorColumnIndex = -1;\r\n        this.autoMerge = false;\r\n        this.autoGenerateColumns = true;\r\n\r\n        this._oldScrollLeft = 0;\r\n        this._oldScrollTop = 0;\r\n\r\n        this.options = {\r\n            clipMode: 'clip',\r\n            hiddenElementMode: NONE_MODE/*'none'*/,\r\n            mergeMode: 'lazy',\r\n            alwaysShowMergeCell: true,\r\n        };\r\n\r\n        this.addEventListener('mousedown', this._onMouseDown.bind(this));\r\n        this.addEventListener('mousemove', this._onMouseMove.bind(this));\r\n        this.addEventListener('mouseenter', this._onMouseEnter.bind(this));\r\n        this.addEventListener('mouseleave', this._onMouseLeave.bind(this));\r\n    }\r\n\r\n    /**\r\n     * 그리드의 컬럼을 관리하는 컬렉션입니다.\r\n     * HierarchyCollection 속성 및 함수수 사용 수 있습니다.\r\n     * @returns {*}\r\n     */\r\n    get columnCollection() {\r\n        return this._columnCollection;\r\n    }\r\n\r\n    set columnCollection(value) {\r\n        this._setColumnCollection(value);\r\n        this._needGeneratedColumns = !value || value.length <= 0;\r\n    }\r\n\r\n    get collection() {\r\n        return this._collection;\r\n    }\r\n\r\n    set collection(value) {\r\n        if (this._collection) {\r\n            this._collection.removeEventListener('collection-change', this._boundCollectionChange);\r\n        }\r\n        this._collection = value;\r\n        if (this._collection) {\r\n            this._collection.addEventListener('collection-change', this._boundCollectionChange);\r\n            this._collection.dispatchCollectionEvent('reset');\r\n        }\r\n    }\r\n\r\n    get numRows() {\r\n        return this.collection && this.collection.length || 0;\r\n    }\r\n\r\n    get normalizedColumns() {\r\n        return this._normalizedColumns.slice(0);\r\n    }\r\n\r\n    get caretRowIndex() {\r\n        return this._caretRowIndex;\r\n    }\r\n\r\n    set caretRowIndex(index) {\r\n        if (index !== this.caretRowIndex) {\r\n            this._setCaretIndex(index, this.caretColumnIndex);\r\n        }\r\n        this._anchorRowIndex = index;\r\n    }\r\n\r\n    get caretColumnIndex() {\r\n        return this._caretColumnIndex;\r\n    }\r\n\r\n    set caretColumnIndex(index) {\r\n        if (index !== this.caretColumnIndex) {\r\n            this._setCaretIndex(this.caretRowIndex, index);\r\n        }\r\n        this._anchorColumnIndex = index;\r\n    }\r\n\r\n    get rowHeight() {\r\n        return this._dimensions.getRowDefaultHeight();\r\n    }\r\n\r\n    set rowHeight(value) {\r\n        if (this.rowHeight !== value) {\r\n            this._dimensions.setRowDefaultHeight(value);\r\n            this.invalidateFor(Reason.ROW_HEIGHT_CHANGE);\r\n        }\r\n    }\r\n\r\n    get autoRowHeight() {\r\n        return this._autoRowHeight;\r\n    }\r\n\r\n    set autoRowHeight(value) {\r\n        if (this.autoRowHeight !== value) {\r\n            this._autoRowHeight = value;\r\n            this.scrollTop = 0;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get maxRowCount() {\r\n        return this._maxRowCount;\r\n    }\r\n\r\n    set maxRowCount(value) {\r\n        if (this._maxRowCount !== value) {\r\n            this._maxRowCount = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    get rowCount() {\r\n        return this._rowCount;\r\n    }\r\n\r\n    set rowCount(value) {\r\n        if (this._rowCount !== value) {\r\n            this._rowCount = value;\r\n            //  this.invalidate();\r\n        }\r\n    }\r\n\r\n    get normalizedRowCount() {\r\n        let count = this.rowCount;\r\n        if (count > 0 && this.maxRowCount > 0 && count > this.maxRowCount) {\r\n            count = this.maxRowCount;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    get itemRenderer() {\r\n        return this._itemRenderer;\r\n    }\r\n\r\n    set itemRenderer(value) {\r\n        if (this._itemRenderer !== value) {\r\n            this._itemRenderer = value;\r\n            this._itemRendererChanged();\r\n        }\r\n    }\r\n\r\n    get nullItemRenderer() {\r\n        return this._nullItemRenderer;\r\n    }\r\n\r\n    set nullItemRenderer(value) {\r\n        if (this._nullItemRenderer !== value) {\r\n            this._nullItemRenderer = value;\r\n            this._itemRendererChanged();\r\n        }\r\n    }\r\n\r\n    get mergeItemRenderer() {\r\n        return this._mergeItemRenderer;\r\n    }\r\n\r\n    set mergeItemRenderer(value) {\r\n        if (this._mergeItemRenderer !== value) {\r\n            this._mergeItemRenderer = value;\r\n            this._itemRendererChanged();\r\n        }\r\n    }\r\n\r\n    get frozenLeft() {\r\n        return this._frozenLeft;\r\n    }\r\n\r\n    set frozenLeft(value) {\r\n        value = Math.max(value, 0);\r\n        if (this._frozenLeft !== value) {\r\n            this._frozenLeft = value;\r\n            this._frozenCountChanged();\r\n        }\r\n    }\r\n\r\n    get frozenRight() {\r\n        return this._frozenRight;\r\n    }\r\n\r\n    set frozenRight(value) {\r\n        value = Math.max(value, 0);\r\n        if (this._frozenRight !== value) {\r\n            this._frozenRight = value;\r\n            this._frozenCountChanged();\r\n        }\r\n    }\r\n\r\n    get frozenTop() {\r\n        return this._frozenTop;\r\n    }\r\n\r\n    set frozenTop(value) {\r\n        value = Math.max(value, 0);\r\n        if (this._frozenTop !== value) {\r\n            this._frozenTop = value;\r\n            this._frozenCountChanged();\r\n        }\r\n    }\r\n\r\n    get frozenBottom() {\r\n        return this._frozenBottom;\r\n    }\r\n\r\n    set frozenBottom(value) {\r\n        value = Math.max(value, 0);\r\n        if (this._frozenBottom !== value) {\r\n            this._frozenBottom = value;\r\n            this._frozenCountChanged();\r\n        }\r\n    }\r\n\r\n    get mergeCompare() {\r\n        return this._mergeCompare;\r\n    }\r\n\r\n    set mergeCompare(value) {\r\n        if (this._mergeCompare !== value) {\r\n            this._mergeCompare = value;\r\n            this.invalidateFor(Reason.ITEMS_CHANGE);\r\n        }\r\n    }\r\n\r\n    get useNullItemRenderer() {\r\n        return this._useNullItemRenderer;\r\n    }\r\n\r\n    set useNullItemRenderer(value) {\r\n        if (this._useNullItemRenderer !== value) {\r\n            this._useNullItemRenderer = value;\r\n            this.invalidateFor(Reason.ALL);\r\n        }\r\n    }\r\n\r\n    _itemRendererChanged() {\r\n        this.clearCache();\r\n        this.invalidateFor(Reason.ALL);\r\n    }\r\n\r\n    _frozenCountChanged(v) {\r\n        this.invalidateFor(Reason.ALL);\r\n    }\r\n\r\n    _setColumnCollection(value) {\r\n        let events = ['collection-change', 'node-change'];\r\n        let handler = this._boundColumnCollectionChange;\r\n        if (this._columnCollection) {\r\n            events.forEach(type => {\r\n                this._columnCollection.removeEventListener(type, handler);\r\n            });\r\n        }\r\n        this._columnCollection = value;\r\n        if (this._columnCollection) {\r\n            events.forEach(type => {\r\n                this._columnCollection.addEventListener(type, handler);\r\n            });\r\n            this._columnCollection.dispatchCollectionEvent('reset');\r\n        } else {\r\n            this._resetColumns();\r\n        }\r\n    }\r\n\r\n    clearItemRenderers() {\r\n        const dimensions = this._dimensions;\r\n        this._freeCells(dimensions.cells.concat(dimensions.mergeCells));\r\n    }\r\n\r\n    clearCache() {\r\n        this.clearItemRenderers();\r\n        this._dimensions.clear();\r\n\r\n        this.scrollLeft = 0;\r\n        this.scrollTop = 0;\r\n\r\n        this.clearElementCache();\r\n        this.clearCellMerger();\r\n        this.clearSelection();\r\n\r\n        this._caretColumnIndex = -1;\r\n        this._caretRowIndex = -1;\r\n        this._anchorRowIndex = -1;\r\n        this._anchorColumnIndex = -1;\r\n        this.invalidateFor(Reason.ALL);\r\n    }\r\n\r\n    _clearCacheForIndicator() {\r\n        this.clearItemRenderers();\r\n        this._dimensions.clear();\r\n\r\n        this.clearCellMerger();\r\n        this.clearSelection();\r\n\r\n        this._caretColumnIndex = -1;\r\n        this._caretRowIndex = -1;\r\n        this._anchorRowIndex = -1;\r\n        this._anchorColumnIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * 전체 컬럼 갱신\r\n     * @private\r\n     */\r\n    _resetColumns() {\r\n        const grid = this.grid;\r\n        const collection = this.columnCollection;\r\n        const oldColumns = this.normalizedColumns;\r\n        const newColumns = [];\r\n        if (collection) {\r\n            collection.updateColumns();\r\n            collection.find(column => {\r\n                column.setGrid(grid);\r\n                if (column.isLeaf) {\r\n                    column.index = newColumns.length;\r\n                    newColumns.push(column);\r\n                }\r\n            });\r\n        }\r\n\r\n        this._normalizedColumns = newColumns;\r\n        this._dimensions.updateTypicalColumnSizes();\r\n\r\n        this._dispatchChangeEvent('normalized-columns-change', newColumns, oldColumns);\r\n        this.invalidateFor(Reason.COLUMNS_CHANGE);\r\n    }\r\n\r\n    _measureSize() {\r\n        const columns = this.normalizedColumns;\r\n        const numColumns = columns.length;\r\n        let cw = 0;\r\n        for (let i = 0; i < this.frozenLeft; i++) {\r\n            cw += this.getColumnWidth(i);\r\n        }\r\n\r\n        for (let i = numColumns - this.frozenRight; i < numColumns; i++) {\r\n            cw += this.getColumnWidth(i);\r\n        }\r\n\r\n        if (cw >= 0) {\r\n            this.style.minWidth = cw + 'px';\r\n        }\r\n    }\r\n\r\n    _updateDisplay() {\r\n        this._dispatchDataGroupEvent('render-updating', this._reasonsMask);\r\n        const dimensions = this._dimensions;\r\n        const width = this.clientWidth;\r\n        const height = this.clientHeight;\r\n        const scrollX = this.scrollLeft;\r\n        const scrollY = this.scrollTop;\r\n\r\n        const isItemsChanged = this.isInvalidateReason(Reason.ITEMS_CHANGE);\r\n        const isColumnsChanged = this.isInvalidateReason(Reason.COLUMNS_CHANGE);\r\n        const isVisibleColumnsChanged = isItemsChanged || isColumnsChanged || this.isInvalidateReason(Reason.VISIBLE_COLUMNS_CHANGE, Reason.COLUMN_UPDATE, Reason.GROUP_SIZE_CHANGE);\r\n        const isMergedChanged = isColumnsChanged || isItemsChanged;\r\n\r\n        if (this.autoMerge && isMergedChanged) {\r\n            this.merger.analysisReady();\r\n            if (this.options.mergeMode === 'all') {\r\n                this.merger.analysisAll();\r\n            }\r\n        }\r\n\r\n        if (isItemsChanged || isColumnsChanged) {\r\n            this._measureSize();\r\n            this._generateColumns();\r\n        }\r\n\r\n        this._beginLayers();\r\n\r\n        const oldColumnIndices = dimensions.columnIndices;\r\n        if (dimensions.updateVisibleColumns(isVisibleColumnsChanged) || isColumnsChanged) {\r\n            this._dispatchChangeEvent('visible-columns-change', dimensions.columnIndices, oldColumnIndices);\r\n        }\r\n\r\n        if (isColumnsChanged || isItemsChanged) {\r\n            this._resetCaret();\r\n        }\r\n\r\n        this._cacheStyle = this.grid.getStyle('cellBackgroundColor', 'rowColors', 'backgroundColor', 'cellSelectionColor', 'cellOverColor', 'rowLine', 'columnLine', 'frozenLine', 'caretLine');\r\n\r\n        //4. 레이어 업데이트.\r\n        this._prepareLayers(scrollX, scrollY, width, height);\r\n\r\n        //3. 행기준 셀생성.\r\n        this._createGrid(scrollX, scrollY, width, height);\r\n        this.setContentSize(this.getContentWidth(), this.getContentHeight());\r\n\r\n        this._paintBackgrounds(scrollX, scrollY, width, height);\r\n        this._paintSelectionIndicators(scrollX, scrollY, width, height);\r\n        this._paintHighlightIndicators(scrollX, scrollY, width, height);\r\n        this._paintSeparators(scrollX, scrollY, width, height);\r\n        this._paintCaretIndicators(scrollX, scrollY, width, height);\r\n\r\n        this._updateLayers(scrollX, scrollY, width, height, this.getContentWidth(), this.getContentHeight(), this.getVisibleFrozenSizeRect());\r\n        this._endLayers();\r\n\r\n        if (this._oldWidth !== width || this._oldHeight !== height) {\r\n            this._dispatchDataGroupEvent('group-size-change', this._reasonsMask);\r\n            this._oldWidth = width;\r\n            this._oldHeight = height;\r\n        }\r\n\r\n        this._dispatchDataGroupEvent('render-update', this._reasonsMask);\r\n        /*\r\n        if (this.collection && this.collection.length > 0) {\r\n            let endTime = Date.now();\r\n            let time = endTime - startTime;\r\n            this._count = (this._count && this._count + 1) || 1;\r\n            this._min = Math.min(this._min || 999999, time);\r\n            this._max = Math.max(this._max || 0, time);\r\n            this._total = (this._total || 0) + time;\r\n            console.log('render ', time, this._min, this._max, parseInt(this._total / this._count));\r\n        }\r\n        */\r\n    }\r\n\r\n    _resetCaret() {\r\n        let rowIndex = -1,\r\n            columnIndex = -1;\r\n\r\n        this._setCaretIndex(rowIndex, columnIndex);\r\n        this._anchorRowIndex = rowIndex;\r\n        this._anchorColumnIndex = columnIndex;\r\n    }\r\n\r\n    _setCaretIndex(rowIndex, columnIndex) {\r\n        let isChanged = false;\r\n        let cell = this.findMergeCellPosition(rowIndex, columnIndex);\r\n        if (cell) {\r\n            rowIndex = cell.rowIndex;\r\n            columnIndex = cell.columnIndex;\r\n        }\r\n\r\n        if (this._caretRowIndex !== rowIndex) {\r\n            this._caretRowIndex = rowIndex;\r\n            isChanged = true;\r\n        }\r\n\r\n        if (this._caretColumnIndex !== columnIndex) {\r\n            this._caretColumnIndex = columnIndex;\r\n            isChanged = true;\r\n        }\r\n\r\n        if (isChanged) {\r\n            this._dispatchCaretChangeEvent(this._caretRowIndex, this._caretColumnIndex);\r\n            this.invalidateFor(Reason.CARET_CHANGE);\r\n        }\r\n        return isChanged;\r\n    }\r\n\r\n    _generateColumns() {\r\n        if (this.autoGenerateColumns && this._needGeneratedColumns && this.numRows > 0) {\r\n            const keys = Object.keys(this.collection.get(0));\r\n            const columns = keys.map(key => new GridColumn(key));\r\n            this._setColumnCollection(new ColumnCollection(columns));\r\n            this._needGeneratedColumns = false;\r\n        }\r\n    }\r\n\r\n    _createGrid(scrollX, scrollY, width, height) {\r\n\r\n        const dimensions = this._dimensions;\r\n        const frozenIndexRect = dimensions.visibleFrozenIndexRect;\r\n        const numRows = this.numRows;\r\n        //수평 정보 갱신 완료인 상태\r\n        dimensions.updateStart();\r\n\r\n        let startRowIndex, endRowIndex, startY, startOffsetY;\r\n        //1. 상단\r\n        if (frozenIndexRect.top > 0) {\r\n            startRowIndex = 0;\r\n            endRowIndex = Math.min(frozenIndexRect.top - 1, numRows - 1);\r\n            startY = 0;\r\n            startOffsetY = 0;\r\n            this._createRows(Section.TOP, startRowIndex, endRowIndex, startY, startOffsetY, width, height, 0);\r\n        }\r\n\r\n        //2. 하단\r\n        if (frozenIndexRect.bottom > 0) {\r\n            startRowIndex = Math.max(frozenIndexRect.top, numRows - frozenIndexRect.bottom);\r\n            endRowIndex = numRows - 1;\r\n            startY = 0;\r\n            startOffsetY = height - this.getRowsHeight(numRows - this.frozenBottom, numRows - 1);\r\n            this._createRows(Section.BOTTOM, startRowIndex, endRowIndex, startY, startOffsetY, width, height, 0);\r\n        }\r\n\r\n        dimensions.updateVisibleFrozenSizeRect();\r\n\r\n        const frozenSizeRect = dimensions.visibleFrozenSizeRect;\r\n        startRowIndex = this.getRowIndexByDistance(scrollY + frozenSizeRect.top);\r\n        endRowIndex = numRows - (frozenIndexRect.bottom + 1);\r\n        startY = this.getRowY(startRowIndex) - frozenSizeRect.top;\r\n        startOffsetY = this.getRowsHeight(0, this.frozenTop - 1);\r\n        {\r\n            this._createRows(Section.MIDDLE, startRowIndex, endRowIndex, startY, startOffsetY, width, height - (frozenSizeRect.top + frozenSizeRect.bottom), scrollY);\r\n            const {rows: removedRows, mergeCells: removedMergeCells} = this._dimensions.updateEnd();\r\n            this._paintMergeCells();\r\n            this._freeRows(removedRows);\r\n            this._freeCells(removedMergeCells);\r\n            dimensions.updateVisibleFrozenSizeRect();\r\n\r\n        }\r\n    }\r\n\r\n    _asyncCreateRows(vSectionIndex, startRowIndex, endRowIndex, startRowY, width, height) {\r\n        const items = this.collection.toArray();\r\n        const scrollY = this.scrollTop;\r\n        const autoRowHeight = this.autoRowHeight;\r\n        const cellMerger = this.merger;\r\n        const autoMerge = this.autoMerge;\r\n        const groupData = new GroupData({\r\n            cellInfos: [],\r\n            mergeCells: [],\r\n        });\r\n\r\n        let viewHeight = this._calculateViewHeight(height);\r\n        const asyncCreateRow = (startIndex, startY) => {\r\n            return new Promise(resolve => {\r\n                const startTime = Date.now();\r\n                const TIME = 100;\r\n                let y = startY;\r\n                let index = startIndex;\r\n                while (Date.now() - startTime < TIME && y - scrollY < viewHeight) {\r\n                    if (autoMerge) {\r\n                        cellMerger.analysisRow(index);\r\n                    }\r\n\r\n                    const oldRowHeight = linearList.getSize(index);\r\n                    groupData.union(this._createRow(vSectionIndex, items[index], index, y));\r\n                    const height = linearList.getSize(index);\r\n\r\n                    if (autoRowHeight && height !== oldRowHeight) {\r\n                        viewHeight = this._calculateViewHeight(height);\r\n                    }\r\n\r\n                    y += height;\r\n                    index++;\r\n                }\r\n                resolve({\r\n                    lastIndex: index,\r\n                    lastY: y,\r\n                });\r\n            });\r\n        };\r\n\r\n        return new Promise(resolve => {\r\n            const execute = (rowIndex, startY) => {\r\n                asyncCreateRow(rowIndex, startY).then(result => {\r\n                    const {lastIndex, lastY} = result;\r\n\r\n                    if (lastIndex <= endRowIndex && (lastY - scrollY) < viewHeight) {\r\n                        execute(rowIndex, lastY);\r\n                    } else {\r\n                        resolve(groupData);\r\n                    }\r\n                });\r\n            };\r\n            execute(startRowIndex, startRowY);\r\n        });\r\n    }\r\n\r\n    _createRows(vSectionIndex, startRowIndex, endRowIndex, startRowY, startOffsetY, width, height, scrollTop) {\r\n\r\n        const dimensions = this._dimensions;\r\n        const items = this.collection && this.collection.toArray() || [];\r\n        const autoRowHeight = this.autoRowHeight;\r\n        const cellMerger = this.merger;\r\n        const autoMerge = this.autoMerge;\r\n\r\n        let rowIndex = startRowIndex;\r\n        let yy = startRowY;\r\n        let oy = startOffsetY;\r\n        let viewHeight = this._calculateViewHeight(height);\r\n\r\n        const preStartRow = rowIndex;\r\n        const preEndRow = Math.min(endRowIndex, startRowIndex + Math.ceil(viewHeight / this.rowHeight));\r\n        if (autoMerge) {\r\n            cellMerger.analysisRows(preStartRow, preEndRow);\r\n        }\r\n        this.setMergeVisibleRect(preStartRow, 0, preEndRow, this.normalizedColumns.length - 1);\r\n\r\n\r\n        function updateRow(rowIndex, row, rowHeight, rowY, offsetY) {\r\n            let sy = 0;\r\n            let sh = rowHeight;\r\n\r\n            if (startRowIndex === rowIndex) {\r\n                sy = scrollTop - startRowY;\r\n                sh = rowHeight - sy;\r\n            } else if (rowY - scrollTop + rowHeight >= viewHeight) {\r\n                sy = 0;\r\n                sh = viewHeight - (rowY - scrollTop);\r\n            }\r\n\r\n            row.setLayout({\r\n                index: rowIndex,\r\n                y: rowY, height: rowHeight,\r\n                sy, sh, dy: offsetY, dh: sh,\r\n            });\r\n        }\r\n\r\n        while (rowIndex <= endRowIndex && yy - scrollTop < viewHeight) {\r\n            if (autoMerge && preEndRow < rowIndex) {\r\n                cellMerger.analysisRow(rowIndex);\r\n            }\r\n\r\n            let rowHeight = dimensions.getRowHeight(rowIndex);\r\n            let row = this._createRow(items[rowIndex], rowIndex, yy, rowHeight);\r\n            if (autoRowHeight && row.height !== rowHeight) {\r\n                viewHeight = this._calculateViewHeight(height);\r\n                rowHeight = row.height;\r\n            }\r\n\r\n            updateRow(rowIndex, row, rowHeight, yy, oy);\r\n            this._paintRow(row);\r\n            oy += row.layout.sh;\r\n            yy += rowHeight;\r\n            ++rowIndex;\r\n        }\r\n    }\r\n\r\n    _createRow(item, rowIndex, rowY, rowHeight) {\r\n        const dimensions = this._dimensions;\r\n        this.autoRowHeight;\r\n        const columns = this._normalizedColumns;\r\n        const row = dimensions.takeRow(rowIndex) || dimensions.createRow(rowIndex);\r\n        const newCells = [];\r\n\r\n        row.setIndex(rowIndex);\r\n\r\n        dimensions.forEachColumnLayouts((layout, columnIndex) => {\r\n            const column = columns[columnIndex];\r\n            const cell = row.takeCellAt(columnIndex);\r\n            const cellPosition = this.findMergeCellPositionFromVisibleRect(rowIndex, columnIndex) || new CellPosition(rowIndex, columnIndex);\r\n            const newCell = this._createCell(item, column, cellPosition, layout.x - layout.baseX, rowY, layout.width, rowHeight, cell);\r\n\r\n            if (cellPosition.isMerged) {\r\n                if (!dimensions.hasPendingMergeCellPosition(cellPosition)) {\r\n                    const mergeCell = dimensions.getMergeCell(cellPosition);\r\n                    if (mergeCell) {\r\n                        dimensions.removeMergeCellPosition(cellPosition);\r\n                    }\r\n                    dimensions.setMergeCell(cellPosition, () => {\r\n                        return this._createMergeCell(cellPosition, mergeCell);\r\n                    });\r\n                }\r\n            }\r\n            newCells.push(newCell);\r\n        });\r\n\r\n        const removedCells = row.cells.slice(0);\r\n        row.setCells(newCells).setHeight(rowHeight);\r\n        dimensions.setRow(rowIndex, row, rowHeight);\r\n\r\n        this._freeCells(removedCells);\r\n\r\n        return row;\r\n    }\r\n\r\n\r\n    _setupCell(cell, item, column, cellPosition) {\r\n        if (!cell) {\r\n            cell = this._dimensions.createCell(item, column, cellPosition);\r\n        }\r\n\r\n        cell.item = item;\r\n        cell.column = column;\r\n        cell.cellPosition = cellPosition;\r\n        cell.value = this.itemToValue(item, column);\r\n        cell.label = this.itemToLabel(item, column, cellPosition);\r\n        cell.hovered = this.isCellSelectionMode ? cellPosition.contains(this.overColumnIndex, this.overRowIndex) : cellPosition.rowIndex === this.overRowIndex;\r\n        cell.selected = this.isCellSelectionMode ? this.containsSelectedCell(cellPosition) : this.containsSelectedPosition(cellPosition.rowIndex, 0);\r\n\r\n        return cell;\r\n    }\r\n\r\n    /**\r\n     * 셀 생성\r\n     */\r\n    _createCell(item, column, cellPosition, x, y, width, height, cellCache) {\r\n        const cell = this._setupCell(cellCache, item, column, cellPosition);\r\n        const isMerged = cell.isMerged;\r\n        let renderer = cell.renderer;\r\n        if (!isMerged && !renderer) {\r\n            renderer = this._createRenderer(item, column, cellPosition, cell);\r\n        }\r\n        cell.renderer = renderer;\r\n        cell.visible = !isMerged;\r\n\r\n        const element = renderer?.htmlElement;\r\n        if (element instanceof HTMLElement) {\r\n            if (isMerged) {\r\n                this._rendererLayer.removeElement(element);\r\n            } else {\r\n                this._rendererLayer.addElement(this.getVerticalSectionIndex(cellPosition.rowIndex), this.getHorizontalSectionIndex(cellPosition.columnIndex), element);\r\n                addClass(element, 'grid-cell');\r\n                setSize(element, width, height);\r\n                setTranslate(element, x, y);\r\n            }\r\n        }\r\n\r\n        if (cell.visible) {\r\n            callHook(renderer, 'prepare', this.grid, cell);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n\r\n    /**\r\n     * 병합셀 생성\r\n     * @param cellPosition\r\n     * @param cellCache\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    _createMergeCell(cellPosition, cellCache) {\r\n        const item = this.collection.get(cellPosition.rowIndex);\r\n        const column = this.normalizedColumns[cellPosition.columnIndex];\r\n        const cell = this._setupCell(cellCache, item, column, cellPosition);\r\n        const renderer = cell.renderer || this._createRenderer(item, column, cellPosition, cell);\r\n        cell.renderer = renderer;\r\n        cell.visible = true;\r\n\r\n        const element = renderer.htmlElement;\r\n        if (element instanceof HTMLElement) {\r\n            const layout = this._dimensions.getCellLayoutByCellPosition(cellPosition);\r\n            this._rendererLayer.addOverlayElement(element);\r\n            addClass(element, 'grid-cell');\r\n            setSize(element, layout.dw, layout.dh);\r\n            setTranslate(element, layout.dx, layout.dy);\r\n        }\r\n\r\n        if (cell.visible) {\r\n            callHook(renderer, 'prepare', this.grid, cell);\r\n        }\r\n\r\n        return cell;\r\n    }\r\n\r\n    _paintRow(row) {\r\n        const context = this._rendererLayer.context;\r\n        const rl = row.layout;\r\n        const columnLayouts = this._dimensions.columnLayouts;\r\n        const autoRowHeight = this.autoRowHeight;\r\n\r\n        row.cells.forEach((cell, index) => {\r\n            const column = cell.column;\r\n            const cl = columnLayouts[index];\r\n            const height = this._internalPaintCell(context, cell, cl.width, rl.height, cl.sx, rl.sy, cl.sw, rl.sh, cl.dx, rl.dy);\r\n            if (autoRowHeight && column.wordWrap && !cell.renderer.isDomRenderer) {\r\n                this._dimensions.setCellHeight(row.index, column.index, height);\r\n            }\r\n        });\r\n    }\r\n\r\n    _paintMergeCells() {\r\n        const context = this._rendererLayer.context;\r\n        const dimensions = this._dimensions;\r\n        dimensions.forEachMergeCellLayouts((layout, cellPosition) => {\r\n            const cell = dimensions.getMergeCell(cellPosition);\r\n            this._internalPaintCell(context, cell, layout.dw, layout.dh, 0, 0, layout.dw, layout.dh, layout.dx, layout.dy);\r\n        });\r\n    }\r\n\r\n    _paintCell(context, cell, layout) {\r\n        context.clearRect(layout.dx, layout.dy, layout.dw, layout.dh);\r\n        if (cell.cellPosition.isMerged) {\r\n            this._internalPaintCell(context, cell, layout.dw, layout.dh, 0, 0, layout.dw, layout.dh, layout.dx, layout.dy);\r\n        } else {\r\n            this._internalPaintCell(context, cell, layout.width, layout.height, layout.sx, layout.sy, layout.dw, layout.dh, layout.dx, layout.dy);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param context\r\n     * @param cell\r\n     * @param width cell 실 가로 크기\r\n     * @param height  cell 실 세로 크기\r\n     * @param sx\r\n     * @param sy\r\n     * @param sw\r\n     * @param sh\r\n     * @param dx\r\n     * @param dy\r\n     * @private\r\n     */\r\n    _internalPaintCell(context, cell, width, height, sx, sy, sw, sh, dx, dy) {\r\n        if (cell.visible) {\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(dx, dy, sw, sh);\r\n            context.clip();\r\n\r\n            context.translate(dx - sx, dy - sy);\r\n            const result = cell.renderer.paint(context, cell, width, height);\r\n            context.restore();\r\n            return result\r\n        }\r\n        return height;\r\n    }\r\n\r\n    _freeRows(rows) {\r\n        rows.forEach(row => this._freeCells(row.cells));\r\n    }\r\n\r\n    _freeCells(cells) {\r\n        const layer = this._rendererLayer;\r\n        cells.forEach(cell => {\r\n            const renderer = cell && cell.renderer;\r\n            if (renderer) {\r\n                const element = renderer.htmlElement;\r\n                callHook(renderer, 'dispose');\r\n\r\n                if (element) {\r\n                    layer.removeElement(element);\r\n                }\r\n                this._freeRenderer(renderer);\r\n                cell.renderer = null;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    itemToLabel(item, column, cellPosition) {\r\n        let func = this.grid.labelFunction;\r\n        if (func) {\r\n            return func(item, column, cellPosition);\r\n        }\r\n        return column.itemToLabel(item);\r\n    }\r\n\r\n    itemToValue(item, column) {\r\n        return column.itemToValue(item);\r\n    }\r\n\r\n    getViewMinHeight() {\r\n        return this._calculateViewHeight(0);\r\n    }\r\n\r\n    /**\r\n     * TO DO\r\n     */\r\n    _getBufferContext(width, height) {\r\n        let DEFAULT_WIDTH = 200, DEFAULT_HEIGHT = 100,\r\n            context, canvas;\r\n        if (width <= DEFAULT_WIDTH && height <= DEFAULT_HEIGHT) {\r\n            context = this._bufferContexts.length > 0 ? this._bufferContexts[0] : null;\r\n            if (!context) {\r\n                context = createContext();\r\n                canvas = context.canvas;\r\n                canvas.width = DEFAULT_WIDTH;\r\n                canvas.height = DEFAULT_HEIGHT;\r\n                this._bufferContexts[0] = context;\r\n            }\r\n        } else {\r\n            context = this._bufferContexts.length > 1 ? this._bufferContexts[1] : null;\r\n            if (!context) {\r\n                context = createContext();\r\n                this._bufferContexts[1] = context;\r\n            }\r\n            canvas = context.canvas;\r\n            if (canvas.width < width || canvas.height < height) {\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n            }\r\n        }\r\n        return context;\r\n    }\r\n\r\n    _paintBackgrounds(scrollX, scrollY, width, height) {\r\n        const dimensions = this._dimensions;\r\n        const context = this._backgroundLayer.context;\r\n        const {rowColors, backgroundColor} = this._cacheStyle;\r\n\r\n        context.save();\r\n        context.beginPath();\r\n\r\n        if (backgroundColor) {\r\n            context.fillStyle = backgroundColor;\r\n            context.fillRect(0, 0, width, height);\r\n        }\r\n\r\n        //행 백그라운드\r\n        dimensions.forEachRowLayouts((layout, rowIndex) => {\r\n            let color;\r\n            if (rowColors instanceof Function) {\r\n                color = callValue(rowColors, rowIndex);\r\n            } else if (Array.isArray(rowColors)) {\r\n                color = rowColors[rowIndex % rowColors.length];\r\n            } else if (typeof rowColors === 'string') {\r\n                color = rowColors;\r\n            }\r\n\r\n            context.fillStyle = color;\r\n            context.fillRect(0, layout.dy, width, layout.dh);\r\n        });\r\n        context.restore();\r\n\r\n        //컬럼 백그라운드\r\n        context.save();\r\n        const columns = this.normalizedColumns;\r\n        dimensions.forEachColumnLayouts((layout, columnIndex) => {\r\n            const color = columns[columnIndex].getStyle('backgroundColor');\r\n            if (color) {\r\n                context.fillStyle = color;\r\n                context.fillRect(layout.dx, 0, layout.dw, height);\r\n            }\r\n        });\r\n        context.restore();\r\n\r\n        const cellBackgroundColor = this._cacheStyle['cellBackgroundColor'];\r\n        if (cellBackgroundColor instanceof Function) {\r\n            dimensions.forEachCellLayouts((layout, rowIndex, columnIndex) => {\r\n                const color = cellBackgroundColor(rowIndex, columnIndex);\r\n                if (color) {\r\n                    context.fillStyle = color;\r\n                    context.fillRect(layout.dx, layout.dy, layout.dw, layout.dh);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    _paintSelectionIndicators(scrollX, scrollY, width, height) {\r\n        if (!this.hasSelectionMode) {\r\n            return;\r\n        }\r\n\r\n        const context = this._selectionLayer.context;\r\n        const isRowSelection = this.isRowSelectionMode;\r\n        const dimensions = this._dimensions;\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.fillStyle = this._cacheStyle['cellSelectionColor'];\r\n\r\n        if (isRowSelection) {\r\n            dimensions.forEachRowLayouts((layout, index, row) => {\r\n                const cell = findCell(row);\r\n                if (cell && cell.selected) {\r\n                    context.fillRect(0, layout.dy, width, layout.dh);\r\n                }\r\n            });\r\n        } else {\r\n            dimensions.forEachCellLayouts((layout, rowIndex, columnIndex, cell) => {\r\n                if (cell && cell.selected) {\r\n                    context.fillRect(layout.dx, layout.dy, layout.dw, layout.dh);\r\n                }\r\n            });\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * 셀 오버시 표시\r\n     * @param scrollX\r\n     * @param scrollY\r\n     * @param width\r\n     * @param height\r\n     * @private\r\n     */\r\n    _paintHighlightIndicators(scrollX, scrollY, width, height) {\r\n        const dimensions = this._dimensions;\r\n        const context = this._selectionLayer.context;\r\n        const rowIndex = this.overRowIndex;\r\n        const columnIndex = this.overColumnIndex;\r\n\r\n        let layout;\r\n        if (this.isRowSelectionMode) {\r\n            if (!dimensions.isVisibleRow(rowIndex)) {\r\n                return;\r\n            }\r\n            layout = {...dimensions.getRowLayout(rowIndex), ...{dx: 0, dw: this.clientWidth}};\r\n        } else {\r\n            const cellPosition = this.findMergeCellPosition(rowIndex, columnIndex) || new CellPosition(rowIndex, columnIndex);\r\n            if (!dimensions.isVisibleCell(cellPosition)) {\r\n                return;\r\n            }\r\n            layout = dimensions.getCellLayoutByCellPosition(cellPosition);\r\n        }\r\n\r\n        if (layout) {\r\n            context.save();\r\n            context.beginPath();\r\n            context.fillStyle = this._cacheStyle['cellOverColor'];\r\n            context.fillRect(layout.dx, layout.dy, layout.dw, layout.dh);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 셀 구분선 그리기\r\n     * @param scrollX\r\n     * @param scrollY\r\n     * @param width\r\n     * @param height\r\n     * @private\r\n     */\r\n    _paintSeparators(scrollX, scrollY, width, height) {\r\n        const context = this._separatorLayer.context;\r\n        const dimensions = this._dimensions;\r\n        const frozenSizeRect = dimensions.visibleFrozenSizeRect;\r\n        const columnLayouts = dimensions.columnLayouts;\r\n        const numColumnLayouts = columnLayouts.length;\r\n        const rowLineStyle = this._cacheStyle['rowLine'];\r\n        const rowDrawLine = (y, fromOffset, toOffset) => {\r\n            const sl = columnLayouts[fromOffset];\r\n            const el = columnLayouts[toOffset];\r\n            lineTo(context, sl.dx, y, el.dx + el.dw, y, rowLineStyle);\r\n        };\r\n\r\n        //행 구분선\r\n        context.save();\r\n        dimensions.forEachRowLayouts((layout, rowIndex) => {\r\n            const cells = dimensions.getCellsByRow(rowIndex);\r\n            let start = 0;\r\n            let i = 0;\r\n            for (; i < numColumnLayouts; i++) {\r\n                const cell = cells[i];\r\n                const column = cell.column;\r\n                if (containsCellPosition(cell.cellPosition, rowIndex + 1, column.index)) {\r\n                    if (start < i) {\r\n                        rowDrawLine(layout.dy + layout.dh, start, i - 1);\r\n                    }\r\n                    start = i + 1;\r\n                }\r\n            }\r\n            if (start < i) {\r\n                rowDrawLine(layout.dy + layout.dh, start, i - 1);\r\n            }\r\n        });\r\n\r\n        //가상행\r\n        if (this.getContentHeight() < height) {\r\n            const frozenBottom = dimensions.visibleFrozenSizeRect.bottom;\r\n            const rowHeight = this.rowHeight;\r\n            let y = this.getContentHeight() - frozenBottom;\r\n            while (y < height - frozenBottom) {\r\n                lineTo(context, 0, y, width, y, rowLineStyle);\r\n                y += rowHeight;\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        //컬럼 구분선.\r\n        const columns = this._normalizedColumns;\r\n        const rows = dimensions.rows;\r\n        const numRows = rows.length;\r\n        const columnLineStyle = this._cacheStyle['columnLine'];\r\n        const columnDrawLine = (x, fromOffset, toOffset, style) => {\r\n            const sl = rows[fromOffset].layout;\r\n            const el = rows[toOffset].layout;\r\n            lineTo(context, x, sl.dy, x, el.dy + el.dh, style);\r\n        };\r\n\r\n        //컬럼 구분선\r\n        context.save();\r\n        dimensions.forEachColumnLayouts((layout, columnIndex) => {\r\n            const column = columns[columnIndex];\r\n            const style = column.getStyle('columnLine') || columnLineStyle;\r\n            const cells = dimensions.getCellsByColumn(columnIndex);\r\n            let start = 0;\r\n            let i = 0;\r\n            for (; i < numRows; i++) {\r\n                const row = rows[i];\r\n                const cellPosition = cells[i].cellPosition;\r\n                if (containsCellPosition(cellPosition, row.index, columnIndex + 1)) {\r\n                    if (start < i) {\r\n                        columnDrawLine(layout.dx + layout.dw, start, i - 1, style);\r\n                    }\r\n                    start = i + 1;\r\n                }\r\n            }\r\n            if (start < i) {\r\n                columnDrawLine(layout.dx + layout.dw, start, i - 1, style);\r\n            }\r\n        });\r\n\r\n        //마지막 컬럼 행\r\n        const lastColumnLayout = dimensions.getColumnLayout(this.normalizedColumns.length - 1);\r\n        const lastRight = lastColumnLayout && lastColumnLayout.x + lastColumnLayout.width || -1;\r\n        if (lastRight > 0 && lastRight < width) {\r\n            lineTo(context, lastRight, 0, lastRight, height, columnLineStyle);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        //고정 컬럼, 행 구분선.\r\n        const frozenLineStyle = this._cacheStyle['frozenLine'];\r\n        context.save();\r\n        if (frozenSizeRect.left > 0) {\r\n            lineTo(context, frozenSizeRect.left, 0, frozenSizeRect.left, height, frozenLineStyle);\r\n        }\r\n\r\n        if (frozenSizeRect.right > 0) {\r\n            lineTo(context, width - frozenSizeRect.right, 0, width - frozenSizeRect.right, height, frozenLineStyle);\r\n        }\r\n\r\n        if (frozenSizeRect.top > 0) {\r\n            lineTo(context, 0, frozenSizeRect.top, width, frozenSizeRect.top, frozenLineStyle);\r\n        }\r\n\r\n        if (frozenSizeRect.bottom > 0) {\r\n            lineTo(context, 0, height - frozenSizeRect.bottom, width, height - frozenSizeRect.bottom, frozenLineStyle);\r\n        }\r\n        context.restore();\r\n\r\n        paintLicenseMark(context, width, height);\r\n    }\r\n\r\n    _paintCaretIndicators(scrollX, scrollY, width, height) {\r\n        const context = this._separatorLayer.context;\r\n        const rowIndex = this.caretRowIndex;\r\n        const columnIndex = this.caretColumnIndex;\r\n        if (!this.isValidPosition(rowIndex, columnIndex)) {\r\n            return;\r\n        }\r\n        const layout = this._dimensions.getCellLayoutByCellPosition(this.findMergeCellPosition(rowIndex, columnIndex) || new CellPosition(rowIndex, columnIndex));\r\n        if (layout) {\r\n            const lineStyle = this._cacheStyle['caretLine'];\r\n            const color = lineStyle.color;\r\n            const lineWidth = lineStyle.width;\r\n\r\n            const xx = layout.dx + Math.floor(lineWidth / 2);\r\n            const yy = layout.dy + Math.floor(lineWidth / 2);\r\n            const ww = layout.dw - lineWidth + 1;\r\n            const hh = layout.dh - lineWidth + 1;\r\n            context.save();\r\n            context.beginPath();\r\n            context.strokeStyle = color;\r\n            context.lineWidth = lineWidth;\r\n            context.rect(xx, yy, ww, hh);\r\n            context.stroke();\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    _invalidateOverAndOut() {\r\n        const width = this.clientWidth;\r\n        const height = this.clientHeight;\r\n        const scrollX = this.scrollLeft;\r\n        const scrollY = this.scrollTop;\r\n\r\n        if (this.hasSelectionMode) {\r\n            const cells = this._dimensions.cells.concat(this._dimensions.mergeCells);\r\n            const isCellMode = this.isCellSelectionMode;\r\n            const isRowMode = this.isRowSelectionMode;\r\n\r\n            cells.forEach(cell => {\r\n                const position = cell.cellPosition;\r\n                if (cell.visible &&\r\n                    (cell.hovered || (isRowMode && position.rowIndex === this.overRowIndex) || (isCellMode && position.contains(this.overColumnIndex, this.overRowIndex)))) {\r\n                    this.invalidateCell(position.rowIndex, position.columnIndex);\r\n                }\r\n            });\r\n        }\r\n\r\n        this._selectionLayer.begin();\r\n        this._paintSelectionIndicators(scrollX, scrollY, width, height);\r\n        this._paintHighlightIndicators(scrollX, scrollY, width, height);\r\n        this._selectionLayer.end();\r\n    }\r\n\r\n    _itemToTemplate(item, column, cellPosition) {\r\n        let isNullRenderer = this.useNullItemRenderer && (!item || !(column.dataField in item) || item[column.dataField] == null);\r\n        let itemRenderer = column.itemRenderer || this.itemRenderer;\r\n        let template = null;\r\n\r\n        if (cellPosition && cellPosition.isMerged && this.mergeItemRenderer) {\r\n            template = this.mergeItemRenderer instanceof Function ? this.mergeItemRenderer(item, column, cellPosition) : this.mergeItemRenderer;\r\n        } else if (itemRenderer instanceof Function) {\r\n            template = itemRenderer(item, column, cellPosition);\r\n        } else if (isNullRenderer) {\r\n            template = this.nullItemRenderer;\r\n        } else if (itemRenderer) {\r\n            template = itemRenderer;\r\n        }\r\n\r\n        if (!template) {\r\n            template = defaultItemRenderer;\r\n        }\r\n        return template;\r\n    }\r\n\r\n    _calculateViewHeight(height) {\r\n        if (this.normalizedRowCount > 0) {\r\n            return this.getRowsHeight(0, this.normalizedRowCount - 1);\r\n        }\r\n        return height;\r\n    }\r\n\r\n    getVisibleRowIndices() {\r\n        return this._dimensions.rowIndices.slice(0);\r\n    }\r\n\r\n    getVisibleColumnIndices() {\r\n        return this._dimensions.columnIndices.slice(0);\r\n    }\r\n\r\n    getCellLayout(rowIndex, columnIndex) {\r\n        return this._dimensions.getCellLayout(rowIndex, columnIndex);\r\n    }\r\n\r\n    getCellLayoutByCellPosition(position) {\r\n        return this._dimensions.getCellLayoutByCellPosition(position);\r\n    }\r\n\r\n    getVisibleFrozenIndexRect() {\r\n        return this._dimensions.visibleFrozenIndexRect;\r\n    }\r\n\r\n    getVisibleFrozenSizeRect() {\r\n        return this._dimensions.visibleFrozenSizeRect;\r\n    }\r\n\r\n    /**\r\n     * 지정된 행 인덱스의 y 좌표를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getRowY(index) {\r\n        return this._dimensions.getRowY(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 y좌표에 해당하는 행 인덱스를 반환합니다. 범위 안에 없으면 -1을 반환합니다.\r\n     * @param y\r\n     * @returns {Number}\r\n     */\r\n    getRowIndexByDistance(y) {\r\n        return this._dimensions.getRowIndexByDistance(y);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스 행 높이를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getRowHeight(index) {\r\n        return this._dimensions.getRowHeight(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스의 행 높이를 설정합니다.\r\n     * @param index\r\n     * @param height\r\n     * @returns {boolean}\r\n     */\r\n    setRowHeight(index, height) {\r\n        if (this._dimensions.setRowHeight(index, height)) {\r\n            this.invalidateFor(Reason.ROW_HEIGHT_CHANGE);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * from 행부터 to 행까지의 높이의 합을 반환합니다.\r\n     * @param from 시작행\r\n     * @param to 종료행.\r\n     * @returns {Number}\r\n     */\r\n    getRowsHeight(from, to) {\r\n        return this._dimensions.getRowsHeight(from, to);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼인덱스의 x좌표를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getColumnX(index) {\r\n        if (index > 0) {\r\n            return this._dimensions.getColumnX(index);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스의 보여지는 컬럼 레이아웃 정보를 반환합니다.\r\n     * @param index\r\n     * @returns {*}\r\n     */\r\n    getColumnLayout(index) {\r\n        return this._dimensions.getColumnLayout(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 x좌표에 해당하는 컬럼 인덱스를 반환합니다. 범위 안에 없으면 -1을 반환합니다.\r\n     * @param x\r\n     * @returns {Number}\r\n     */\r\n    getColumnIndexByDistance(x) {\r\n        return Math.min(this._dimensions.getColumnIndexByDistance(x), this.normalizedColumns.length - 1);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스의 너비를 반환합니다.\r\n     * @param index 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnWidth(index) {\r\n        return this._dimensions.getColumnWidth(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스 너비를 설정합니다.\r\n     * @param index\r\n     * @param size\r\n     */\r\n    setColumnWidth(index, size) {\r\n        const column = this.getColumnAt(index);\r\n        if (column) {\r\n            if (!isNaN(size)) {\r\n                size = clampValue(size, column.minWidth);\r\n            }\r\n            const oldValue = this.getColumnWidth(index);\r\n            if (oldValue !== size || column.width !== size) {\r\n                column.setWidth(size);\r\n                if (!isNaN(size)) {\r\n                    this._dimensions.setColumnWidth(index, size);\r\n                }\r\n\r\n                this.invalidateFor(Reason.COLUMN_UPDATE);\r\n                this._dispatchDataGroupEvent('column-size-change', {\r\n                    column: column,\r\n                    newValue: size,\r\n                    oldValue: oldValue,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * from 컬럼부터 to 컬럼까지의 너비의 합을 반환합니다.\r\n     * @param from 시작 컬럼 인덱스\r\n     * @param to 종료 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnsWidth(from, to) {\r\n        return this._dimensions.getColumnsWidth(from, to);\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠 너비를 반환합니다.\r\n     * @returns {Number}\r\n     */\r\n    getContentWidth() {\r\n        return this._dimensions.getColumnsTotal();\r\n    }\r\n\r\n    /**\r\n     * 컨텐츠 높이를 반환합니다.\r\n     * @returns {Number}\r\n     */\r\n    getContentHeight() {\r\n        return this._dimensions.getRowsTotal();\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼을 보이거나 숨기게 합니다.\r\n     * @param column\r\n     * @param {Boolean} visible\r\n     */\r\n    setColumnVisible(column, visible) {\r\n        if (column.visible !== visible) {\r\n            column.setVisible(visible);\r\n            this.columnCollection.getLeafColumns(column).forEach(c => {\r\n                const index = this.normalizedColumns.indexOf(c);\r\n                if (index >= 0) {\r\n                    this._dimensions.setColumnWidth(index, visible ? c.width : 0);\r\n                }\r\n            });\r\n\r\n            this.columnCollection.clearCache();\r\n            this._dispatchDataGroupEvent('column-visible', column);\r\n            this.invalidateFor(Reason.COLUMN_UPDATE);\r\n            this.validateNow();\r\n        }\r\n    }\r\n\r\n    getHorizontalSectionIndex(columnIndex) {\r\n        if (columnIndex < this.frozenLeft) {\r\n            return Section.LEFT;\r\n        } else if (this.normalizedColumns.length - columnIndex <= this.frozenRight) {\r\n            return Section.RIGHT;\r\n        }\r\n        return Section.CENTER;\r\n    }\r\n\r\n    getVerticalSectionIndex(rowIndex) {\r\n        if (rowIndex < this.frozenTop) {\r\n            return Section.TOP;\r\n        } else if (this.numRows - rowIndex <= this.frozenBottom) {\r\n            return Section.BOTTOM;\r\n        }\r\n        return Section.MIDDLE;\r\n    }\r\n\r\n    getCell(rowIndex, columnIndex) {\r\n        const dimensions = this._dimensions;\r\n        const found = this.findMergeCellPosition(rowIndex, columnIndex);\r\n        if (found) {\r\n            return dimensions.getMergeCell(found);\r\n        }\r\n        return dimensions.getCell(rowIndex, columnIndex);\r\n    }\r\n\r\n    getItemRenderer(rowIndex, columnIndex) {\r\n        const cell = this.getCell(rowIndex, columnIndex);\r\n        return cell && cell.renderer || null;\r\n    }\r\n\r\n    /**\r\n     * 지정된 행 인덱스가 화면에 표시되는 경우 해당 렌더러를 갱신합니다.\r\n     * @param index\r\n     */\r\n    invalidateRow(index) {\r\n        this._dimensions.getCellsByRow(index).forEach(cell => {\r\n            this.invalidateCell(cell.cellPosition.rowIndex, cell.cellPosition.columnIndex);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스가 화면에 표시되는 경우 해당 렌더러를 갱신합니다.\r\n     * @param index 컬럼 인덱스\r\n     */\r\n    invalidateColumn(index) {\r\n        this._dimensions.getCellsByColumn(index).forEach(cell => {\r\n            this.invalidateCell(cell.cellPosition.rowIndex, cell.cellPosition.columnIndex);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 지정된 위치가 화면에 표시되는 경우 해당 렌더러를 갱신합니다.\r\n     * @param rowIndex 행 인덱스\r\n     * @param columnIndex 컬럼 인덱스\r\n     */\r\n    invalidateCell(rowIndex, columnIndex) {\r\n        const dimensions = this._dimensions;\r\n        const cellPosition = this.findMergeCellPosition(rowIndex, columnIndex);\r\n        const cell = cellPosition ? dimensions.getMergeCell(cellPosition) : dimensions.getCell(rowIndex, columnIndex);\r\n        const layout = cellPosition ? dimensions.getCellLayoutByCellPosition(cellPosition) : dimensions.getCellLayout(rowIndex, columnIndex);\r\n        if (cell && layout) {\r\n            if (cell.visible) {\r\n                callHook(cell.renderer, 'prepare', this.grid, cell);\r\n            }\r\n            this._paintCell(this._rendererLayer.context, cell, layout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 지정된 위치가 화면에 표시되는 경우 true 반환합니다.\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @returns {Boolean}\r\n     */\r\n    isVisiblePosition(rowIndex, columnIndex) {\r\n        return this._dimensions.isVisiblePosition(rowIndex, columnIndex);\r\n    }\r\n\r\n    /**\r\n     * 지정된 셀이 화면에 표시되는 경우 true 반환합니다.\r\n     * @param cellPosition\r\n     * @returns {Boolean}\r\n     */\r\n    isVisibleCell(cellPosition) {\r\n        return !!(cellPosition && this._dimensions.isVisibleCell(cellPosition));\r\n    }\r\n\r\n    isValidPosition(rowIndex, columnIndex) {\r\n        const numRows = this.numRows;\r\n        const numColumns = this.normalizedColumns.length;\r\n        return !(rowIndex < 0 || rowIndex >= numRows || columnIndex < 0 || columnIndex >= numColumns);\r\n    }\r\n\r\n    /**\r\n     * 지정된 행 인덱스의 아이템을 반환합니다.\r\n     * @param index 행 인덱스\r\n     * @returns {Object}\r\n     */\r\n    getItemAt(index) {\r\n        return this.collection && this.collection.get(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스의 컬럼을 반환합니다.\r\n     * @param index\r\n     * @returns {GridColumn}\r\n     */\r\n    getColumnAt(index) {\r\n        if (index >= 0 && index < this.normalizedColumns.length) {\r\n            return this.normalizedColumns[index];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    doLayout(needUpdate) {\r\n        this.invalidateFor(needUpdate ? Reason.ALL : 0);\r\n        this.validateNow();\r\n    }\r\n\r\n    updateScrollRect() {\r\n        const dimensions = this._dimensions;\r\n        const scrollLeft = this.scrollLeft;\r\n        const scrollTop = this.scrollTop;\r\n        const hChanged = scrollLeft !== this._oldScrollLeft;\r\n        const vChanged = scrollTop !== this._oldScrollTop;\r\n        const frozenIndex = dimensions.visibleFrozenIndexRect;\r\n        const frozenSize = dimensions.visibleFrozenSizeRect;\r\n        const columnIndices = dimensions.columnIndices;\r\n\r\n        let reason = 0;\r\n        if (hChanged) {\r\n            const leftIndex = this.getColumnIndexByDistance(scrollLeft + frozenSize.left);\r\n            const rightIndex = this.getColumnIndexByDistance(scrollLeft + this.clientWidth - frozenSize.right);\r\n            const numColumns = columnIndices.length;\r\n            const oldLeftIndex = numColumns > frozenIndex.left ? columnIndices[frozenIndex.left] : 0;\r\n            const oldRightIndex = numColumns > frozenIndex.right ? columnIndices[numColumns - frozenIndex.right - 1] : 0;\r\n\r\n            this._oldScrollLeft = scrollLeft;\r\n\r\n            reason |= Reason.HORIZONTAL_SCROLL_CHANGE;\r\n            if (leftIndex !== oldLeftIndex || rightIndex !== oldRightIndex) {\r\n                reason |= Reason.VISIBLE_COLUMNS_CHANGE;\r\n            }\r\n        }\r\n\r\n        if (vChanged) {\r\n            this._oldScrollTop = scrollTop;\r\n            reason |= Reason.VERTICAL_SCROLL_CHANGE;\r\n        }\r\n        this.invalidateFor(reason);\r\n    }\r\n\r\n    /**\r\n     * 병합영역 전체 체크\r\n     */\r\n    analysisMergeAll() {\r\n        this.merger.analysisAll();\r\n    }\r\n\r\n    getVerticalScrollPositionDelta(delta) {\r\n        let value = Math.max(this.rowHeight, 30);\r\n        return delta > 0 ? value : -value;\r\n    }\r\n\r\n    _mouseEventToContent(event) {\r\n        const point = this._mouseEventToLocal(event);\r\n        const width = this.clientWidth;\r\n        const height = this.clientHeight;\r\n        const frozenRect = this._dimensions.visibleFrozenSizeRect;\r\n\r\n        if (frozenRect.top > 0 && point.y <= frozenRect.top) ; else if (frozenRect.bottom > 0 && height - point.y <= frozenRect.bottom) {\r\n            point.y = this.contentHeight - (height - point.y);\r\n        } else {\r\n            if (this.contentHeight < height && this.contentHeight - frozenRect.bottom <= point.y) {\r\n                point.y = this.contentHeight;\r\n            } else {\r\n                point.y = point.y + this.scrollTop;\r\n            }\r\n        }\r\n\r\n        if (frozenRect.left > 0 && point.x <= frozenRect.left) ; else if (frozenRect.right > 0 && width - point.x <= frozenRect.right) {\r\n            point.x = this.contentWidth - (width - point.x);\r\n        } else {\r\n            point.x = point.x + this.scrollLeft;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 해당 위치로 스크롤을\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @param allowSelection\r\n     */\r\n    scrollToCell(rowIndex, columnIndex, allowSelection) {\r\n        if (this.isValidPosition(rowIndex, columnIndex)) {\r\n            let isHorizontal = columnIndex !== -1,\r\n                isVertical = rowIndex !== -1;\r\n            do {\r\n                if (!this._internalScrollToCell(rowIndex, columnIndex, isVertical, isHorizontal)) {\r\n                    break;\r\n                }\r\n            }\r\n            while (!this.isVisiblePosition(rowIndex, columnIndex));\r\n\r\n            this._internalScrollToCell(rowIndex, columnIndex, isVertical, isHorizontal);\r\n\r\n            if (allowSelection) {\r\n                this.updateSelection(rowIndex, columnIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * 지정된 영역을 선택합니다.\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @param shiftKey\r\n     * @param ctrlKey\r\n     */\r\n    updateSelection(rowIndex, columnIndex, shiftKey, ctrlKey) {\r\n        let result = false;\r\n        if (this.hasSelectionMode) {\r\n            let startRowIndex = rowIndex,\r\n                startColumnIndex = columnIndex,\r\n                endRowIndex = rowIndex,\r\n                endColumnIndex = columnIndex,\r\n                kind;\r\n\r\n            //행선택이면 컬럼 인덱스를 0으로 초기화.\r\n            if (this.isRowSelectionMode) {\r\n                startColumnIndex = 0;\r\n                endColumnIndex = 0;\r\n            }\r\n\r\n            if (shiftKey && this.isMultipleSelectionMode) {\r\n                kind = 'set';\r\n                endRowIndex = this._anchorRowIndex;\r\n                endColumnIndex = this._anchorColumnIndex;\r\n            } else if (ctrlKey) {\r\n                if (!this.containsSelectedCell(new CellPosition(startRowIndex, startColumnIndex))) {\r\n                    if (!this.isMultipleSelectionMode) {\r\n                        kind = 'set';\r\n                    } else {\r\n                        kind = 'add';\r\n                    }\r\n                } else {\r\n                    kind = 'remove';\r\n                }\r\n            } else {\r\n                kind = 'set';\r\n            }\r\n\r\n            const cellPosition = this.unionCellPosition(startRowIndex, startColumnIndex, endRowIndex, endColumnIndex, this.isMultipleSelectionMode);\r\n\r\n            if (kind === 'set') {\r\n                result = this.setSelectedCell(cellPosition);\r\n            } else if (kind === 'add') {\r\n                result = this.addSelectedCell(cellPosition);\r\n            } else if (kind === 'remove') {\r\n                result = this.removeSelectedCell(cellPosition);\r\n            }\r\n\r\n            if (!(shiftKey && this.isMultipleSelectionMode)) {\r\n                this._anchorRowIndex = startRowIndex;\r\n                this._anchorColumnIndex = startColumnIndex;\r\n            }\r\n        }\r\n\r\n        this._setCaretIndex(rowIndex, columnIndex);\r\n\r\n        return result;\r\n    }\r\n\r\n    getCellStyle(rowIndex, columnIndex, ...props) {\r\n        const column = this.getColumnAt(columnIndex);\r\n        let result = null;\r\n        if (column) {\r\n            result = column.getStyle.apply(column, props);\r\n        } else {\r\n            result = this.getStyle.apply(this, props);\r\n        }\r\n\r\n        if (!result) ; else if (result instanceof Function) {\r\n            result = result(rowIndex, columnIndex);\r\n        } else if (typeof result === 'object') {\r\n            for (let p in result) {\r\n                result[p] = callValue(result[p], rowIndex, columnIndex);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    destroy() {\r\n        this.clearCache();\r\n    }\r\n\r\n    _internalScrollToCell(rowIndex, columnIndex, isVertical, isHorizontal) {\r\n        const delta = this._calculateScrollPositionDelta(rowIndex, columnIndex);\r\n        let scrollChanged = false;\r\n        if (delta) {\r\n            if (isVertical && delta.y !== 0) {\r\n                const oldValue = this.scrollTop;\r\n                this.scrollTop += delta.y;\r\n                if (this.scrollTop !== oldValue) {\r\n                    scrollChanged = true;\r\n                }\r\n            }\r\n\r\n            if (isHorizontal && delta.x !== 0) {\r\n                const oldValue = this.scrollLeft;\r\n                this.scrollLeft += delta.x;\r\n                if (this.scrollLeft !== oldValue) {\r\n                    scrollChanged = true;\r\n                }\r\n            }\r\n        }\r\n        return scrollChanged;\r\n    }\r\n\r\n    _calculateScrollPositionDelta(rowIndex, columnIndex) {\r\n\r\n        const left = this.getColumnX(columnIndex);\r\n        const top = this.getRowY(rowIndex);\r\n        const right = left + this.getColumnWidth(columnIndex);\r\n        const bottom = top + this.getRowHeight(rowIndex);\r\n\r\n        let scrollRect = this.getScrollRect(),\r\n            frozenSizeRect = this._dimensions.visibleFrozenSizeRect,\r\n            scrollLeft = frozenSizeRect.left + scrollRect.left,\r\n            scrollRight = scrollLeft + this.clientWidth - (frozenSizeRect.left + frozenSizeRect.right),\r\n            scrollTop = frozenSizeRect.top + scrollRect.top,\r\n            scrollBottom = scrollTop + this.clientHeight - (frozenSizeRect.top + frozenSizeRect.bottom),\r\n            dxl = (left - frozenSizeRect.left) - scrollRect.left,\r\n            dxr = right - (scrollRect.right - frozenSizeRect.right),\r\n            dyt = (top - frozenSizeRect.top) - scrollRect.top,\r\n            dyb = bottom - (scrollRect.bottom - frozenSizeRect.bottom),\r\n            dx = (Math.abs(dxl) < Math.abs(dxr)) ? dxl : dxr,\r\n            dy = (Math.abs(dyt) < Math.abs(dyb)) ? dyt : dyb;\r\n\r\n        if (right <= frozenSizeRect.left || left >= this.getContentWidth() - frozenSizeRect.right || scrollLeft <= left && right <= scrollRight) {\r\n            dx = 0;\r\n        }\r\n\r\n        if (bottom <= frozenSizeRect.top || top >= this.getContentHeight() - frozenSizeRect.bottom || scrollTop <= top && bottom <= scrollBottom) {\r\n            dy = 0;\r\n        }\r\n        return new Point(dx, dy);\r\n    }\r\n\r\n    /**\r\n     * 아이템 추가, 뷰포인트 관련 추가된 만큼 데이타 갱신\r\n     * @param rowIndex\r\n     * @param items\r\n     * @private\r\n     */\r\n    _itemsAdded(rowIndex, items) {\r\n        const dimensions = this._dimensions;\r\n        items.forEach((item, i) => {\r\n            const ri = rowIndex + i;\r\n            dimensions.insertRow(ri, dimensions.createRow(ri), this.rowHeight);\r\n        });\r\n\r\n        if (this.autoMerge) {\r\n            this.clearCellMerger();\r\n        }\r\n\r\n        this.invalidateFor(Reason.ITEM_UPDATE);\r\n    }\r\n\r\n    /**\r\n     * 아이템 삭제, 뷰포인트 관련 삭제된 만큼 데이타 갱신\r\n     * @param rowIndex\r\n     * @param items\r\n     * @private\r\n     */\r\n    _itemsRemoved(rowIndex, items) {\r\n        const dimensions = this._dimensions;\r\n        items.forEach((item, i) => {\r\n            const index = rowIndex + i;\r\n            const row = dimensions.removeRow(index);\r\n            if (row) {\r\n                this._freeCells(row.cells);\r\n            }\r\n        });\r\n\r\n        const removeCellPosition = new CellPosition(rowIndex, 0, rowIndex + items.length - 1, this.normalizedColumns.length - 1);\r\n        dimensions.mergeCells.slice(0).forEach(cell => {\r\n            const position = cell.cellPosition;\r\n            if (removeCellPosition.intersects(position)) {\r\n                dimensions.removeMergeCellPosition(position);\r\n                this._freeCells([cell]);\r\n            }\r\n        });\r\n\r\n        if (this.autoMerge) {\r\n            this.clearCellMerger();\r\n        }\r\n\r\n        this.invalidateFor(Reason.ITEM_UPDATE);\r\n    }\r\n\r\n    _columnsAdded(index, columns) {\r\n        const dimensions = this._dimensions;\r\n        columns.forEach((column, i) => {\r\n            dimensions.insertColumn(index + i);\r\n        });\r\n        this.invalidateFor(Reason.COLUMNS_CHANGE);\r\n\r\n        /*\r\n        if (this.autoRowHeight) {\r\n            rowVector.insertColumns(index, columns.length);\r\n        }\r\n        */\r\n    }\r\n\r\n    /**\r\n     * 컬럼삭제 셀 캐쉬 이동\r\n     * @param index\r\n     * @param columns 순차적인 컬럼 목록\r\n     * @private\r\n     */\r\n    _columnsRemoved(index, columns) {\r\n        const dimensions = this._dimensions;\r\n        const removed = [];\r\n        columns.forEach((column, i) => {\r\n            Array.prototype.push.apply(removed, dimensions.removeColumn(index));\r\n        });\r\n        this._freeCells(removed);\r\n        this.invalidateFor(Reason.COLUMNS_CHANGE);\r\n    }\r\n\r\n    _dispatchDataGroupEvent(type, value) {\r\n        return this.dispatchEvent(new CustomEvent(type, {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: value,\r\n        }));\r\n    }\r\n\r\n    _dispatchChangeEvent(type, newValue, oldValue) {\r\n        return this.dispatchEvent(new CustomEvent(type, {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: {\r\n                newValue: newValue,\r\n                oldValue: oldValue,\r\n            },\r\n        }));\r\n    }\r\n\r\n    _dispatchItemEvent(type, rowIndex, columnIndex, trigger, cancelable = false, bubbles = false) {\r\n        return this.dispatchEvent(new CustomEvent(type, {\r\n            cancelable: cancelable,\r\n            bubbles: bubbles,\r\n            detail: {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex,\r\n                item: this.getItemAt(rowIndex),\r\n                column: this.getColumnAt(columnIndex),\r\n                trigger: trigger,\r\n            },\r\n        }));\r\n    }\r\n\r\n    _dispatchCaretChangeEvent(caretRowIndex, caretColumnIndex) {\r\n        return this.dispatchEvent(new CustomEvent('caret-change', {\r\n            bubbles: false,\r\n            cancelable: false,\r\n            detail: {\r\n                caretRowIndex: caretRowIndex,\r\n                caretColumnIndex: caretColumnIndex,\r\n            },\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * mousedown event handler\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onMouseDown(event) {\r\n        if (event.defaultPrevented) {\r\n            return;\r\n        }\r\n\r\n        const point = this._mouseEventToContent(event);\r\n        const rowIndex = this.getRowIndexByDistance(point.y);\r\n        const columnIndex = this.getColumnIndexByDistance(point.x);\r\n\r\n        if (this.isValidPosition(rowIndex, columnIndex) && this._dispatchItemEvent('item-down', rowIndex, columnIndex, event, true)) {\r\n            this._mouseDownColumnIndex = columnIndex;\r\n            this._mouseDownRowIndex = rowIndex;\r\n\r\n            document.addEventListener('mousemove', this._boundDocumentMouseMove);\r\n            document.addEventListener('mouseup', this._boundDocumentMouseUp);\r\n\r\n            this.updateSelection(rowIndex, columnIndex, event.shiftKey, event.ctrlKey);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * mousemove event handler\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onMouseMove(event) {\r\n        const point = this._mouseEventToContent(event);\r\n        const rowIndex = this.getRowIndexByDistance(point.y);\r\n        const columnIndex = this.getColumnIndexByDistance(point.x);\r\n        if (rowIndex !== this.overRowIndex || columnIndex !== this.overColumnIndex) {\r\n            let cell = this.findMergeCellPosition(rowIndex, columnIndex);\r\n            if (!cell) {\r\n                dummyCellPosition.rowIndex = rowIndex;\r\n                dummyCellPosition.columnIndex = columnIndex;\r\n                cell = dummyCellPosition;\r\n            }\r\n\r\n            if (!cell.equals(this.overCell)) {\r\n                if ((this.overRowIndex >= 0 || this.overColumnIndex >= 0)) {\r\n                    this._dispatchItemEvent('item-out', this.overRowIndex, this.overColumnIndex, event);\r\n                }\r\n\r\n                if (rowIndex >= 0 && columnIndex >= 0) {\r\n                    this._dispatchItemEvent('item-over', rowIndex, columnIndex, event);\r\n                }\r\n\r\n                this.overRowIndex = rowIndex;\r\n                this.overColumnIndex = columnIndex;\r\n                this.overCell = dummyCellPosition !== cell ? cell : null;\r\n\r\n                if (!this._boundInvalidateOverAndOut) {\r\n                    this._boundInvalidateOverAndOut = this._invalidateOverAndOut.bind(this);\r\n                }\r\n                nextFrameOnce(this._boundInvalidateOverAndOut);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * mouseenter event handler\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onMouseEnter(event) {\r\n        this._hasMouse = true;\r\n    }\r\n\r\n    /**\r\n     * mouseleave event handler\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onMouseLeave(event) {\r\n        this._hasMouse = false;\r\n        if (this.overRowIndex >= 0 || this.overColumnIndex >= 0) {\r\n            this._dispatchItemEvent('item-out', this.overRowIndex, this.overColumnIndex, event);\r\n            this.overRowIndex = -1;\r\n            this.overColumnIndex = -1;\r\n            this.overCell = null;\r\n            this.invalidateFor(Reason.DISPLAY_UPDATE);\r\n        }\r\n    }\r\n\r\n    _onDocumentMouseMove(event) {\r\n        try {\r\n            let point = this._mouseEventToContent(event);\r\n            if (point && this._mouseDownRowIndex >= 0 && this._mouseDownColumnIndex >= 0) {\r\n                let columnIndex = this.getColumnIndexByDistance(point.x);\r\n                let rowIndex = this.getRowIndexByDistance(point.y);\r\n                this._dispatchItemEvent('item-drag', rowIndex, columnIndex, event);\r\n            }\r\n        } catch (error) {\r\n            this._onDocumentMouseUp(event);\r\n        }\r\n    }\r\n\r\n    _onDocumentMouseUp(event) {\r\n        document.removeEventListener('mousemove', this._boundDocumentMouseMove);\r\n        document.removeEventListener('mouseup', this._boundDocumentMouseUp);\r\n\r\n        const point = this._mouseEventToContent(event);\r\n        const rowIndex = this.getRowIndexByDistance(point.y);\r\n        const columnIndex = this.getColumnIndexByDistance(point.x);\r\n\r\n        this._dispatchItemEvent('item-up', rowIndex, columnIndex, event);\r\n\r\n        //click, double click\r\n        if (this.isValidPosition(rowIndex, columnIndex) && rowIndex === this._mouseDownRowIndex && columnIndex === this._mouseDownColumnIndex) {\r\n            const newClickTime = Date.now();\r\n            if (this._lastClickTime >= 0 && newClickTime - this._lastClickTime < DOUBLE_CLICK_DELAY &&\r\n                this._lastMouseClickRowIndex === rowIndex && this._lastMouseClickColumnIndex === columnIndex) {\r\n\r\n                if (this._dispatchItemEvent('item-double-click', rowIndex, columnIndex, event)) ;\r\n                this._lastClickTime = -1;\r\n            } else {\r\n                if (this._dispatchItemEvent('item-click', rowIndex, columnIndex, event)) ;\r\n                this._lastClickTime = Date.now();\r\n            }\r\n            this._lastMouseClickRowIndex = rowIndex;\r\n            this._lastMouseClickColumnIndex = columnIndex;\r\n        }\r\n        this._mouseDownRowIndex = -1;\r\n        this._mouseDownColumnIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * ColumnCollection\r\n     * collection-change event handler\r\n     * @param event\r\n     */\r\n    _onColumnCollectionChange(event) {\r\n        const {type, detail, detail: {kind, nodes}} = event;\r\n        if (type === 'collection-change') {\r\n            if (kind === 'reset') {\r\n                this._resetColumns();\r\n                this.clearCache();\r\n                this.invalidateFor(Reason.COLUMNS_CHANGE);\r\n            }\r\n        } else if (type === 'node-change' && (kind === 'move' || kind === 'add' || kind === 'remove')) {\r\n            const collection = this.columnCollection;\r\n            const oldColumns = this.normalizedColumns.slice(0);\r\n            this._resetColumns();\r\n            const columns = this.normalizedColumns.slice(0);\r\n            //remove, move\r\n            if (kind !== 'add') {\r\n                nodes.forEach(node => {\r\n                    const leaves = collection.getLeafColumns(node);\r\n                    const index = oldColumns.indexOf(leaves[0]);\r\n                    this._columnsRemoved(index, leaves);\r\n                });\r\n            }\r\n\r\n            //add, move\r\n            if (kind !== 'remove') {\r\n                nodes.forEach(node => {\r\n                    const leaves = collection.getLeafColumns(node);\r\n                    const index = columns.indexOf(leaves[0]);\r\n                    this._columnsAdded(index, leaves);\r\n                });\r\n            }\r\n\r\n            if (this.autoMerge) {\r\n                this.clearCellMerger();\r\n            }\r\n        }\r\n\r\n        if (!this.dispatchEvent(new CustomEvent('column-' + type, {\r\n            bubbles: false,\r\n            cancelable: event.cancelable,\r\n            detail: detail,\r\n        })) && event.cancelable) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * collection collection-change event handler\r\n     */\r\n    _onCollectionChange(event, isDispatch = true) {\r\n        const detail = event.detail;\r\n        const kind = detail.kind;\r\n        switch (kind) {\r\n            case 'add':\r\n                this._itemsAdded(detail.index, detail.items);\r\n                break;\r\n            case 'remove':\r\n                this._itemsRemoved(detail.index, detail.items);\r\n                break;\r\n            case 'set':\r\n            case 'update':\r\n                this.invalidateFor(Reason.ITEM_UPDATE);\r\n                break;\r\n            case 'reset':\r\n                this.clearCache();\r\n                this.invalidateFor(Reason.ITEMS_CHANGE);\r\n                break;\r\n            case 'refresh':\r\n                this._clearCacheForIndicator();\r\n                this.invalidateFor(Reason.ITEMS_CHANGE);\r\n                break;\r\n        }\r\n\r\n        this._dimensions.setRowSize(this.numRows);\r\n\r\n        this.collectionChangedForCellMerger(event);\r\n        this.collectionChangedForSelection(event);\r\n\r\n        if (isDispatch !== false) {\r\n            this.dispatchEvent(new CustomEvent(event.type, {\r\n                bubbles: event.bubbles,\r\n                cancelable: event.cancelable,\r\n                detail: event.detail,\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nDataGroup.withDom('<div class=\"tachyon-group-body\"></div>').withBehavior(Mergeable, Selectable);\n\nconst TYPE_MAP = {\r\n\t'item-mouse-down': 'down',\r\n\t'item-click': 'click',\r\n\t'item-double-click': 'doubleClick'\r\n};\r\n\r\n//let KEY_F2 = 113;\r\nconst POSSIBLE_KEY_CODES = [9, 13, 27, 37, 38, 39, 40];\r\n\r\nclass DataGridEditor {\r\n\tconstructor(grid) {\r\n\t\tthis._grid = grid;\r\n\t\tthis._editedCell = null;\r\n\t\tthis._lastEditCellPosition = null;\r\n\t\tthis._boundOnDocumentKeyDown = this._onDocumentKeyDown.bind(this);\r\n\t\tthis._boundOnDocumentMouseEvent = this._onDocumentMouseEvent.bind(this);\r\n\r\n\t\tconst boundGridItemEvent = this._onGridItemEvent.bind(this);\r\n\t\tgrid.addEventListener('item-mouse-down', boundGridItemEvent);\r\n\t\tgrid.addEventListener('item-click', boundGridItemEvent);\r\n\t\tgrid.addEventListener('item-double-click', boundGridItemEvent);\r\n\t\tgrid.addEventListener('keydown', this._onGridKeyDown.bind(this));\r\n\t\tgrid.addEventListener('scroll', this._onGridScroll.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @returns {*}\r\n\t */\r\n\tget _dataGroup() {\r\n\t\treturn this._grid.dataGroup;\r\n\t}\r\n\r\n\t/**\r\n\t * 편집중인 렌더러 객체입니다.\r\n\t * @returns {*|HTMLElement}\r\n\t */\r\n\tget editedCell() {\r\n\t\treturn this._editedCell;\r\n\t}\r\n\r\n\t/**\r\n\t * 그리드 편집 중인지을 나타냅니다.\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEditing() {\r\n\t\treturn !!this._editedCell;\r\n\t}\r\n\r\n\t/**\r\n\t * 편집 가능한 셀인지 확인합니다.\r\n\t * @param rowIndex\r\n\t * @param columnIndex\r\n\t * @returns {boolean}\r\n\t */\r\n\tisCellEditable(rowIndex, columnIndex) {\r\n\t\tif (!this._grid.editable || !this._dataGroup.isValidPosition(rowIndex, columnIndex)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst column = this._dataGroup.getColumnAt(columnIndex);\r\n\t\treturn column && column.visible && column.editable;\r\n\t}\r\n\r\n\t/**\r\n\t * 지정된 셀에 편집을 시작합니다. 편집을 시작하면 'true'를 반환합니다.\r\n\t * 'item-edit-starting' 이벤트에서 'preventDefault()'호출시 편집을 취소합니다.\r\n\t * @param rowIndex\r\n\t * @param columnIndex\r\n\t * @param trigger\r\n\t * @returns {boolean}\r\n\t */\r\n\tstartEdit(rowIndex, columnIndex, trigger) {\r\n\t\t//에디트 중일때\r\n\t\tif (this.isEditing() && this._lastEditCellPosition.contains(columnIndex, rowIndex) || !this.isCellEditable(rowIndex, columnIndex)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//이미 에디터이 있는 상태이고\r\n\t\tif (this.isEditing() && !this.endEdit(trigger)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this._dispatchEditorEvent('item-edit-starting', true, rowIndex, columnIndex)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst cellPosition = this._findMergeCellPosition(rowIndex, columnIndex);\r\n\t\tthis._lastEditCellPosition = cellPosition;\r\n\r\n\t\t//스크롤 이동.\r\n\t\tthis._grid.scrollToCell(cellPosition.rowIndex, cellPosition.columnIndex, true);\r\n\t\tthis._grid.validateNow();\r\n\r\n\t\t//아이템 에디터 생성.\r\n\t\tthis._createEditor(cellPosition, trigger);\r\n\t\tthis._dispatchEditorEvent('item-edit-start', false, cellPosition.rowIndex, cellPosition.columnIndex);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 편집중이면 편집을 종료합니다.\r\n\t * 편집중인 내용이 저장됩니다.\r\n\t * @param trigger\r\n\t * @return {boolean}\r\n\t */\r\n\tendEdit(trigger = null) {\r\n\t\tif (this.isEditing()) {\r\n\t\t\tconst grid = this._grid;\r\n\t\t\tconst cell = this._editedCell;\r\n\t\t\tconst editor = cell.editor;\r\n\t\t\tconst cellPosition = this._lastEditCellPosition;\r\n\r\n\t\t\tif (editor.getSaveValue instanceof Function) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlet rowIndex = cellPosition.rowIndex,\r\n\t\t\t\t\t\tcolumnIndex = cellPosition.columnIndex,\r\n\t\t\t\t\t\titem = cell.item,\r\n\t\t\t\t\t\tcolumn = cell.column,\r\n\t\t\t\t\t\toldValue = getValue(item, column.dataFieldPath),\r\n\t\t\t\t\t\tnewValue = editor.getSaveValue();\r\n\r\n\t\t\t\t\tif (this._dispatchEditorEvent('item-edit-ending', true, rowIndex, columnIndex, oldValue, newValue, trigger)) {\r\n\t\t\t\t\t\tgrid.collection.setValue(rowIndex, column.dataField, newValue);\r\n\t\t\t\t\t\tthis._dispatchEditorEvent('item-edit-end', false, rowIndex, columnIndex, oldValue, newValue);\r\n\t\t\t\t\t\tthis._destroyEditor();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tthis.cancelEdit();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.cancelEdit();\r\n\t\t\t}\r\n\t\t\tgrid.invalidate();\r\n\t\t\tgrid.flush();\r\n\t\t\tgrid.focus();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * 편집을 취소합니다. 편집중인 내용은 저장되지 않습니다.\r\n\t * @returns {boolean}\r\n\t */\r\n\tcancelEdit() {\r\n\t\tif (this.isEditing()) {\r\n\t\t\tthis._dispatchEditorEvent('item-edit-cancel', false, this._lastEditCellPosition.rowIndex, this._lastEditCellPosition.columnIndex);\r\n\t\t\tthis._destroyEditor();\r\n\t\t\tthis._grid.focus();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t_itemToFactory(item, column, cellPosition) {\r\n\t\tlet template = column.itemEditor || this._grid.itemEditor;\r\n\t\tif (template instanceof Function) {\r\n\t\t\ttemplate = template(item, column, cellPosition);\r\n\t\t}\r\n\t\treturn Renderer.factory(template || defaultItemEditor);\r\n\t}\r\n\r\n\t_dataCellToEditCell(cell, inputtedKey, trigger) {\r\n\t\treturn Object.assign(new EditCell(), cell, {inputtedKey, trigger});\r\n\t}\r\n\r\n\t/**\r\n\t * 에디터를 생성합니다.\r\n\t * @param cellPosition\r\n\t * @param trigger\r\n\t * @private\r\n\t */\r\n\t_createEditor(cellPosition, trigger) {\r\n\t\tconst grid = this._grid;\r\n\t\tconst dataGroup = this._dataGroup;\r\n\t\tconst cell = dataGroup.getCell(cellPosition.rowIndex, cellPosition.columnIndex);\r\n\t\tconst item = cell.item;\r\n\t\tconst column = cell.column;\r\n\t\tconst inputtedKey = this._getPrintableKey(trigger);\r\n\t\tconst editCell = this._dataCellToEditCell(cell, inputtedKey, trigger);\r\n\r\n\t\t//에디트  타겟 렌더러.\r\n\t\tconst factory = this._itemToFactory(item, column, cellPosition);\r\n\t\tconst itemEditor = new factory(grid);\r\n\t\tcallHook(itemEditor, 'created', grid, editCell);\r\n\t\tconst element = itemEditor.htmlElement;\r\n\t\tif (element) {\r\n\t\t\taddClass(element, 'tachyon-editor');\r\n\t\t\tif (element.parentElement !== grid.htmlElement) {\r\n\t\t\t\tgrid.appendChild(element);\r\n\t\t\t}\r\n\t\t\tconst layout = dataGroup.getCellLayoutByCellPosition(cellPosition);\r\n\t\t\tsetLayout(element, layout.dx, layout.dy + grid.getHeaderHeight(), layout.dw, layout.dh);\r\n\t\t}\r\n\r\n\t\teditCell.editor = itemEditor;\r\n\t\tcallHook(itemEditor, 'prepare', grid, editCell);\r\n\t\tif (itemEditor.focus instanceof Function) {\r\n\t\t\titemEditor.focus();\r\n\t\t}\r\n\r\n\t\tthis._editedCell = editCell;\r\n\t\tdocument.addEventListener('keydown', this._boundOnDocumentKeyDown, true);\r\n\t\tdocument.addEventListener('mousedown', this._boundOnDocumentMouseEvent);\r\n\t\t//document.addEventListener('wheel', this._boundOnDocumentMouseEvent, true);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_destroyEditor() {\r\n\t\tconst editor = this._editedCell.editor;\r\n\t\tdocument.removeEventListener('keydown', this._boundOnDocumentKeyDown, true);\r\n\t\tdocument.removeEventListener('mousedown', this._boundOnDocumentMouseEvent);\r\n\t\t//document.removeEventListener('wheel', this._boundOnDocumentMouseEvent, true);\r\n\r\n\t\tif (editor) {\r\n\t\t\tcallHook(editor, 'dispose');\r\n\t\t\tif (this._grid.hookFreeElement instanceof Function) {\r\n\t\t\t\tthis._grid.hookFreeElement(editor);\r\n\t\t\t}\r\n\t\t\tif (editor.htmlElement) {\r\n\t\t\t\tthis._grid.removeChild(editor.htmlElement);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._lastEditCellPosition = null;\r\n\t\tthis._editedCell = null;\r\n\t}\r\n\r\n\t_findMergeCellPosition(rowIndex, columnIndex) {\r\n\t\tlet cell = this._dataGroup.findMergeCellPosition(rowIndex, columnIndex);\r\n\t\tif (!cell) {\r\n\t\t\tcell = new CellPosition(rowIndex, columnIndex);\r\n\t\t}\r\n\t\treturn cell;\r\n\t}\r\n\r\n\t/**\r\n\t * 다음 편집위치\r\n\t * @param rowIndex\r\n\t * @param columnIndex\r\n\t * @param isReverse\r\n\t * @param isVertical\r\n\t * @param trigger\r\n\t * @private\r\n\t */\r\n\t_startNextEdit(rowIndex, columnIndex, isReverse, isVertical, trigger) {\r\n\t\tif (!this._inStartNextEdit) {\r\n\t\t\tthis._inStartNextEdit = true;\r\n\t\t\twindow.requestAnimationFrame(() => {\r\n\t\t\t\tlet position, isEdited;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tposition = this._findNextEditablePosition(rowIndex, columnIndex, isReverse, isVertical);\r\n\t\t\t\t\tif (position) {\r\n\t\t\t\t\t\trowIndex = position.y;\r\n\t\t\t\t\t\tcolumnIndex = position.x;\r\n\t\t\t\t\t\tisEdited = this.startEdit(rowIndex, columnIndex, trigger);\r\n\t\t\t\t\t}\r\n\t\t\t\t} while (position && !isEdited);\r\n\r\n\t\t\t\tthis._inStartNextEdit = false;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t_findNextEditablePosition(rowIndex, columnIndex, shiftKey, isVertical) {\r\n\t\tconst columns = this._dataGroup.normalizedColumns;\r\n\t\tconst numColumns = columns.length;\r\n\t\tconst numItems = this._dataGroup.collection.length;\r\n\t\tconst increments = shiftKey ? -1 : 1;\r\n\r\n\t\tlet nextRowIndex = rowIndex;\r\n\t\tlet nextColumnIndex = columnIndex;\r\n\r\n\t\tdo {\r\n\t\t\tconst mergeCell = this._findMergeCellPosition(nextRowIndex, nextColumnIndex);\r\n\t\t\tif (isVertical) {\r\n\t\t\t\tnextRowIndex = shiftKey ? mergeCell.top : mergeCell.bottom;\r\n\t\t\t\tnextRowIndex += increments;\r\n\t\t\t} else {\r\n\t\t\t\tnextColumnIndex = shiftKey ? mergeCell.left : mergeCell.right;\r\n\t\t\t\tnextColumnIndex += increments;\r\n\r\n\t\t\t\tif (nextColumnIndex >= numColumns) {\r\n\t\t\t\t\tnextRowIndex++;\r\n\t\t\t\t\tnextColumnIndex = 0;\r\n\t\t\t\t} else if (nextColumnIndex < 0) {\r\n\t\t\t\t\tnextRowIndex--;\r\n\t\t\t\t\tnextColumnIndex = numColumns - 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (nextRowIndex < 0 || nextRowIndex >= numItems) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t} while (!this.isCellEditable(nextRowIndex, nextColumnIndex));\r\n\r\n\t\tif (nextRowIndex === rowIndex && nextColumnIndex === columnIndex) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn new Point(nextColumnIndex, nextRowIndex);\r\n\t}\r\n\r\n\t_dispatchEditorEvent(type, cancelable, rowIndex, columnIndex, oldValue = null, newValue = null, trigger = null) {\r\n\t\tconst cell = this._editedCell;\r\n\t\treturn this._grid.dispatchEvent(new CustomEvent(type, {\r\n\t\t\tbubbles: false,\r\n\t\t\tcancelable: cancelable,\r\n\t\t\tdetail: {\r\n\t\t\t\trowIndex: rowIndex,\r\n\t\t\t\tcolumnIndex: columnIndex,\r\n\t\t\t\titem: this._dataGroup.getItemAt(rowIndex),\r\n\t\t\t\tcolumn: this._dataGroup.getColumnAt(columnIndex),\r\n\t\t\t\trenderer: cell && cell.renderer || null,\r\n\t\t\t\teditor: cell && cell.editor || null,\r\n\t\t\t\toldValue: oldValue,\r\n\t\t\t\tnewValue: newValue,\r\n\t\t\t\ttrigger: trigger\r\n\t\t\t}\r\n\t\t}));\r\n\t}\r\n\r\n\t_getPrintableKey(event) {\r\n\t\tconst key = event && (event.char || event.key);\r\n\t\tif (this._grid.editOnKeys.indexOf(key) >= 0) {\r\n\t\t\treturn key;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t_onGridItemEvent(event) {\r\n\t\tconst rowIndex = event.detail.rowIndex;\r\n\t\tconst columnIndex = event.detail.columnIndex;\r\n\t\tconst isEditing = this.isEditing();\r\n\r\n\t\t//에디트 중일때\r\n\t\tif (isEditing && this._lastEditCellPosition.contains(columnIndex, rowIndex)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst column = this._dataGroup.getColumnAt(columnIndex);\r\n\t\tconst cellPosition = this._findMergeCellPosition(rowIndex, columnIndex);\r\n\t\tconst events = column.editOnEvents || this._grid.editOnEvents || [];\r\n\t\tconst kind = TYPE_MAP[event.type];\r\n\r\n\t\t//이미 에디터이 있는 상태이고\r\n\t\t//마지막 에디트한 상태가 현재 위치와 다르면 에디트 종료\r\n\t\tif (isEditing && !this.endEdit(event) || events.indexOf(kind) < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.startEdit(cellPosition.rowIndex, cellPosition.columnIndex, event);\r\n\t}\r\n\r\n\t_onGridKeyDown(event) {\r\n\t\tif (!this.isEditing() && !event.defaultPrevented) {\r\n\t\t\tconst caretRowIndex = this._dataGroup.caretRowIndex;\r\n\t\t\tconst caretColumnIndex = this._dataGroup.caretColumnIndex;\r\n\r\n\t\t\tif (!event.ctrlKey && !event.altKey && caretRowIndex >= 0 && caretColumnIndex >= 0) {\r\n\t\t\t\tconst key = this._getPrintableKey(event);\r\n\t\t\t\tif (key || event.keyCode === 113) {\r\n\t\t\t\t\tconst cp = this._findMergeCellPosition(caretRowIndex, caretColumnIndex);\r\n\t\t\t\t\tif (this.startEdit(cp.rowIndex, cp.columnIndex, event)) {\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_onGridScroll(event) {\r\n\t\tif (this.isEditing()) {\r\n\t\t\tthis.endEdit(event);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t_onDocumentKeyDown(event) {\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst {keyCode, shiftKey} = event;\r\n\t\tif (this.isEditing() && POSSIBLE_KEY_CODES.indexOf(keyCode) >= 0) {\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\tconst {rowIndex, columnIndex} = this._lastEditCellPosition;\r\n\t\t\tif (keyCode === 27) {//esc\r\n\t\t\t\tthis.cancelEdit();\r\n\t\t\t} else if (keyCode === 13) {\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._startNextEdit(rowIndex, columnIndex, shiftKey, true, event);\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode === 9) {//tab\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._startNextEdit(rowIndex, columnIndex, shiftKey, false, event);\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode === 37) {\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._grid.moveCaretLeft();\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode === 38) {\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._grid.moveCaretUp();\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode === 39) {\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._grid.moveCaretRight();\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode === 40) {\r\n\t\t\t\tif (this.endEdit(event)) {\r\n\t\t\t\t\tthis._grid.moveCaretDown();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_onDocumentMouseEvent(event) {\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst editor = this._editedCell.editor;\r\n\t\tif (!editor) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst element = editor.htmlElement;\r\n\t\tif (element instanceof Element && element.contains(event.target)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst x = event.clientX;\r\n\t\tconst y = event.clientY;\r\n\t\tconst rect = element.getBoundingClientRect();\r\n\t\tif (!(x < rect.left || x > rect.right || y < rect.top || y > rect.bottom)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.endEdit(event);\r\n\t}\r\n}\n\nfunction createFunction(operator) {\n    return new Function('a', 'b', `return a ${operator} b`);\n}\n\nfunction contains(a, b, ignore) {\n    if (!a || !b) {\n        return false;\n    }\n\n    if (ignore) {\n        //TODO 성능 regex test 비교?\n        a = a.toLowerCase();\n        b = b.toLowerCase();\n    }\n    return a.indexOf(b) >= 0;\n}\n\nfunction notContains(a, b) {\n    return !contains(a, b);\n}\n\nfunction startsWith(a, b) {\n    return a && b && a.startsWith(b);\n}\n\nfunction endsWith(a, b) {\n    return a && b && a.startsWith(b);\n}\n\nconst Operators = [\n    {type: 'equals', compare: createFunction('==')},\n    {type: 'notEqual', compare: createFunction('!=')},\n    {type: 'lessThan', compare: createFunction('<')},\n    {type: 'lessThanOrEqual', compare: createFunction('<=')},\n    {type: 'greaterThan', compare: createFunction('>')},\n    {type: 'greaterThanOrEqual', compare: createFunction('>=')},\n\n    {type: 'contains', compare: contains},\n    {type: 'notContains', compare: notContains},\n    {type: 'startsWith', compare: startsWith},\n    {type: 'endsWith', compare: endsWith}\n];\n\nfunction getOperator(name) {\n    name = (name || '').toLowerCase();\n    return Operators.find(item => name === item.type.toLowerCase());\n}\n\nfunction valueToString(value) {\n    return value != null ? '' + value : '';\n}\n\nfunction valueToNumber(value) {\n    return ++value;\n}\n\nfunction parseConditions(data) {\n\n    if (!data) {\n        data = {};\n    }\n\n    const conditions = [];\n    const values = [];\n    const setCondition = function (item) {\n        let name = item.operator;\n        if (name) {\n            const operator = getOperator(name);\n            if (operator) {\n                conditions.push(operator.compare);\n                values.push(item.value);\n            }\n        }\n    };\n\n    if ('from' in data) {\n        setCondition(data.from);\n    }\n\n    if ('to' in data) {\n        setCondition(data.to);\n    }\n\n    if (conditions.length <= 0) {\n        setCondition(data);\n    }\n\n    return {conditions, values}\n}\n\nclass IFilter {\n    constructor(options, manager) {\n        this.options = options;\n        this._manager = manager;\n        const parsed = parseConditions(options.condition);\n        this._conditions = parsed.conditions || [];\n        this._values = parsed.values || [];\n        this.valueFunction = options.valueFunction;\n    }\n\n    get manager() {\n        return this._manager;\n    }\n\n    get column() {\n        return this.options.column;\n    }\n\n    get dataField() {\n        return this.column.dataField;\n    }\n\n    get collection() {\n        return this.options.collection;\n    }\n\n    /**\n     * 비교 데이타가 있는지 여부\n     * @returns {boolean}\n     */\n    get canCompare() {\n        return this._values != null;\n    }\n\n    /**\n     * 조건 입력\n     * @returns {Array|null}\n     */\n    getConditions() {\n        return this._conditions;\n    }\n\n    /**\n     *\n     * @param  {Array} value\n     * @returns {boolean}\n     */\n    setConditions(value) {\n        if (this._conditions !== value) {\n            this._conditions = value || [];\n            return true;\n        }\n        return false;\n    }\n\n    getValues() {\n        return this._values || [];\n    }\n\n    /**\n     *\n     * @param  {Array} value\n     * @returns {boolean}\n     */\n    setValues(value) {\n        if (this._values !== value) {\n            this._values = value || [];\n            return true;\n        }\n        return false;\n    }\n\n    itemToValue(item) {\n        const result = this.column.itemToValue(item);\n        if (this.valueFunction) {\n            return this.valueFunction(result);\n        }\n        return result;\n    }\n\n    compare(item) {\n        return true;\n    }\n\n    compareOtherFilters(item) {\n        return !this.manager.filters.some(filter => filter !== this && filter.canCompare && !filter.compare(item));\n    }\n\n    refresh() {\n        this.manager.refresh();\n    }\n}\n\n/**\r\n * 해딩 필드의\r\n */\r\n\r\nclass SetFilter extends IFilter {\r\n    constructor(options, manager) {\r\n        super(options, manager);\r\n        /**\r\n         *\r\n         * @type {Set | Null}\r\n         */\r\n        this.filterValueSet = null;\r\n    }\r\n\r\n    get canCompare() {\r\n        const numValues = this.getValues().length;\r\n        if (numValues <= 0 || (this._possibleValues || []).length === numValues) {\r\n            return false;\r\n        }\r\n        return super.canCompare;\r\n    }\r\n\r\n    itemToValue(item) {\r\n        return valueToString(super.itemToValue(item));\r\n    }\r\n\r\n    getPossibleValues() {\r\n        const collection = this.collection;\r\n        if (collection && !this._possibleValues) {\r\n            const set = new Set();\r\n            //원 소스(배열)전체 탐색\r\n            collection.forEach(item => {\r\n                const value = this.itemToValue(item);\r\n                if (!set.has(value)) {\r\n                    set.add(value);\r\n                }\r\n            });\r\n\r\n            this._possibleValues = Array.from(set);\r\n        }\r\n        return this._possibleValues;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @param value {Array}\r\n     */\r\n    setValues(value) {\r\n        if (super.setValues(value)) {\r\n            this.filterValueSet = new Set(value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    compare(item) {\r\n        return this.filterValueSet && this.filterValueSet.has(this.itemToValue(item));\r\n    }\r\n}\n\nfunction compareAB(condition, a, b, ignore = false) {\n    return !condition || condition(a, b, ignore);\n}\n\nclass RangeFilter extends IFilter {\n    constructor(options, manager) {\n        super(options, manager);\n    }\n\n    get canCompare() {\n        return (this.fromCondition != null && this.fromValue != null) || (this.toCondition != null && this.toValue != null)\n    }\n\n    get fromCondition() {\n        return this._conditions[0];\n    }\n\n    get toCondition() {\n        return this._conditions[1];\n    }\n\n    get fromValue() {\n        return this._values[0];\n    }\n\n    get toValue() {\n        return this._values[1];\n    }\n\n    setConditions(values) {\n        values = values && values.map(value => {\n            if (value instanceof Function) {\n                return value;\n            }\n            const operator = getOperator(value.toLowerCase());\n            return operator && operator.compare;\n        });\n        return super.setConditions(values);\n    }\n\n    compare(item) {\n        const source = this.itemToValue(item);\n        let fromResult = true;\n        if (this.fromCondition && this.fromValue) {\n            fromResult = compareAB(this.fromCondition, source, this.fromValue, true);\n        }\n\n        if (this.toCondition && this.toValue) {\n            const operator = this.options.condition.operator;\n            if (operator === 'and' && !fromResult) {\n                return false;\n            } else if (operator !== 'and' && fromResult) {\n                return true;\n            }\n            return compareAB(this.toCondition, source, this.toValue, true);\n        }\n\n        return fromResult;\n    }\n}\n\nclass NumberFilter extends RangeFilter {\n    constructor(options, manager) {\n        super(options, manager);\n    }\n\n    itemToValue(item) {\n        return valueToNumber(super.itemToValue(item));\n    }\n}\n\nclass DateFilter extends RangeFilter {\n    constructor(options, manager) {\n        super(options, manager);\n    }\n}\n\nclass TextFilter extends RangeFilter {\n    constructor(options, manager) {\n        super(options, manager);\n    }\n\n    get canCompare() {\n        return !!((this.fromCondition != null && this.fromValue) || (this.toCondition != null && this.toValue));\n    }\n\n    itemToValue(item) {\n        return valueToString(super.itemToValue(item));\n    }\n}\n\nclass FuncFilter extends IFilter {\n    constructor(callback, options, manager) {\n        super(options, manager);\n        this.callback = callback;\n    }\n\n    /**\n     * 비교 데이타가 있는지 여부\n     * @returns {boolean}\n     */\n    get canCompare() {\n        return this.callback instanceof Function;\n    }\n\n    compare(item) {\n        return this.callback(item, this.options.column);\n    }\n}\n\nclass FilterManager {\r\n    constructor(grid) {\r\n        this.grid = grid;\r\n        this.filters = [];\r\n        this.filterMap = new Map();\r\n        grid.addEventListener('collection-change', this.onCollectionChange.bind(this));\r\n        grid.addEventListener('column-collection-change', this.onColumnCollectionChange.bind(this));\r\n    }\r\n\r\n    get collection() {\r\n        return this.grid.collection;\r\n    }\r\n\r\n    getFilter(column) {\r\n        return this.filterMap.get(column);\r\n    }\r\n\r\n    /**\r\n     * 필터 생성\r\n     * @param column\r\n     * @returns {null|*}\r\n     */\r\n    createFilter(column) {\r\n        const options = column.filter;\r\n        if (!options) {\r\n            return null;\r\n        }\r\n\r\n        if (options instanceof Function) {\r\n            return new FuncFilter(options, {\r\n                collection: this.grid.collection,\r\n                column: column,\r\n            }, this);\r\n        }\r\n\r\n        if (!column.dataField) {\r\n            console.warn('`dataField` is not defined', options);\r\n            return null;\r\n        }\r\n\r\n        let factory;\r\n        switch (options.type) {\r\n            case 'set' :\r\n                factory = SetFilter;\r\n                break;\r\n            case 'number':\r\n                factory = NumberFilter;\r\n                break;\r\n            case 'date':\r\n                factory = DateFilter;\r\n                break;\r\n            default:\r\n                factory = TextFilter;\r\n                break;\r\n        }\r\n\r\n        return new factory({\r\n            ...options,\r\n            collection: this.grid.collection,\r\n            column: column,\r\n        }, this);\r\n    }\r\n\r\n    addFilter(column, filter) {\r\n        this.filters.push(filter);\r\n        this.filterMap.set(column, filter);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    refresh() {\r\n        const collection = this.grid.collection;\r\n        if (!collection) {\r\n            return false;\r\n        }\r\n        const activeFilters = this.filters.filter(filter => filter.canCompare);\r\n        let filter = null;\r\n        if (activeFilters.length > 0) {\r\n            const executeFilter = item => {\r\n                for (let i = 0, num = activeFilters.length; i < num; i++) {\r\n                    if (!activeFilters[i].compare(item)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            };\r\n\r\n            filter = item => executeFilter(item);\r\n        }\r\n\r\n        if (collection.filterFunction !== filter) {\r\n            collection.filterFunction = filter;\r\n            collection.refresh();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 필터 리셋\r\n     */\r\n    reset(isRecycle = false) {\r\n        let oldMap = this.filterMap;\r\n        this.clear();\r\n        this.grid.normalizedColumns.forEach(column => {\r\n            let filter = null;\r\n            if (isRecycle) {\r\n                filter = oldMap.get(column);\r\n            }\r\n\r\n            if(!filter){\r\n                filter= this.createFilter(column);\r\n            }\r\n\r\n            if (filter) {\r\n                this.addFilter(column, filter);\r\n            }\r\n        });\r\n        this.refresh();\r\n    }\r\n\r\n    clear() {\r\n        this.filters = [];\r\n        this.filterMap = new Map();\r\n    }\r\n\r\n    onCollectionChange(event) {\r\n        if (event.detail.kind === 'reset') {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    onColumnCollectionChange(event) {\r\n        if (event.detail.kind === 'reset') {\r\n            this.reset(true);\r\n        }\r\n    }\r\n}\r\n\r\nconst Filterable = {\r\n    constructor() {\r\n        this._filterManager = new FilterManager(this);\r\n    },\r\n    get filterManager() {\r\n        return this._filterManager;\r\n    },\r\n};\n\nclass IAddon {\r\n    constructor(name, grid) {\r\n        this._grid = grid;\r\n        this._name = name;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get grid() {\r\n        return this._grid;\r\n    }\r\n\r\n    created(grid) {\r\n    }\r\n\r\n    updating() {\r\n    }\r\n\r\n    update() {\r\n    }\r\n}\r\n\r\nconst addons = {};\r\n\r\nfunction getAddons() {\r\n    return Object.keys(addons).map(k => addons[k]);\r\n}\r\n\r\nfunction createFactory(name, data) {\r\n    const Addon = class Addon extends IAddon {\r\n        constructor(grid) {\r\n            super(name, grid);\r\n        }\r\n    };\r\n\r\n    mixin(Addon.prototype, data, false);\r\n    return Addon\r\n}\r\n\r\nfunction get$1(name) {\r\n    return name ? addons[name] : null;\r\n}\r\n\r\nfunction add$1(name, data) {\r\n    let factory = null;\r\n    if (name) {\r\n        factory = addons[name] = createFactory(name, data);\r\n    }\r\n    return factory;\r\n}\r\n\r\nfunction remove$1(name) {\r\n    if (name in addons) {\r\n        delete addons[name];\r\n    }\r\n}\n\nvar addon = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    IAddon: IAddon,\n    add: add$1,\n    createFactory: createFactory,\n    get: get$1,\n    getAddons: getAddons,\n    remove: remove$1\n});\n\nclass AddonHelper {\n    constructor(grid) {\n        this.grid = grid;\n        this._addons = getAddons().map(f => this._createAddon(f));\n        const boundDataGroupRender = this._onDataGroupRender.bind(this);\n        grid.addEventListener('render-updating', boundDataGroupRender);\n        grid.addEventListener('render-update', boundDataGroupRender);\n    }\n\n    getAddons() {\n        return this._addons.slice(0);\n    }\n\n    getAddon(name) {\n        return this._addons.find(addon => addon.name === name);\n    }\n\n    addAddon(name, scope) {\n        if (!name) {\n            return;\n        }\n        if (this.getAddon(name)) {\n            throw new Error(`'${name}' has already been taken`);\n        }\n        const factory = add$1(name, scope);\n        this._addons.push(this._createAddon(factory));\n    }\n\n    /**\n     * addon 인스턴스를 생성합니다.\n     * @param factory\n     * @returns {*}\n     * @private\n     */\n    _createAddon(factory) {\n        const addon = new factory(this.grid);\n        callHook(addon, 'created', this.grid);\n        return addon;\n    }\n\n    _onDataGroupRender(event) {\n        switch (event.type) {\n            case 'render-updating':\n                this._addons.forEach(addon => {\n                    addon.updating(this.grid);\n                });\n                break;\n            case 'render-update':\n                this._addons.forEach(addon => {\n                    addon.update(this.grid);\n                });\n                break;\n        }\n    }\n}\n\nconst theme = {};\n\nfunction get(name) {\n    return name ? theme[name] : null;\n}\n\nfunction add(name, data) {\n    if (name && 'css' in data && 'canvasStyle' in data) {\n        theme[name] = data;\n    }\n}\n\nfunction remove(name) {\n    if (name in theme) {\n        delete theme[name];\n        //모든 그리드 갱신 필요!!!\n    }\n}\n\nvar theme$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    add: add,\n    get: get,\n    remove: remove\n});\n\nconst HEADER_EVENTS = ['header-double-click', 'header-down', 'header-up', 'header-click', 'header-drag', 'header-out', 'header-over'];\r\n\r\nconst HEADER_SEPARATOR_EVENTS = ['separator-over', 'separator-out', 'separator-down', 'separator-drag', 'separator-up', 'separator-click', 'separator-double-click'];\r\n\r\nconst HEADER_ALL_EVENTS = [].concat(HEADER_EVENTS, HEADER_SEPARATOR_EVENTS);\r\n\r\nconst ITEM_EVENTS = ['item-over', 'item-out', 'item-down', 'item-up', 'item-drag', 'item-click', 'item-double-click',];\r\n\r\nconst DATA_GROUP_EVENTS = ITEM_EVENTS.concat(['collection-change', 'column-collection-change', 'column-node-change', 'normalized-columns-change',\r\n    'selection-changing', 'selection-change',\r\n    'item-edit-starting', 'item-edit-start', 'item-edit-ending', 'item-edit-end', 'item-edit-cancel',\r\n    'render-updating', 'render-update',]);\r\n\r\nconst PRIORITY = {\r\n    'headerRenderer': -200, 'mergeItemRenderer': -100, 'itemRenderer': -100, 'columns': 100, 'items': 200\r\n};\r\n\r\nfunction prioritySortFunction(a, b) {\r\n    const aPriority = PRIORITY[a] || 0;\r\n    const bPriority = PRIORITY[b] || 0;\r\n    if (aPriority < bPriority) {\r\n        return -1;\r\n    }\r\n    if (aPriority > bPriority) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getSortFunction(type) {\r\n    if (type === 'number') {\r\n        return numericCompare;\r\n    } else if (type === 'string') {\r\n        return stringCompare;\r\n    } else {\r\n        return stringCompare;\r\n    }\r\n}\r\n\r\nfunction isValidDropColumn(source, leafColumn, isNext) {\r\n\r\n    if (source.level >= leafColumn.level) {\r\n        return source.parent === leafColumn.parent;\r\n    }\r\n\r\n    let active = leafColumn;\r\n    let activeParent = leafColumn.parent;\r\n    while (activeParent) {\r\n        if ((source.level - 1 === activeParent.level && source.parent === activeParent)) {\r\n            return true;\r\n        } else {\r\n\r\n            //부모노드\r\n            //0 인덱스와 마지막 인덱스만 비교(숨겨져 있는 컬럼은 스킵)\r\n            let children = activeParent.children;\r\n            let numChildren = children ? children.length : 0;\r\n            let childIndex = numChildren > 0 ? children.indexOf(active) : -1;\r\n            let i, child, index;\r\n\r\n            for (i = 0; i < numChildren; i++) {\r\n                index = isNext ? numChildren - i - 1 : i;\r\n                child = children[index];\r\n\r\n                if (!child.visible) {\r\n                    continue;\r\n                }\r\n                if (index !== childIndex || source.level === child.level) {\r\n                    return false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        active = activeParent;\r\n        activeParent = activeParent.parent;\r\n    }\r\n    return true;\r\n}\r\n\r\nclass DataGrid extends Element$1 {\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * 그리드 셀을 편집할 수 있는지를 나타냅니다\r\n         */\r\n        this.editable = false;\r\n        /**\r\n         * 키 입력시 편집할 수 있는 키 목록입니다.\r\n         */\r\n        this.editOnKeys = defaultConfig.editOnKeys;\r\n        /**\r\n         * 편집 활성화할수 있는 이벤트 목록입니다.\r\n         */\r\n        this.editOnEvents = ['doubleClick'];\r\n\r\n        /**\r\n         * 아이템 드래그시 항목 선택 여부입니다.\r\n         */\r\n        this.selectOnDrag = true;\r\n\r\n        /**\r\n         * 멀티 정렬 여부입니다.\r\n         * @type {boolean}\r\n         */\r\n        this.multiSortable = false;\r\n        this.pasteFromClipboard = true;\r\n\r\n        this._resizableColumns = true;\r\n        this._draggableColumns = true;\r\n        this._sortableColumns = true;\r\n        this._labelFunction = null;\r\n        this._rowCount = -1;\r\n        this._maxRowCount = -1;\r\n        this._dragScrollId = -1;\r\n        this._dragScrollDelta = null;\r\n        this._sortColumns = [];\r\n        this._dragColumnInfo = null;\r\n        this._dropColumnInfo = null;\r\n        this._dragCanceled = false;\r\n        this._theme = null;\r\n        this._oldWidth = 0;\r\n        this._oldHeight = 0;\r\n\r\n        this._gridEditor = new DataGridEditor(this);\r\n        this._itemEditor = defaultConfig.itemEditor || defaultItemEditor;\r\n        this._boundDoLayout = this.doLayout.bind(this);\r\n\r\n        this._defaultStyles = mixin({}, defaultConfig.styles);\r\n\r\n        const dataGroup = this._dataGroup = this.createDataGroup();\r\n        const headerGroup = this._headerGroup = this.createHeaderGroup();\r\n        const scroller = this._scroller = new Scroller(dataGroup);\r\n\r\n        this.appendChild(headerGroup);\r\n        this.appendChild(scroller);\r\n\r\n        this._sizeDetector = new ResizeObserver((entries, observer) => {\r\n            this._onResize();\r\n        });\r\n        this._sizeDetector.observe(this.root);\r\n        this._addonHelper = new AddonHelper(this);\r\n\r\n        const boundHeaderEvents = this._onHeaderEvents.bind(this);\r\n        HEADER_EVENTS.forEach(type => headerGroup.addEventListener(type, boundHeaderEvents));\r\n\r\n        const boundHeaderSeparatorEvents = this._onHeaderSeparatorEvents.bind(this);\r\n        HEADER_SEPARATOR_EVENTS.forEach(type => headerGroup.addEventListener(type, boundHeaderSeparatorEvents));\r\n\r\n        const boundRedispatch = this._redispatch.bind(this);\r\n        HEADER_ALL_EVENTS.forEach(type => headerGroup.addEventListener(type, boundRedispatch));\r\n        DATA_GROUP_EVENTS.forEach(type => dataGroup.addEventListener(type, boundRedispatch));\r\n        scroller.addEventListener('scroll', boundRedispatch, {passive: true});\r\n\r\n        this.addEventListener('keydown', this._onKeyDown.bind(this));\r\n        dataGroup.addEventListener('item-down', this._onItemDown.bind(this));\r\n    }\r\n\r\n    /**\r\n     * 기본 스타일 정의\r\n     * @returns defaults.styles|{backgroundColor, font, color, textAlign, verticalAlign, rowHeight, headerRowHeight, rowLineColor, rowLineWidth, rowColors, columnLineColor, columnLineWidth, columnLineStyle, frozenLineColor, frozenLineWidth, frozenLineStyle, cellSelectionColor, cellOverColor, textSelectionColor, textOverColor, caretLineColor, caretLineWidth, cellPadding, headerRowLineColor, headerRowLineWidth, headerColumnLineColor, headerColumnLineWidth}}\r\n     * @private\r\n     */\r\n    get defaultStyles() {\r\n        return this._defaultStyles;\r\n    }\r\n\r\n    /**\r\n     * 데이타 그리드의 헤더영역 인스턴스입니다.\r\n     * @returns {*}\r\n     */\r\n    get headerGroup() {\r\n        return this._headerGroup;\r\n    }\r\n\r\n    /**\r\n     * 데이타 그리드의 데이타 영역 인스턴스입니다.\r\n     * @returns {*}\r\n     */\r\n    get dataGroup() {\r\n        return this._dataGroup;\r\n    }\r\n\r\n    get selector() {\r\n        return this.dataGroup.selector;\r\n    }\r\n\r\n    /**\r\n     * 그리드의 행에 표시되는 데이터 목록을 관리합니다.\r\n     * 이 속성은 ArrayList 타입입니다.\r\n     * 이를 사용하면 행추가, 삭제, 수정, 이동이 가능합니다.\r\n     * @returns {ArrayList}\r\n     */\r\n    get collection() {\r\n        return this.dataGroup.collection;\r\n    }\r\n\r\n    get columnCollection() {\r\n        return this.dataGroup.columnCollection;\r\n    }\r\n\r\n    /**\r\n     * 그리드 행에 표시되는 데이타 목록입니다.\r\n     * @returns {Array}\r\n     */\r\n    get items() {\r\n        return this.collection && this.collection.source;\r\n    }\r\n\r\n    set items(value) {\r\n        if (value && !Array.isArray(value)) {\r\n            console.warn('`items` must be an array.', value);\r\n            return;\r\n        }\r\n\r\n        if (this.items !== value) {\r\n            this.dataGroup.collection = this.createCollection(value);\r\n            this.doLayout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 그리드 헤더에 표시되는 컬럼목록입니다.\r\n     * 명시적으로 설정하지 않는 경우 items의 첫번째 항목의 해당 속성들로 표시합니다.\r\n     * @returns {Array}\r\n     */\r\n    get columns() {\r\n        return this.columnCollection && this.columnCollection.source;\r\n    }\r\n\r\n    set columns(value) {\r\n        if (this.columns !== value) {\r\n            this.dataGroup.columnCollection = new ColumnCollection(value);\r\n            this.doLayout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get normalizedColumns() {\r\n        return this.dataGroup.normalizedColumns;\r\n    }\r\n\r\n    /**\r\n     * 셀 텍스트를 결정하는 콜백 함수입니다.\r\n     * 기본적으로 각 셀의 텍스트는 그 셀이 속한 컬럼의 `dataField`와 일치하는 아이템 객체의 프로퍼티 값으로 설정됩니다.\r\n     * `labelFunction` 사용시 사용자가 지정한 값으로 설정할 수 있습니다.\r\n     * 그러나, 컬럼 자체에 `labelFunction`이 이미 정의되어 있다면, 해당 컬럼의 `labelFunction`이 우선적으로 사용되며 이 메소드는 무시됩니다.\r\n     * ```\r\n     * labelFunction (item : Object, column : DataGridColumn) : String{\r\n     *      return item[column.dataField] + '%';\r\n     * }\r\n     * ```\r\n     */\r\n    get labelFunction() {\r\n        return this._labelFunction;\r\n    }\r\n\r\n    set labelFunction(value) {\r\n        if (this._labelFunction !== value) {\r\n            this._labelFunction = value;\r\n            this.dataGroup.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 헤더 셀을 구성하는 클래스 팩토리입니다.\r\n     */\r\n    get headerRenderer() {\r\n        return this._headerGroup.headerRenderer;\r\n    }\r\n\r\n    set headerRenderer(value) {\r\n        this._headerGroup.headerRenderer = value;\r\n    }\r\n\r\n    /**\r\n     * 데이타 셀을 구성하는 클래스 팩토리입니다.\r\n     * @param Object || Function\r\n     */\r\n    get itemRenderer() {\r\n        return this.dataGroup.itemRenderer;\r\n    }\r\n\r\n    set itemRenderer(value) {\r\n        this.dataGroup.itemRenderer = value;\r\n    }\r\n\r\n    /**\r\n     * 병합된 셀을 구성하는 클래스 팩토리입니다.\r\n     */\r\n    get mergeItemRenderer() {\r\n        return this.dataGroup.mergeItemRenderer;\r\n    }\r\n\r\n    set mergeItemRenderer(value) {\r\n        this.dataGroup.mergeItemRenderer = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * 빈값을 가진(null) 셀을 구성하는 클래스 팩토리입니다.\r\n     */\r\n    get nullItemRenderer() {\r\n        return this.dataGroup.nullItemRenderer;\r\n    }\r\n\r\n    set nullItemRenderer(value) {\r\n        this.dataGroup.nullItemRenderer = value;\r\n    }\r\n\r\n    /**\r\n     * nullItemRenderer 사용 여부입니다.\r\n     */\r\n    get useNullItemRenderer() {\r\n        return this.dataGroup.useNullItemRenderer;\r\n    }\r\n\r\n    set useNullItemRenderer(value) {\r\n        this.dataGroup.useNullItemRenderer = value;\r\n    }\r\n\r\n    get itemEditor() {\r\n        return this._itemEditor || defaultConfig.defaultItemEditor;\r\n    }\r\n\r\n    set itemEditor(value) {\r\n        this._itemEditor = value;\r\n    }\r\n\r\n    /**\r\n     * `ScrollLeft` 최대값입니다.\r\n     * @returns {number}\r\n     */\r\n    get maxScrollLeft() {\r\n        return this._scroller.maxScrollLeft;\r\n    }\r\n\r\n    /**\r\n     * `scrollTop` 최대값입니다.\r\n     * @returns {number}\r\n     */\r\n    get maxScrollTop() {\r\n        return this._scroller.maxScrollTop;\r\n    }\r\n\r\n    /**\r\n     * 수평 스크롤 위치값입니다.\r\n     * @returns {number}\r\n     */\r\n    get scrollLeft() {\r\n        return this.dataGroup.scrollLeft || 0;\r\n    }\r\n\r\n    set scrollLeft(value) {\r\n        this.dataGroup.scrollLeft = value;\r\n    }\r\n\r\n    /**\r\n     * 수직 스크롤 위치값입니다.\r\n     * @returns {number}\r\n     */\r\n    get scrollTop() {\r\n        return this.dataGroup.scrollTop || 0;\r\n    }\r\n\r\n    set scrollTop(value) {\r\n        this.dataGroup.scrollTop = value;\r\n    }\r\n\r\n    /**\r\n     *  GridColumn.isColumnMerge 및 GridColumn.isRowMerge 설정에 따라 동일한 데이터를 가진 연속적인 셀들을 자동으로 병합하는 기능을 제어합니다.\r\n     */\r\n    get autoMerge() {\r\n        return this.dataGroup.autoMerge;\r\n    }\r\n\r\n    set autoMerge(value) {\r\n        this.dataGroup.autoMerge = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * 컬럼이 정의되지 않았을 때 `items` 첫 번째 아이템 구조를 기준으로 컬럼을 자동으로 생성하는 기능을 제어합니다.\r\n     */\r\n    get autoGenerateColumns() {\r\n        return this.dataGroup.autoGenerateColumns;\r\n    }\r\n\r\n    set autoGenerateColumns(value) {\r\n        this.dataGroup.autoGenerateColumns = value;\r\n    }\r\n\r\n    /**\r\n     * 행의 기본 높이를 지정합니다.\r\n     * autoRowHeight가 `false` 일 경우에 한합니다.\r\n     * @returns {number}\r\n     */\r\n    get rowHeight() {\r\n        return this.dataGroup.rowHeight;\r\n    }\r\n\r\n    set rowHeight(value) {\r\n        this.dataGroup.rowHeight = value;\r\n    }\r\n\r\n    /**\r\n     * 헤더 셀의 높이를 지정합니다.\r\n     * 컬럼이 계층구조 일 경우 헤더 높이는 계층 최대 깊이 * headerRowHeight 립니다.\r\n     * @returns {number}\r\n     */\r\n    get headerRowHeight() {\r\n        return this._headerGroup.headerRowHeight;\r\n    }\r\n\r\n    set headerRowHeight(value) {\r\n        this._headerGroup.headerRowHeight = value;\r\n    }\r\n\r\n    /**\r\n     * 행의 높이를 구하는 기준을 지정합니다.\r\n     * `true` 경우 각 행의 셀 렌더러의 최대 높이가 행의 높이가 됩니다.\r\n     * `false` 경우 rowHeight 속성의 값이 됩니다.\r\n     * @returns {boolean}\r\n     */\r\n    get autoRowHeight() {\r\n        return this.dataGroup.autoRowHeight;\r\n    }\r\n\r\n    set autoRowHeight(value) {\r\n        this.dataGroup.autoRowHeight = value;\r\n    }\r\n\r\n    /**\r\n     * 그리드의 표현되는 최대 행의 수를 설정합니다.\r\n     * @returns {number}\r\n     */\r\n    get maxRowCount() {\r\n        return this.dataGroup.maxRowCount;\r\n    }\r\n\r\n    set maxRowCount(value) {\r\n        this.dataGroup.maxRowCount = +value;\r\n    }\r\n\r\n    /**\r\n     * 그리드의 표현되는 행의 수를 설정합니다.\r\n     * @returns {number}\r\n     */\r\n    get rowCount() {\r\n        return this.dataGroup.rowCount;\r\n    }\r\n\r\n    set rowCount(value) {\r\n        if (this.rowCount !== value) {\r\n            this.dataGroup.rowCount = +value;\r\n            this.doLayout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 좌를 기준으로 행을 고정합니다.\r\n     * 수평스크롤에 영향을 받지 않습니다.\r\n     * @returns {number}\r\n     */\r\n    get frozenLeft() {\r\n        return this.dataGroup.frozenLeft;\r\n    }\r\n\r\n    set frozenLeft(value) {\r\n        this.dataGroup.frozenLeft = value;\r\n    }\r\n\r\n    /**\r\n     * 우를 기준으로 행을 고정합니다.\r\n     * 수평 스크롤에 영향을 받지 않습니다.\r\n     * @returns {number}\r\n     */\r\n    get frozenRight() {\r\n        return this.dataGroup.frozenRight;\r\n    }\r\n\r\n    set frozenRight(value) {\r\n        this.dataGroup.frozenRight = value;\r\n    }\r\n\r\n    /**\r\n     * 위를 기준으로 행을 고정합니다.\r\n     * 수직스크롤에 영향을 받지 않습니다.\r\n     * @returns {number}\r\n     */\r\n    get frozenTop() {\r\n        return this.dataGroup.frozenTop;\r\n    }\r\n\r\n    set frozenTop(value) {\r\n        this.dataGroup.frozenTop = value;\r\n    }\r\n\r\n    /**\r\n     * 아래를 기준으로 행을 고정합니다.\r\n     * 수직스크롤에 영향을 받지 않습니다.\r\n     * @returns {number}\r\n     */\r\n    get frozenBottom() {\r\n        return this.dataGroup.frozenBottom;\r\n    }\r\n\r\n    set frozenBottom(value) {\r\n        this.dataGroup.frozenBottom = value;\r\n    }\r\n\r\n    /**\r\n     * 자동 병합시 병합영역을 체크하는 함수입니다.\r\n     * compareFunction(targetItem, targetColumn, sourceItem, sourceColumn)\r\n     * @returns {function}\r\n     */\r\n    get mergeCompare() {\r\n        return this.dataGroup.mergeCompare;\r\n    }\r\n\r\n    set mergeCompare(value) {\r\n        this.dataGroup.mergeCompare = value;\r\n    }\r\n\r\n    /**\r\n     * 컬럼의 정렬기능 사용여부입니다.\r\n     * @returns {*}\r\n     */\r\n    get sortableColumns() {\r\n        return this._sortableColumns;\r\n    }\r\n\r\n    set sortableColumns(value) {\r\n        if (this._sortableColumns !== value) {\r\n            this._sortableColumns = value;\r\n            if (!value) {\r\n                this.sortByColumns(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  컬럼의 너비를 변경 가능한지 여부입니다.\r\n     *  @returns {boolean}\r\n     */\r\n    get resizableColumns() {\r\n        return this._resizableColumns;\r\n    }\r\n\r\n    set resizableColumns(value) {\r\n        if (this._resizableColumns !== value) {\r\n            this._resizableColumns = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 컬럼의 순서를 변경가능한지 여부입니다.\r\n     * 해당 속성이 true이고 드래그 대상 컬럼의 draggableColumn속성이 true인 경우 컬럼을 드래그하여 이동 할 수 있습니다.\r\n     * @returns {boolean}\r\n     */\r\n    get draggableColumns() {\r\n        return this._draggableColumns;\r\n    }\r\n\r\n    set draggableColumns(value) {\r\n        if (this._draggableColumns !== value) {\r\n            this._draggableColumns = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 헤더 드래그 중인지 여부입니다.\r\n     */\r\n    get isHeaderDragging() {\r\n        return this._dragColumnInfo != null;\r\n    }\r\n\r\n    get hasVerticalScroll() {\r\n        return this._scroller.hasVerticalScroll;\r\n    }\r\n\r\n    get hasHorizontalScroll() {\r\n        return this._scroller.hasHorizontalScroll;\r\n    }\r\n\r\n    /**\r\n     * 아이템렌더러, 헤더 렌더러가 해제(삭제)될 때 콜백됩니다.\r\n     * 반환값이 'false' 이면 해당렌더러는 재사용 되지 않습니다.\r\n     */\r\n    get hookFreeElement() {\r\n        return this._hookFreeElement;\r\n    }\r\n\r\n    set hookFreeElement(value) {\r\n        if (this._hookFreeElement !== value) {\r\n            this._hookFreeElement = this.dataGroup.hookFreeElement = this.headerGroup.hookFreeElement = value;\r\n        }\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Selection\r\n    //\r\n    //-------------------------------------------------\r\n\r\n    get selectionMode() {\r\n        return this.dataGroup.selectionMode || '';\r\n    }\r\n\r\n    set selectionMode(value) {\r\n        if (this.selectionMode !== value) {\r\n            this.dataGroup.clearSelection();\r\n            this.dataGroup.selectionMode = value;\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 선택된 아이템의 인덱스를 설정하거나 가져옵니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 처음 선택된 행 인덱스가 반환됩니다.\r\n     */\r\n    get selectedIndex() {\r\n        return this.dataGroup.selectedIndex;\r\n    }\r\n\r\n    set selectedIndex(index) {\r\n        this.dataGroup.selectedIndex = index;\r\n    }\r\n\r\n    /**\r\n     * 선택된 아이템를 설정합니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 처음 선택된 항목이 반환됩니다.\r\n     */\r\n    get selectedItem() {\r\n        return this.dataGroup.selectedItem;\r\n    }\r\n\r\n    set selectedItem(item) {\r\n        this.dataGroup.selectedItem = item;\r\n    }\r\n\r\n    /**\r\n     * 복수로 선택된 아이템의 인덱스 목록을 설정합니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 선택된 인덱스 배열이 반환됩니다.\r\n     */\r\n    get selectedIndices() {\r\n        return this.dataGroup.selectedIndices;\r\n    }\r\n\r\n    set selectedIndices(indices) {\r\n        this.dataGroup.selectedIndices = indices;\r\n    }\r\n\r\n    /**\r\n     * 복수로 선택된 아이템을 설정합니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 선택된 항목의 배열이 반환됩니다.\r\n     */\r\n    get selectedItems() {\r\n        return this.dataGroup.selectedItems;\r\n    }\r\n\r\n    set selectedItems(items) {\r\n        this.dataGroup.selectedItems = items;\r\n    }\r\n\r\n    /**\r\n     * 선택된 셀을 설정합니다.\r\n     */\r\n    get selectedCell() {\r\n        return this.dataGroup.selectedCell;\r\n    }\r\n\r\n    set selectedCell(cell) {\r\n        this.dataGroup.selectedCell = cell;\r\n    }\r\n\r\n    /**\r\n     * 복수로 선택된 셀을 설정합니다.\r\n     */\r\n    get selectedCells() {\r\n        return this.dataGroup.selectedCells;\r\n    }\r\n\r\n    set selectedCells(cells) {\r\n        this.dataGroup.selectedCells = cells;\r\n    }\r\n\r\n    /**\r\n     * caret 행 인덱스입니다.\r\n     */\r\n    get caretRowIndex() {\r\n        return this.dataGroup.caretRowIndex;\r\n    }\r\n\r\n    set caretRowIndex(index) {\r\n        this.dataGroup.caretRowIndex = index;\r\n    }\r\n\r\n    /**\r\n     * caret 컬럼 인덱스입니다.\r\n     */\r\n    get caretColumnIndex() {\r\n        return this.dataGroup.caretColumnIndex;\r\n    }\r\n\r\n    set caretColumnIndex(index) {\r\n        this.dataGroup.caretColumnIndex = index;\r\n    }\r\n\r\n    /**\r\n     * 지정된 이름으로 테마를 적용합니다..\r\n     * `theme.add` 이용해 테마를 등록 후 테마를 사용할수 있습니다.\r\n     * ```\r\n     * tachyon.theme.add('themeA', {\r\n     *     css: 'themeA',\r\n     *     canvasStyle: {\r\n     *         backgroundColor: '#999900',\r\n     *         rowLine: {\r\n     *             width: 1,\r\n     *             color: '#FF0000',\r\n     *             dashed: []\r\n     *         },\r\n     *         ...\r\n     *     }\r\n     * })\r\n     * ```\r\n     */\r\n    get theme() {\r\n        return this._theme;\r\n    }\r\n\r\n    set theme(value) {\r\n        if (this._theme !== value) {\r\n            this.releaseTheme();\r\n            this._theme = value;\r\n            if (value) {\r\n                this.applyTheme();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param item\r\n     * @param column\r\n     * @returns {*|*|*|*}\r\n     */\r\n    itemToLabel(item, column) {\r\n        return this.dataGroup.itemToLabel(item, column);\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   addons\r\n    //\r\n    //-------------------------------------------------\r\n    /**\r\n     * addons\r\n     * @returns {Array}\r\n     */\r\n    getAddons() {\r\n        return this._addonHelper.getAddons();\r\n    }\r\n\r\n    /**\r\n     * 지정된 이름에 해당하는 애드온 컴포넌트를 반환합니다.\r\n     */\r\n    getAddon(name) {\r\n        return this._addonHelper.getAddon(name);\r\n    }\r\n\r\n    addAddon(name, value) {\r\n        this._addonHelper.addAddon(name, value);\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Columns\r\n    //\r\n    //-------------------------------------------------\r\n\r\n    /**\r\n     * 부모 컬럼에 자식 컬럼을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param column 추가할 자식 컬럼\r\n     * @returns {boolean}\r\n     */\r\n    addColumn(parent, column) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.addNode(parent, column);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 컬럼을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param column 추가할 자식 컬럼.\r\n     * @param index 자식 컬럼 삽입 위치의 인덱스.\r\n     * @returns {boolean}\r\n     */\r\n    addColumnAt(parent, column, index) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.addNodeAt(parent, column, index);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 부모 컬럼에 자식 컬럼을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param columns 추가할 자식 컬럼 목록\r\n     * @returns {boolean}\r\n     */\r\n    addColumns(parent, columns) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.addNodes(parent, columns);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 컬럼목록을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param columns 추가할 자식 컬럼 목록\r\n     * @param index 자식 컬럼 삽입 위치의 인덱스.\r\n     * @returns {boolean}\r\n     */\r\n    addColumnsAt(parent, columns, index) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.addNodesAt(parent, columns, index);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 부모 컬럼에서 자식 컬럼을 삭제합니다.\r\n     * @param parent 부모 노드입니다.\r\n     * @param column 삭제할 자식 컬럼 입니다.\r\n     * @returns {boolean}\r\n     */\r\n    removeColumn(parent, column) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.removeNode(parent, column);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 부모 컬럼에서 자식 컬럼을 삭제합니다.\r\n     * @param parent 부모 노드입니다.\r\n     * @param columns 삭제할 컬럼 목록 입니다.\r\n     * @returns {boolean}\r\n     */\r\n    removeColumns(parent, columns) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.removeNodes(parent, columns);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    moveColumn(column, toParent, toIndex) {\r\n        if (this.columnCollection) {\r\n            return this.columnCollection.moveNode(column, toParent, toIndex);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //  Dimension\r\n    //\r\n    //-------------------------------------------------\r\n    /**\r\n     * 지정된 컬럼 인덱스의 x 위치를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getColumnX(index) {\r\n        return this.dataGroup.getColumnX(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스의 너비를 반환합니다.\r\n     * @param index 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnWidth(index) {\r\n        return this.dataGroup.getColumnWidth(index);\r\n    }\r\n\r\n    getColumnLayout(index) {\r\n        return this.dataGroup.getColumnLayout(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 컬럼 인덱스 너비를 설정합니다.\r\n     * @param index\r\n     * @param size\r\n     */\r\n    setColumnWidth(index, size) {\r\n        this.dataGroup.setColumnWidth(index, size);\r\n    }\r\n\r\n    /**\r\n     * from 컬럼부터 to 컬럼까지의 너비의 합을 반환합니다.\r\n     * @param from 시작 컬럼 인덱스\r\n     * @param to 종료 컬럼 인덱스\r\n     * @returns {Number}\r\n     */\r\n    getColumnsWidth(from, to) {\r\n        return this.dataGroup.getColumnsWidth(from, to);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스 행 높이를 반환합니다.\r\n     * @param index\r\n     * @returns {Number}\r\n     */\r\n    getRowHeight(index) {\r\n        return this.dataGroup.getRowHeight(index);\r\n    }\r\n\r\n    /**\r\n     * 지정된 인덱스의 행 높이를 설정합니다.\r\n     * @param index\r\n     * @param height\r\n     * @returns {boolean}\r\n     */\r\n    setRowHeight(index, height) {\r\n        return this.dataGroup.setRowHeight(index, height);\r\n    }\r\n\r\n    /**\r\n     * from 행부터 to 행까지의 높이의 합을 반환합니다.\r\n     * @param from 시작행\r\n     * @param to 종료행.\r\n     * @returns {Number}\r\n     */\r\n    getRowsHeight(from, to) {\r\n        return this.dataGroup.getRowsHeight(from, to);\r\n    }\r\n\r\n    getCellStyle(rowIndex, columnIndex, ...props) {\r\n        return this.dataGroup.getCellStyle.apply(this.dataGroup, [rowIndex, columnIndex, ...props])\r\n    }\r\n\r\n    setColumnVisible(column, visible) {\r\n        return this.dataGroup.setColumnVisible(column, visible);\r\n    }\r\n\r\n    /**\r\n     * 그리드 헤더 높이를 반환합니다.\r\n     * @returns {number}\r\n     */\r\n    getHeaderHeight() {\r\n        return this._headerGroup.headerHeight;\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Merge\r\n    //\r\n    //-------------------------------------------------\r\n    getMergeCells() {\r\n        return this.dataGroup.getMergeCellPositions();\r\n    }\r\n\r\n    addMergeCells(cells) {\r\n        Array.isArray(cells) && cells.forEach(cp => {\r\n            if (!(cp instanceof CellPosition)) {\r\n                cp = CellPosition.create(cp);\r\n            }\r\n            this.dataGroup.addMergeCellPosition(cp);\r\n        });\r\n        this.invalidate();\r\n    }\r\n\r\n    addMergeCell(cell) {\r\n        if (!(cell instanceof CellPosition)) {\r\n            cell = CellPosition.create(cell);\r\n        }\r\n        this.dataGroup.addMergeCellPosition(cell);\r\n        this.invalidate();\r\n    }\r\n\r\n    removeMergeCell(cell) {\r\n        if (!(cell instanceof CellPosition)) {\r\n            cell = CellPosition.create(cell);\r\n        }\r\n        this.dataGroup.removeMergeCellPosition(cell);\r\n        this.invalidate();\r\n    }\r\n\r\n    removeMergeCells() {\r\n        this.dataGroup.removeMergeCellPositions();\r\n        this.invalidate();\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Sort\r\n    //\r\n    //-------------------------------------------------\r\n\r\n    getSortColumns() {\r\n        return this._sortColumns.slice(0);\r\n    }\r\n\r\n    /**\r\n     * 하나 이상의 컬럼으로 정렬합니다.\r\n     * @param columns\r\n     */\r\n    sortByColumns(columns) {\r\n\r\n        if (!this.collection || !columns) {\r\n            return;\r\n        }\r\n\r\n        let sortFields = [], sortColumns = [];\r\n\r\n        if (this.sortableColumns) {\r\n            columns.forEach(column => {\r\n                if (column.sortable) {\r\n                    sortColumns.push(column);\r\n                    sortFields.push({\r\n                        descending: column.sortDescending,\r\n                        sortFunction: ((column) => {\r\n                            let sortFunc;\r\n                            if (column.sortCompare instanceof Function) {\r\n                                sortFunc = column.sortCompare;\r\n                                return (a, b) => {\r\n                                    return sortFunc(a, b, column);\r\n                                }\r\n                            }\r\n                            sortFunc = getSortFunction(column.sortCompare);\r\n                            return (a, b) => {\r\n                                let type = column.sortCompare;\r\n                                let v1 = column.isSortOriginal ? column.itemToValue(a) : this.itemToLabel(a, column);\r\n                                let v2 = column.isSortOriginal ? column.itemToValue(b) : this.itemToLabel(b, column);\r\n                                if (type === 'number') {\r\n                                    v1 = +v1;\r\n                                    v2 = +v2;\r\n                                } else if (type === 'string') {\r\n                                    v1 = v1 == null ? '' : '' + v1;\r\n                                    v2 = v2 == null ? '' : '' + v2;\r\n                                }\r\n                                return sortFunc(v1, v2);\r\n                            }\r\n                        })(column)\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        let oldColumns = this._sortColumns || [];\r\n        oldColumns.forEach((c) => {\r\n            if (sortColumns.indexOf(c) < 0) {\r\n                c.sortDescending = false;\r\n            }\r\n        });\r\n\r\n        this._sortColumns = sortColumns;\r\n\r\n        if (oldColumns.length > 0 || sortColumns.length > 0) {\r\n            this.collection.sort(sortFields);\r\n            this.collection.refresh();\r\n        }\r\n    }\r\n\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Edit\r\n    //\r\n    //-------------------------------------------------\r\n    /**\r\n     * 편집 가능한 셀인지 확인합니다.\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @returns {boolean}\r\n     */\r\n    isCellEditable(rowIndex, columnIndex) {\r\n        return this._gridEditor.isCellEditable(rowIndex, columnIndex);\r\n    }\r\n\r\n    /**\r\n     * 지정된 셀에서 편집을 시작합니다.\r\n     * 편집이 시작되면 'item-edit-starting', 'item-edit-start' 이벤트가 발생합니다.\r\n     * 'item-edit-starting' 이벤트가 발생할 때, `preventDefault`를 사용하여 편집을 취소할수 있습니다.\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @returns {boolean}\r\n     */\r\n    startEdit(rowIndex, columnIndex) {\r\n        return this._gridEditor.startEdit(rowIndex, columnIndex);\r\n    }\r\n\r\n    /**\r\n     * 편집을 종료하고 편집중인 내용이 저장됩니다.\r\n     * 편집이 종료되면 'item-edit-ending', 'item-edit-end' 이벤트가 발생합니다.\r\n     * 'item-edit-ending' 이벤트가 발생할 때, `preventDefault`를 사용하여 편집 종료를 취소할수 있습니다.\r\n     * @returns {boolean}\r\n     */\r\n    endEdit() {\r\n        return this._gridEditor.endEdit();\r\n    }\r\n\r\n    /**\r\n     * 편집을 취소합니다. 편집중인 내용은 저장되지 않습니다.\r\n     * 편집이 취소되면 'item-edit-cancel' 이벤트가 발생합니다.\r\n     * @returns {boolean}\r\n     */\r\n    cancelEdit() {\r\n        return this._gridEditor.cancelEdit();\r\n    }\r\n\r\n    /**\r\n     * 편집중인지 확인합니다.\r\n     * @returns {boolean}\r\n     */\r\n    isEditing() {\r\n        return this._gridEditor.isEditing();\r\n    }\r\n\r\n    /**\r\n     * 편집중인 에디터 정보를 반환합니다.\r\n     * @returns {HTMLElement|null}\r\n     */\r\n    getEditedCell() {\r\n        return this._gridEditor.editedCell;\r\n    }\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //\r\n    //\r\n    //-------------------------------------------------\r\n\r\n    analysisMergeAll() {\r\n        this.dataGroup.analysisMergeAll();\r\n    }\r\n\r\n    /**\r\n     * 전체 병합 영역 바로 분석실행\r\n     */\r\n\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    createHeaderGroup() {\r\n        return new HeaderGroup(this);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    createDataGroup() {\r\n        return new DataGroup(this);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    createCollection(items) {\r\n        return new ArrayList(items);\r\n    }\r\n\r\n    /**\r\n     * 포커스를 설정합니다.\r\n     */\r\n    focus() {\r\n        this.htmlElement.focus();\r\n    }\r\n\r\n    moveCaretUp() {\r\n        return this._internalMoveCaret(this.caretRowIndex - 1, this.caretColumnIndex);\r\n    }\r\n\r\n    moveCaretDown() {\r\n        return this._internalMoveCaret(this.caretRowIndex + 1, this.caretColumnIndex);\r\n    }\r\n\r\n    moveCaretLeft() {\r\n        return this._internalMoveCaret(this.caretRowIndex, this.getPreviousVisibleColumnIndex(this.caretColumnIndex));\r\n    }\r\n\r\n    moveCaretRight() {\r\n        return this._internalMoveCaret(this.caretRowIndex, this.getNextVisibleColumnIndex(this.caretColumnIndex));\r\n    }\r\n\r\n    /**\r\n     * 지정된 셀 위치로 스크롤을 이동합니다.\r\n     * @param rowIndex {number} - 스크롤을 이동하려는 대상 행의 인덱스입니다.\r\n     * @param columnIndex {number} - 스크롤을 이동하려는 대상 열의 인덱스입니다.\r\n     * @param allowSelection {boolean} - 이 값이 `true` 설정되면, 지정된 셀이 선택되고, 기본값은 `false` 입니다.\r\n     */\r\n    scrollToCell(rowIndex, columnIndex, allowSelection = false) {\r\n        this.dataGroup.scrollToCell(rowIndex, columnIndex, allowSelection);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    doLayout() {\r\n        const headerGroup = this._headerGroup;\r\n        const scroller = this._scroller;\r\n\r\n        headerGroup.doLayout(true);\r\n\r\n        const headerHeight = headerGroup.root.offsetHeight;\r\n        const oldHasVScroll = scroller.hasVerticalScroll;\r\n        const oldHasHScroll = scroller.hasHorizontalScroll;\r\n\r\n        scroller.root.style.height = `calc(100% - ${headerHeight}px)`;\r\n        let oldScrollHeight = scroller.root.offsetHeight;\r\n        scroller.doLayout(true);\r\n        let scrollHeight = scroller.root.offsetHeight;\r\n\r\n        //뷰 포트 영역이 변경되면 다시 그리기\r\n        if (oldScrollHeight !== scrollHeight || oldHasVScroll !== scroller.hasVerticalScroll || oldHasHScroll !== scroller.hasHorizontalScroll) {\r\n            scroller.doLayout();\r\n        }\r\n\r\n        this._oldWidth = this.root.offsetWidth;\r\n        this._oldHeight = this.root.offsetHeight;\r\n    }\r\n\r\n\r\n    lockDisplay() {\r\n        this.dataGroup.lockDisplay();\r\n        this.headerGroup.lockDisplay();\r\n    }\r\n\r\n    unlockDisplay() {\r\n        this.dataGroup.unlockDisplay();\r\n        this.headerGroup.unlockDisplay();\r\n    }\r\n\r\n    validateNow() {\r\n        this.dataGroup.validateNow();\r\n        this.headerGroup.validateNow();\r\n    }\r\n\r\n    /**\r\n     * 표시 목록을 갱신을 요청합니다.\r\n     */\r\n    invalidate(reason = Reason.DISPLAY_UPDATE) {\r\n        this.dataGroup.invalidate(reason);\r\n        this.headerGroup.invalidate(reason);\r\n    }\r\n\r\n    /**\r\n     * 대기중인 표시 목록 갱신을 바로 실행합니다.\r\n     */\r\n    flush() {\r\n        this.dataGroup.validateNow();\r\n        this.headerGroup.validateNow();\r\n    }\r\n\r\n    /**\r\n     * 현재 설정된 테마를 적용합니다.\r\n     */\r\n    applyTheme() {\r\n        const theme = get(this.theme);\r\n        if (theme) {\r\n            if (theme.css) {\r\n                addClass(this.root, theme.css);\r\n            }\r\n            this._defaultStyles = mixin({}, defaultConfig.styles, theme.canvasStyle || {});\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 현재 설정된 테마를 해제합니다.\r\n     */\r\n    releaseTheme() {\r\n        const theme = get(this.theme);\r\n        if (theme) {\r\n            if (theme.css) {\r\n                removeClass(this.root, theme.css);\r\n            }\r\n            this._defaultStyles = mixin({}, defaultConfig.styles);\r\n            if (this._theme) {\r\n                this._theme = null;\r\n            }\r\n            this.invalidate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 해당 인덱스의 앞 컬럼을 반환합니다.\r\n     * @param index\r\n     * @returns {number}\r\n     */\r\n    getPreviousVisibleColumnIndex(index) {\r\n        const columns = this.normalizedColumns;\r\n        for (let i = index - 1; i >= 0; i--) {\r\n            let column = columns[i];\r\n            if (column.visible) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * 해당 인덱스의 뒤 컬럼을 반환합니다.\r\n     * @param index\r\n     * @returns {number}\r\n     */\r\n    getNextVisibleColumnIndex(index) {\r\n        const columns = this.normalizedColumns;\r\n        for (let i = index + 1, numColumns = columns.length; i < numColumns; i++) {\r\n            let column = columns[i];\r\n            if (column.visible) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    clearHeaderRenderers() {\r\n        this.headerGroup.clearCache();\r\n    }\r\n\r\n\r\n    clearItemRenderers() {\r\n        this.dataGroup.clearCache();\r\n    }\r\n\r\n    mount(container, options = {}) {\r\n        this.root.parentElement?.removeChild(this.root);\r\n        let parent = null;\r\n        if (container instanceof HTMLElement) {\r\n            parent = container;\r\n        } else if (typeof container === 'string') {\r\n            parent = document.querySelector(container);\r\n        }\r\n\r\n        if (parent instanceof HTMLElement) {\r\n            parent.appendChild(this.root);\r\n            this.setOptions(options);\r\n        } else {\r\n            throw new Error(`Invalid container : [${container}]`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setOptions(options) {\r\n        Object.keys(options).sort(prioritySortFunction).forEach(key => {\r\n            let value = options[key];\r\n            if (key === 'options') {\r\n                mixin(this.dataGroup.options, value);\r\n            } else if (key === 'addons') {\r\n                value.keys.forEach(k => {\r\n                    this.addAddon(k, value[k]);\r\n                });\r\n            } else if (key in this) {\r\n                if (key === 'columns' && Array.isArray(value)) {\r\n                    value = value.map((c) => {\r\n                        return c instanceof GridColumn ? c : GridColumn.create(c);\r\n                    });\r\n                }\r\n                this[key] = value;\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n\r\n    destroy() {\r\n        this._sizeDetector.disconnect();\r\n        this.headerGroup.destroy();\r\n        this.dataGroup.destroy();\r\n        this.dataGroup.collection = null;\r\n        this.dataGroup.columnCollection = null;\r\n    }\r\n\r\n    _getFirstVisibleRowIndex() {\r\n        let rowIndices = this.dataGroup.getVisibleRowIndices();\r\n        if (rowIndices && rowIndices.length > 0) {\r\n            const frozenIndexRect = this.dataGroup.getVisibleFrozenIndexRect();\r\n            return rowIndices[frozenIndexRect.top];\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    _styleChanged() {\r\n        this.invalidate(Reason.ALL);\r\n    }\r\n\r\n    _getLastVisibleRowIndex() {\r\n        let rowIndices = this.dataGroup.getVisibleRowIndices();\r\n        if (rowIndices && rowIndices.length > 0) {\r\n            let frozenIndexRect = this.dataGroup.getVisibleFrozenIndexRect(),\r\n                visibleRowIndex = rowIndices[rowIndices.length - frozenIndexRect.bottom - 1];\r\n            return visibleRowIndex;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    _internalMoveCaret(rowIndex, columnIndex, isExtend) {\r\n        if (rowIndex >= 0 && columnIndex >= 0 && rowIndex < this.collection.length && (this.caretRowIndex !== rowIndex || this.caretColumnIndex !== columnIndex)) {\r\n            if (isExtend) {\r\n                this.dataGroup.updateSelection(rowIndex, columnIndex, true);\r\n            } else {\r\n                this.dataGroup.updateSelection(rowIndex, columnIndex, false, false);\r\n            }\r\n            this.scrollToCell(rowIndex, columnIndex, false, false);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _adjustCellNavigation(e) {\r\n        let keyCode = e.keyCode, shiftKey = e.shiftKey; e.ctrlKey; let dataGroup = this.dataGroup,\r\n            isCellSelectionMode = dataGroup.isCellSelectionMode,\r\n            frozenIndexRect = dataGroup.getVisibleFrozenIndexRect(), caretRowIndex = this.caretRowIndex,\r\n            caretColumnIndex = this.caretColumnIndex, numColumns = this.normalizedColumns.length,\r\n            numItems = this.collection.length,\r\n            cell = dataGroup.findMergeCellPosition(caretRowIndex, caretColumnIndex) || new CellPosition(caretRowIndex, caretColumnIndex);\r\n\r\n        switch (keyCode) {\r\n            case 37:\r\n                if (cell.left > 0) {\r\n                    caretColumnIndex = this.getPreviousVisibleColumnIndex(cell.left);\r\n                }\r\n                break;\r\n            case 39:\r\n                if (cell.right + 1 < numColumns) {\r\n                    caretColumnIndex = this.getNextVisibleColumnIndex(cell.right);\r\n                }\r\n                break;\r\n            case 38:\r\n                if (cell.top > 0) {\r\n                    caretRowIndex = cell.top - 1;\r\n                }\r\n                break;\r\n            case 40:\r\n                if (cell.bottom + 1 < numItems) {\r\n                    caretRowIndex = cell.bottom + 1;\r\n                }\r\n                break;\r\n            case 33:\r\n                let firstVisibleRowIndex = this._getFirstVisibleRowIndex();\r\n                if (caretRowIndex > numItems - frozenIndexRect.bottom) {\r\n                    caretRowIndex = numItems - frozenIndexRect.bottom;\r\n                } else if (caretRowIndex > firstVisibleRowIndex) {\r\n                    caretRowIndex = firstVisibleRowIndex;\r\n                } else {\r\n                    this.scrollTop -= this.scrollTop + dataGroup.clientHeight - (dataGroup.getRowY(caretRowIndex) + dataGroup.getRowHeight(caretRowIndex));\r\n                    caretRowIndex = this._getFirstVisibleRowIndex();\r\n                }\r\n                break;\r\n            case 34:\r\n                let lastVisibleRowIndex = this._getLastVisibleRowIndex();\r\n                if (caretRowIndex < frozenIndexRect.top && caretRowIndex < numItems) {\r\n                    caretRowIndex = frozenIndexRect.top;\r\n                } else if (caretRowIndex < lastVisibleRowIndex) {\r\n                    caretRowIndex = lastVisibleRowIndex;\r\n                } else {\r\n                    this.scrollTop = dataGroup.getRowY(caretRowIndex);\r\n                    caretRowIndex = this._getLastVisibleRowIndex();\r\n                }\r\n                break;\r\n            case 35://end\r\n                caretRowIndex = numItems - 1;\r\n                caretColumnIndex = isCellSelectionMode ? this.getPreviousVisibleColumnIndex(numColumns) : 0;\r\n                break;\r\n            case 36://home\r\n                caretRowIndex = 0;\r\n                caretColumnIndex = isCellSelectionMode ? this.getNextVisibleColumnIndex(-1) : 0;\r\n                break;\r\n        }\r\n\r\n        this._internalMoveCaret(caretRowIndex, caretColumnIndex, shiftKey);\r\n    }\r\n\r\n    _calculateDragScrollDelta(point) {\r\n        let SCROLL_DELTA = 10;\r\n        let dataGroup = this.dataGroup;\r\n        let sizeRect = dataGroup.getVisibleFrozenSizeRect(), hsp = this.scrollLeft, vsp = this.scrollTop,\r\n            delta = new Point();\r\n\r\n        if (point.x < hsp + sizeRect.left) {\r\n            delta.x = -SCROLL_DELTA;\r\n        } else if (point.x > hsp + dataGroup.clientWidth - sizeRect.right) {\r\n            delta.x = SCROLL_DELTA;\r\n        }\r\n\r\n        if (point.y < vsp + sizeRect.top) {\r\n            delta.y = -SCROLL_DELTA;\r\n        } else if (point.y > vsp + dataGroup.clientHeight - sizeRect.bottom) {\r\n            delta.y = SCROLL_DELTA;\r\n        }\r\n\r\n        return delta;\r\n    }\r\n\r\n    _startDragScrolling(delta, callback) {\r\n        this._dragScrollDelta = delta;\r\n        if (this._dragScrollId < 0) {\r\n            let scrollFunc = () => {\r\n                let oldHSP = this.scrollLeft;\r\n                let oldVSP = this.scrollTop;\r\n                this.scrollLeft += this._dragScrollDelta.x;\r\n                this.scrollTop += this._dragScrollDelta.y;\r\n                if (this.scrollLeft !== oldHSP || this.scrollTop !== oldVSP) {\r\n                    callback();\r\n                }\r\n                this._dragScrollId = window.requestAnimationFrame(scrollFunc);\r\n            };\r\n            scrollFunc();\r\n        }\r\n    }\r\n\r\n    _stopDragScrolling() {\r\n        if (this._dragScrollId > 0) {\r\n            window.cancelAnimationFrame(this._dragScrollId);\r\n            this._dragScrollId = -1;\r\n        }\r\n    }\r\n\r\n    _showOverlay() {\r\n        if (!this._overlayGroup) {\r\n            let group = document.createElement('div');\r\n            addClass(group, 'tachyon-group-overlay');\r\n            this.appendChild(group);\r\n            this._overlayGroup = group;\r\n        }\r\n    }\r\n\r\n    _hideOverlay() {\r\n        if (this._overlayGroup) {\r\n            this.removeChild(this._overlayGroup);\r\n            this._overlayGroup = null;\r\n        }\r\n    }\r\n\r\n    _showHeaderDropIndicator(columnIndex) {\r\n        if (this._overlayGroup) {\r\n            const DRAG_HEADER_INDICATOR_WIDTH = 10;\r\n            const dataGroup = this.dataGroup;\r\n\r\n            let indicator = this._dropHeaderIndicator;\r\n            if (!indicator) {\r\n                indicator = this._dropHeaderIndicator = document.createElement('div');\r\n                indicator.style.position = 'absolute';\r\n                indicator.style.zIndex = '9999';\r\n                addClass(indicator, 'tachyon-header-drag');\r\n                setSize(indicator, DRAG_HEADER_INDICATOR_WIDTH, dataGroup.clientHeight);\r\n\r\n                this._overlayGroup.appendChild(indicator);\r\n            } else {\r\n                indicator.removeAttribute('hidden');\r\n            }\r\n\r\n            let columnX = null;\r\n            if (columnIndex >= this.normalizedColumns.length) {\r\n                columnX = Math.round(Math.min(dataGroup.clientWidth, dataGroup.contentWidth) - DRAG_HEADER_INDICATOR_WIDTH / 2);\r\n            } else {\r\n                let columnLayout = dataGroup.getColumnLayout(columnIndex);\r\n                if (columnLayout) {\r\n                    columnX = Math.round(columnLayout.dx - DRAG_HEADER_INDICATOR_WIDTH / 2);\r\n                }\r\n            }\r\n            if (columnX != null) {\r\n                setPosition(indicator, columnX, this._headerGroup.clientHeight);\r\n            } else {\r\n                this._hideHeaderDropIndicator();\r\n            }\r\n        }\r\n    }\r\n\r\n    _hideHeaderDropIndicator(destroy) {\r\n        let indicator = this._dropHeaderIndicator;\r\n        if (indicator) {\r\n            if (destroy) {\r\n                if (indicator.parentElement) {\r\n                    indicator.parentElement.removeChild(indicator);\r\n                }\r\n                this._dropHeaderIndicator = null;\r\n            } else {\r\n                indicator.setAttribute('hidden', 'hidden');\r\n            }\r\n        }\r\n    }\r\n\r\n    _startColumnDragDrop(event) {\r\n\r\n        let detail = event.detail;\r\n        let column = detail.column;\r\n        let group = this._headerGroup;\r\n        let renderer = group._createRenderer(column);\r\n        let htmlElement = renderer.htmlElement;\r\n        let layer = new RendererLayer('renderer');\r\n        let layout = group.getHeaderLayout(column);\r\n\r\n        this._overlayGroup.appendChild(layer.root);\r\n\r\n        layer.setSize(layout.width, layout.height);\r\n        layer.updateLayout(0, 0, layout.width, layout.height, layout.width, layout.height);\r\n        layer.begin();\r\n\r\n        if (htmlElement) {\r\n            layer.addOverlayElement(htmlElement);\r\n            addClass(htmlElement, 'header-cell');\r\n            addClass(htmlElement, 'header-cell-dragging');\r\n            setSize(htmlElement, layout.width, layout.height);\r\n        }\r\n\r\n        if (renderer.prepare) {\r\n            renderer.prepare(this, {\r\n                renderer: renderer, item: column, column: column, label: column.headerText\r\n            });\r\n        }\r\n\r\n        layer.end();\r\n\r\n        return {\r\n            dragElement: layer,\r\n            renderer: renderer,\r\n            column: column,\r\n            columnPoint: new Point(layout.dx, layout.dy),\r\n            clientPoint: new Point(detail.trigger.clientX, detail.trigger.clientY)\r\n        }\r\n    }\r\n\r\n    _updateColumnDragDrop(event) {\r\n\r\n        let detail = event.detail;\r\n        let mouseEvent = detail.trigger;\r\n        let column = detail.column;\r\n        let dataGroup = this.dataGroup;\r\n        let info = this._dragColumnInfo;\r\n\r\n        let xx = info.columnPoint.x + mouseEvent.clientX - info.clientPoint.x;\r\n        setPosition(info.dragElement, xx, info.columnPoint.y);\r\n\r\n        let cursorPoint = dataGroup._mouseEventToContent(mouseEvent);\r\n        let overLeafColumnIndex = Math.min(dataGroup.getColumnIndexByDistance(cursorPoint.x), this.normalizedColumns.length - 1);\r\n        let overLeafColumn = dataGroup.getColumnAt(overLeafColumnIndex);\r\n        let isNextColumn = (dataGroup.getColumnWidth(overLeafColumnIndex) / 2) < (cursorPoint.x - dataGroup.getColumnX(overLeafColumnIndex));\r\n        let insertColumnIndex = overLeafColumnIndex;\r\n\r\n        if (isNextColumn) {\r\n            if (overLeafColumnIndex >= this.normalizedColumns.length - 1) {\r\n                insertColumnIndex = this.normalizedColumns.length;\r\n            } else {\r\n                insertColumnIndex = this.getNextVisibleColumnIndex(overLeafColumnIndex);\r\n            }\r\n        }\r\n\r\n        if (!isValidDropColumn(column, overLeafColumn, isNextColumn)) {\r\n            insertColumnIndex = -1;\r\n        }\r\n\r\n        if (insertColumnIndex >= 0) {\r\n            this._showHeaderDropIndicator(insertColumnIndex);\r\n        } else {\r\n            this._hideHeaderDropIndicator();\r\n        }\r\n\r\n        return insertColumnIndex >= 0 ? {\r\n            overLeafColumn: overLeafColumn, moveIndex: insertColumnIndex, isNext: isNextColumn\r\n        } : null;\r\n    }\r\n\r\n    _cancelColumnDragDrop() {\r\n        this._destroyColumnDragDrop();\r\n        this._dragCanceled = true;\r\n    }\r\n\r\n    _destroyColumnDragDrop() {\r\n        this._dragColumnInfo = null;\r\n        this._dropColumnInfo = null;\r\n        this._dragCanceled = false;\r\n\r\n        this._hideHeaderDropIndicator(true);\r\n        this._hideOverlay();\r\n        this._stopDragScrolling();\r\n    }\r\n\r\n    _dispatchSortEvent(type, column, trigger) {\r\n        return this.dispatchEvent(new CustomEvent(type, {\r\n            detail: {\r\n                column: column, trigger: trigger\r\n            }\r\n        }));\r\n    }\r\n\r\n    _redispatch(event) {\r\n        let canceled = !this.dispatchEvent(new CustomEvent(event.type, {\r\n            bubbles: event.bubbles, cancelable: event.cancelable, detail: event.detail\r\n        }));\r\n\r\n        if (canceled) {\r\n            event.preventDefault();\r\n        }\r\n    };\r\n\r\n    //-------------------------------------------------\r\n    //\r\n    //   Event Handler\r\n    //\r\n    //-------------------------------------------------\r\n\r\n    _onResize(event) {\r\n        if (this.root.offsetWidth !== this._oldWidth || this.root.offsetHeight !== this._oldHeight) {\r\n            this.doLayout();\r\n        }\r\n    }\r\n\r\n    _onHeaderEvents(event) {\r\n        const column = event.detail.column;\r\n        const mouseEvent = event.detail.trigger;\r\n        switch (event.type) {\r\n            case 'header-drag':\r\n                if (this.draggableColumns && column.draggable && !this._dragCanceled) {\r\n                    this._showOverlay();\r\n                    this._stopDragScrolling();\r\n\r\n                    if (!this._dragColumnInfo) {\r\n                        this._dragColumnInfo = this._startColumnDragDrop(event);\r\n                        this._dropColumnInfo = this._updateColumnDragDrop(event);\r\n\r\n                    } else {\r\n                        const point = this.dataGroup._mouseEventToContent(mouseEvent);\r\n                        const delta = this._calculateDragScrollDelta(point);\r\n                        delta.y = 0;\r\n\r\n                        this._dropColumnInfo = this._updateColumnDragDrop(event);\r\n                        this._startDragScrolling(delta, () => {\r\n                            this._dropColumnInfo = this._updateColumnDragDrop(event);\r\n                        });\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case 'header-up':\r\n                if (this.draggableColumns) {\r\n                    if (this._dropColumnInfo) {\r\n                        const isNext = this._dropColumnInfo.isNext;\r\n                        const dragColumn = this._dragColumnInfo.column;\r\n                        const parentColumn = dragColumn.parent;\r\n                        const children = parentColumn ? parentColumn.children : this.columns;\r\n\r\n                        //컬럼 그룹일때(부모가 같은 컬럼만) 드랍가능\r\n                        let dropColumn = null;\r\n                        let active = this._dropColumnInfo.overLeafColumn;\r\n                        while (active) {\r\n                            if (parentColumn === active.parent) {\r\n                                dropColumn = active;\r\n                                break;\r\n                            }\r\n                            active = active.parent;\r\n                        }\r\n\r\n                        if (dropColumn && dropColumn !== dragColumn) {\r\n                            let currentIndex = children.indexOf(dragColumn);\r\n                            let insertIndex = Math.max(0, children.indexOf(dropColumn) + (isNext ? 1 : 0));\r\n                            if (currentIndex !== insertIndex) {\r\n                                if (currentIndex < insertIndex) {\r\n                                    insertIndex -= 1;\r\n                                }\r\n\r\n                                if (this.moveColumn(dragColumn, parentColumn, insertIndex)) {\r\n                                    this.validateNow();\r\n                                    this.dispatchEvent(new CustomEvent('header-drop', {\r\n                                        cancelable: true, detail: {\r\n                                            column: dragColumn,\r\n                                            parent: parentColumn,\r\n                                            toParent: parentColumn,\r\n                                            toIndex: insertIndex,\r\n                                            trigger: event\r\n                                        }\r\n                                    }));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this._destroyColumnDragDrop();\r\n                }\r\n                break;\r\n\r\n            case 'header-click':\r\n                if (!this.isHeaderDragging && this.sortableColumns && column.sortable && this.normalizedColumns.indexOf(column) >= 0) {\r\n                    if (this._dispatchSortEvent('sort-changing', column)) {\r\n                        let multiple = (mouseEvent.shiftKey || mouseEvent.ctrlKey),\r\n                            isReverseSort = this._sortColumns.indexOf(column) >= 0, sortColumns;\r\n\r\n                        if (multiple && this.multiSortable) {\r\n                            sortColumns = this._sortColumns.slice(0);\r\n                            if (!isReverseSort) {\r\n                                sortColumns.push(column);\r\n                            }\r\n                        } else {\r\n                            sortColumns = [column];\r\n                        }\r\n\r\n                        let oldSortDescending = column.sortDescending;\r\n                        if (isReverseSort) {\r\n                            column.sortDescending = !column.sortDescending;\r\n                        }\r\n\r\n                        if (oldSortDescending) {\r\n                            sortColumns.splice(sortColumns.indexOf(column), 1);\r\n                        }\r\n\r\n                        this.sortByColumns(sortColumns);\r\n                        this._dispatchSortEvent('sort-change', column);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    _onHeaderSeparatorEvents(e) {\r\n        let headerGroup = this._headerGroup, column = e.detail.column, mouseEvent = e.detail.trigger;\r\n        if (this.resizableColumns && column.resizable) {\r\n            switch (e.type) {\r\n                case 'separator-over' :\r\n                    headerGroup.style.cursor = 'col-resize';\r\n                    break;\r\n                case 'separator-out' :\r\n                    headerGroup.style.cursor = '';\r\n                    break;\r\n                case 'separator-down' :\r\n                    this._showOverlay();\r\n                    //this._overlapGroup.style.cursor = 'col-resize';\r\n                    this._resizeColumn = column;\r\n                    this._resizeColumnWidth = this.dataGroup.getColumnWidth(column.index);\r\n                    this._resizeAnchorPoint = new Point(mouseEvent.clientX, mouseEvent.clientY);\r\n\r\n                    break;\r\n                case 'separator-drag' :\r\n                    this.setColumnWidth(column.index, Math.max(this._resizeColumnWidth + mouseEvent.clientX - this._resizeAnchorPoint.x, column.minWidth));\r\n                    break;\r\n                case 'separator-up' :\r\n                    this._hideOverlay();\r\n                    this._resizeColumn = null;\r\n                    this._resizeColumnWidth = -1;\r\n                    this._resizeAnchorPoint = null;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dataGroup item-down 이벤트 핸들러\r\n     * 아이템 드래그 및 아이템 드래그 선택 처리\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onItemDown(event) {\r\n        if (!this.selectOnDrag || !this.dataGroup.isMultipleSelectionMode) {\r\n            return;\r\n        }\r\n\r\n        const dataGroup = this.dataGroup;\r\n        const startRowIndex = event.detail.rowIndex;\r\n        const startColumnIndex = event.detail.columnIndex;\r\n\r\n        let oldRowIndex = startRowIndex;\r\n        let oldColumnIndex = startColumnIndex;\r\n        let isDragStart = false;\r\n\r\n        const updateSelection = (rowIndex, columnIndex) => {\r\n            if (oldRowIndex !== rowIndex || oldColumnIndex !== columnIndex) {\r\n                dataGroup.updateSelection(rowIndex, columnIndex, true);\r\n                oldRowIndex = rowIndex;\r\n                oldColumnIndex = columnIndex;\r\n            }\r\n        };\r\n\r\n        let moveEvent;\r\n        const onItemEvent = (e) => {\r\n            const {rowIndex, columnIndex, trigger} = e.detail;\r\n            moveEvent = trigger;\r\n            if (!isDragStart) {\r\n                this.dispatchEvent(new CustomEvent('selection-drag-start', {\r\n                    cancelable: true, detail: {\r\n                        cell: new CellPosition(startRowIndex, startColumnIndex), trigger: e\r\n                    }\r\n                }));\r\n                isDragStart = true;\r\n            } else {\r\n                const point = dataGroup._mouseEventToContent(moveEvent);\r\n                const delta = this._calculateDragScrollDelta(point);\r\n                if (delta && delta.length > 0) {\r\n                    this._startDragScrolling(delta, () => {\r\n                        const point = dataGroup._mouseEventToContent(moveEvent);\r\n                        const rowIndex = dataGroup.getRowIndexByDistance(point.y);\r\n                        const columnIndex = dataGroup.getColumnIndexByDistance(point.x);\r\n                        updateSelection(rowIndex, columnIndex);\r\n                    });\r\n                } else {\r\n                    this._stopDragScrolling();\r\n                }\r\n            }\r\n\r\n            updateSelection(rowIndex, columnIndex);\r\n\r\n            if (e.type === 'item-up') {\r\n                this._stopDragScrolling();\r\n                dataGroup.removeEventListener('item-drag', onItemEvent);\r\n                dataGroup.removeEventListener('item-up', onItemEvent);\r\n                this.dispatchEvent(new CustomEvent('selection-drag-end', {\r\n                    cancelable: true, detail: {\r\n                        cell: new CellPosition(startRowIndex, startColumnIndex, rowIndex, columnIndex), trigger: e\r\n                    }\r\n                }));\r\n            }\r\n        };\r\n        dataGroup.addEventListener('item-drag', onItemEvent);\r\n        dataGroup.addEventListener('item-up', onItemEvent);\r\n    }\r\n\r\n    _onKeyDown(event) {\r\n        if (event.defaultPrevented || this.isEditing()) {\r\n            return;\r\n        }\r\n\r\n        if (event.keyCode === 27) {\r\n            if (this.isHeaderDragging) {\r\n                this._cancelColumnDragDrop();\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (event.ctrlKey) {\r\n            if (this.selectedCell) {\r\n                switch (event.keyCode) {\r\n                    case 67:\r\n                        const cell = this.dataGroup.getSingleCell();\r\n                        if (cell) {\r\n                            copy(toTable(this, cell));\r\n                        }\r\n                        return;\r\n                    case 86:\r\n                        if (this.editable && this.pasteFromClipboard && !isEditableNode(event.target)) {\r\n                            paste()\r\n                                .then(value => {\r\n                                    const rows = parseFromExcel(value);\r\n                                    const numRows = rows.length;\r\n\r\n                                    const columns = this.normalizedColumns;\r\n                                    const collection = this.collection;\r\n                                    const anchorRowIndex = this.caretRowIndex;\r\n                                    const anchorColumnIndex = this.caretColumnIndex;\r\n\r\n                                    for (let i = 0; i < numRows; i++) {\r\n                                        let rowIndex = i + anchorRowIndex;\r\n                                        let columnIndex = anchorColumnIndex;\r\n                                        let values = rows[i];\r\n                                        for (let j = 0, numValues = values.length; j < numValues && columnIndex >= 0; j++) {\r\n                                            let column = columns[columnIndex];\r\n                                            if (column.editable) {\r\n                                                collection.setValue(rowIndex, column.dataFieldPath, values[j]);\r\n                                            }\r\n                                            columnIndex = this.getNextVisibleColumnIndex(columnIndex);\r\n                                        }\r\n                                    }\r\n                                    this.invalidate();\r\n                                });\r\n                        }\r\n                        return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.collection && this.collection.length > 0) {\r\n            this._adjustCellNavigation(event);\r\n        }\r\n    }\r\n\r\n    static create(container, options) {\r\n        return new this().mount(container, options);\r\n    }\r\n}\r\n\r\nDataGrid.withDom('<div class=\"tachyon-grid\" tabindex=\"-1\"></div>').withBehavior(Styleable, Filterable);\n\nconst HIERARCHY_NODE_EVENTS = ['node-change'];\r\n\r\nclass TreeGroup extends DataGroup {\r\n    constructor(grid) {\r\n        super(grid);\r\n        this._boundTreeNodeListener = this._onTreeNodeChange.bind(this);\r\n        this._crossDimension = [];\r\n        this._maxNodeLevel = [];\r\n        this._treeColumns = [];\r\n        this._autoExpandLevel = 0;\r\n    }\r\n\r\n    get autoExpandLevel() {\r\n        return this._autoExpandLevel;\r\n    }\r\n\r\n    set autoExpandLevel(value) {\r\n        this._autoExpandLevel = value;\r\n    }\r\n\r\n    get collection() {\r\n        return super.collection;\r\n    }\r\n\r\n    set collection(value) {\r\n        if (this.collection) {\r\n            HIERARCHY_NODE_EVENTS.forEach(\r\n                type => this.collection.removeEventListener(type,\r\n                    this._boundTreeNodeListener));\r\n        }\r\n        super.collection = value;\r\n        if (this.collection) {\r\n            HIERARCHY_NODE_EVENTS.forEach(\r\n                type => this.collection.addEventListener(type,\r\n                    this._boundTreeNodeListener));\r\n        }\r\n    }\r\n\r\n    _itemToTemplate(item, column, cell) {\r\n        if (cell.isCrossed) {\r\n            return nullItemRenderer;\r\n        }\r\n        const template = super._itemToTemplate(item, column, cell);\r\n        if (column instanceof TreeGridColumn && !column.boxMode && template === defaultItemRenderer) {\r\n            return defaultTreeItemRenderer;\r\n        }\r\n        return template;\r\n    }\r\n\r\n    _setupCell(cell, item, column, cellPosition) {\r\n        cell = super._setupCell(cell, item, column, cellPosition);\r\n        if (column instanceof TreeGridColumn) {\r\n            cell.hasChildren = this.collection.hasChildren(item);\r\n            cell.level = this.collection.getNodeLevel(item);\r\n            cell.isOpened = this.collection.isOpenNode(item);\r\n            cell.isLeaf = !this.hasChildren;\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    /**\r\n     * 교차셀 표현하기 위한  컬럼 생성\r\n     * @private\r\n     */\r\n    _resetCrossCells() {\r\n        if (!this.collection || !this.columnCollection) {\r\n            return;\r\n        }\r\n        const treeColumns = this._treeColumns = this.columnCollection.find(column => column instanceof TreeGridColumn && column.boxMode);\r\n        this._maxNodeLevel = 0;\r\n        if (treeColumns.length > 0) {\r\n            //최대 레벨 구함\r\n            //데이타 많을 경우 성능 !!!.\r\n            this._maxNodeLevel = this.collection.getNodeDepth(null) - 1;\r\n        }\r\n\r\n        this._crossDimension = [];\r\n\r\n        //레벨 별 컬럼생성\r\n        treeColumns.forEach(column => {\r\n            this._createChildColumns(column, this._maxNodeLevel);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 크로스 셀 생성(행기준으로 )\r\n     * @param maxLevel\r\n     * @param column\r\n     * @param item\r\n     * @param columnIndex\r\n     * @param itemIndex\r\n     * @returns {CrossCellPosition}\r\n     * @private\r\n     */\r\n    _createCrossCellPosition(maxLevel, column, item, columnIndex, itemIndex) {\r\n        const level = this.collection.getNodeLevel(item);\r\n\r\n        const sc = columnIndex + level;\r\n        const ec = columnIndex + maxLevel;\r\n\r\n        const children = this.collection.getDisplayableChildren(item);\r\n        const cell = new CrossCellPosition(itemIndex, sc, itemIndex, ec);\r\n\r\n        if (children.length > 0) {\r\n            cell.crossCellPositions = [new CellPosition(itemIndex, sc, itemIndex + children.length, sc, true)];\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    _createChildColumns(column, level) {\r\n        const collection = this.grid.columnCollection;\r\n        const oldChildren = collection.getChildren(column);\r\n        const columnWidth = column.width;\r\n\r\n        if (!column.boxMode) {\r\n            collection.removeNodes(column, oldChildren);\r\n        } else {\r\n            const removed = oldChildren.slice(level + 1);\r\n            if (removed.length > 0) {\r\n                collection.removeNodes(column, removed);\r\n            }\r\n            const indent = column.indent;\r\n            const children = [];\r\n            for (let i = 0; i <= level; i++) {\r\n                let child = oldChildren[i];\r\n                if (!child) {\r\n                    child = new ChildColumn(column);\r\n                    child.minWidth = indent;\r\n                    children.push(child);\r\n                }\r\n\r\n                if (i === level) {\r\n                    child.width = !!columnWidth ? Math.max(columnWidth - (indent * level), indent) : undefined;\r\n                } else {\r\n                    child.width = indent;\r\n                }\r\n            }\r\n            if (children.length > 0) {\r\n                collection.addNodes(column, children);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 해당 items 기준으로 크로스 셀 추가\r\n     * @param index\r\n     * @param items\r\n     * @private\r\n     */\r\n    _addCrossCells(index, items) {\r\n        if (!this._treeColumns.length) {\r\n            return;\r\n        }\r\n        const numItems = items.length;\r\n        const columns = this.normalizedColumns;\r\n        const cacheIndex = {};\r\n\r\n        if (this._crossDimension.length > 0) {\r\n            Array.prototype.splice.apply(this._crossDimension, [index, 0].concat(new Array(numItems)));\r\n        }\r\n\r\n        const updateCallback = cell => {\r\n            cell.crossCellPositions.forEach(cp => {\r\n                if (index >= cp.rowIndex && index < cp.endRowIndex) {\r\n                    cp.height += numItems;\r\n                } else if (index < cp.rowIndex) {\r\n                    cp.y += numItems;\r\n                }\r\n            });\r\n        };\r\n\r\n        this._crossDimension.forEach(cells => cells && cells.forEach(updateCallback));\r\n\r\n        const createCallback = index => {\r\n            const item = this.collection.get(index);\r\n            for (let p in this._treeColumns) {\r\n                const column = this._treeColumns[p];\r\n                let columnIndex = cacheIndex[p];\r\n                if (columnIndex === undefined) {\r\n                    //최소 자식 개수는 1개 이상이다.\r\n                    columnIndex = cacheIndex[p] = columns.indexOf(column.children[0]);\r\n                }\r\n\r\n                const cellPosition = this._createCrossCellPosition(this._maxNodeLevel, column, item, columnIndex, index);\r\n                this.addMergeCellPosition(cellPosition);\r\n\r\n                let crossCellPositions = this._crossDimension[index];\r\n                if (!crossCellPositions) {\r\n                    crossCellPositions = this._crossDimension[index] = [];\r\n                }\r\n                crossCellPositions[columnIndex] = cellPosition;\r\n            }\r\n        };\r\n\r\n        this.collection.getAncestorNodes(items[0]).forEach(node => createCallback(this.collection.indexOf(node)));\r\n        //생성\r\n        items.forEach((item, i) => createCallback(index + i));\r\n    }\r\n\r\n    /**\r\n     * 크로셀 삭제\r\n     * @param index\r\n     * @param items\r\n     * @private\r\n     */\r\n    _removeCrossCells(index, items) {\r\n        const numItems = items.length;\r\n        this._crossDimension.splice(index, numItems);\r\n        const callback = (cell) => {\r\n            cell.crossCellPositions = cell.crossCellPositions.filter(c => {\r\n                if (index >= c.rowIndex && index <= c.endRowIndex) {\r\n                    c.height -= Math.min(numItems, c.endRowIndex - index + 1);\r\n                    return c.height > 0;\r\n                } else if (index < c.rowIndex) {\r\n                    c.y -= numItems;\r\n                }\r\n                return true;\r\n            });\r\n        };\r\n        this._crossDimension.forEach(cells => cells.forEach(callback));\r\n    }\r\n\r\n    _onColumnCollectionChange(event) {\r\n\r\n        const kind = event.detail.kind;\r\n        const isReset = kind === 'reset' || kind === 'refresh';\r\n        if (this.collection && isReset) {\r\n            this._resetCrossCells();\r\n            super._onColumnCollectionChange(event);\r\n            this._addCrossCells(0, this.collection.toArray());\r\n        } else {\r\n            super._onColumnCollectionChange(event);\r\n        }\r\n    }\r\n\r\n    _onCollectionChange(event) {\r\n        if (this._isBlockCollectionChange) {\r\n            return;\r\n        }\r\n        const collection = this.collection;\r\n        const detail = event.detail;\r\n        const kind = detail.kind;\r\n\r\n        if (kind === 'reset' && this.autoExpandLevel > 0) {\r\n            this._isBlockCollectionChange = true;\r\n            collection.openNodes(collection.find(node => collection.getNodeLevel(node) < this.autoExpandLevel));\r\n            this._isBlockCollectionChange = false;\r\n        }\r\n\r\n        super._onCollectionChange(event, false);\r\n\r\n        switch (kind) {\r\n            case 'reset':\r\n            case 'refresh':\r\n                this._resetCrossCells();\r\n                this._addCrossCells(0, this.collection.toArray());\r\n                break;\r\n            case 'add':\r\n                this._addCrossCells(detail.index, detail.items);\r\n                break;\r\n            case 'remove':\r\n                this._removeCrossCells(detail.index, detail.items);\r\n                break;\r\n        }\r\n\r\n        this.dispatchEvent(new CustomEvent(event.type, {\r\n            bubbles: event.bubbles,\r\n            cancelable: event.cancelable,\r\n            detail: event.detail,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onTreeNodeChange(event) {\r\n        const {type, cancelable, detail} = event;\r\n        const nodeEvent = new CustomEvent(type, {\r\n            cancelable: cancelable,\r\n            detail: detail,\r\n        });\r\n\r\n        this.dispatchEvent(nodeEvent);\r\n\r\n        if (nodeEvent.defaultPrevented) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        switch (detail.kind) {\r\n            case 'expand':\r\n            case 'collapse':\r\n            case 'add':\r\n            case 'remove':\r\n            case 'move':\r\n                this.invalidate();\r\n                break;\r\n        }\r\n    }\r\n}\n\nclass TreeGrid extends DataGrid {\r\n    constructor() {\r\n        super();\r\n        this._childrenField = 'children';\r\n        const boundHierarchyNodeListener = event => this._redispatch(event);\r\n        HIERARCHY_NODE_EVENTS.forEach(type => this.dataGroup.addEventListener(type, boundHierarchyNodeListener));\r\n    }\r\n\r\n\r\n    get childrenField() {\r\n        return this._childrenField;\r\n    }\r\n\r\n    set childrenField(v) {\r\n        if (this._childrenField !== v) {\r\n            this._childrenField = v;\r\n            if (this.collection) {\r\n                this.collection.childrenField = v;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    get autoExpandLevel() {\r\n        return this.dataGroup.autoExpandLevel;\r\n    }\r\n\r\n    set autoExpandLevel(value) {\r\n        this.dataGroup.autoExpandLevel = value;\r\n    }\r\n\r\n    createDataGroup() {\r\n        return new TreeGroup(this);\r\n    }\r\n\r\n    createCollection(items) {\r\n        const list = new HierarchyList(items);\r\n        list.childrenField = this.childrenField;\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드의 부모 노드를 반환합니다.\r\n     */\r\n    getParentNode(node) {\r\n        return this.collection && this.collection.getParentNode(node);\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드의 자식노드들을 반환합니다.\r\n     * @param node 부모 노드입니다.\r\n     */\r\n    getChildren(node) {\r\n        return this.collection && this.collection.getChildren(node);\r\n    }\r\n\r\n    getDisplayableChildren(node) {\r\n        return this.collection && this.collection.getDisplayableChildren(node);\r\n    }\r\n\r\n    /**\r\n     * 해당 노드에 자식이 있는지 여부입니다.\r\n     */\r\n    hasChildren(node) {\r\n        return this.collection && this.collection.hasChildren(node);\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param node 추가할 자식 노드\r\n     *\r\n     */\r\n    addNode(parent, node) {\r\n        return this.collection && this.collection.addNode(parent, node);\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param node 추가할 자식 노드.\r\n     * @param index 자식 노드 삽입 위치의 인덱스.\r\n     */\r\n    addNodeAt(parent, node, index) {\r\n        return this.collection && this.collection.addNodeAt(parent, node, index);\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에 자식 노드를 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드\r\n     * @param nodes 추가할 자식 노드 목록\r\n     *\r\n     */\r\n    addNodes(parent, nodes) {\r\n        return this.collection && this.collection.addNodes(parent, nodes);\r\n    }\r\n\r\n    /**\r\n     * 노드의 지정된 인덱스 위치에 자식 노드목록을 추가합니다.\r\n     * 부모 노드가 null이면 최상위 목록에 추가합니다.\r\n     * @param parent 부모 노드.\r\n     * @param nodes 추가할 자식 노드 목록\r\n     * @param index 자식 노드 삽입 위치의 인덱스.\r\n     */\r\n    addNodesAt(parent, nodes, index) {\r\n        return this.collection && this.collection.addNodesAt(parent, nodes, index);\r\n    }\r\n\r\n    /**\r\n     * 부모 노드에서 자식 노드를 삭제합니다.\r\n     * @param parent 부모 노드입니다.\r\n     * @param node 삭제할 자식 노드 입니다.\r\n     */\r\n    removeNode(parent, node) {\r\n        return this.collection && this.collection.removeNode(parent, node);\r\n    }\r\n\r\n    /**\r\n     * 해당 node가 있는지 확인합니다.\r\n     * @param node\r\n     * @return 있으면 true,\r\n     */\r\n    contains(node) {\r\n        return this.collection && this.collection.contains(node);\r\n    }\r\n\r\n    /**\r\n     *    해당 노드가 확장되어 있는지 여부입니다.\r\n     */\r\n    isOpenNode(node) {\r\n        return this.collection && this.collection.isOpenNode(node);\r\n    }\r\n\r\n    /**\r\n     * 해당 노느가 출력된 노드인지 확인합니다.\r\n     * @param node\r\n     * @return\r\n     */\r\n    isDisplayableNode(node) {\r\n        return this.collection && this.collection.isDisplayableNode(node);\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드를 확장합니다.\r\n     */\r\n    openNode(node) {\r\n        return this.collection && this.collection.openNode(node);\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드를 축소합니다.\r\n     */\r\n    closeNode(node) {\r\n        return this.collection && this.collection.closeNode(node);\r\n    }\r\n\r\n    /**\r\n     * 노드 배열을 확장합니다.\r\n     * @param nodes\r\n     */\r\n    openNodes(nodes) {\r\n        return this.collection && this.collection.openNodes(nodes);\r\n    }\r\n\r\n    /**\r\n     * 확장되어있는 노드목록을 반환합니다.\r\n     * @returns {Array}\r\n     */\r\n    getOpenedNodes() {\r\n        return this.collection && this.collection.getOpenedNodes();\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드의 레벨을 반환합니다.\r\n     */\r\n    getNodeLevel(node) {\r\n        return this.collection && this.collection.getNodeLevel(node);\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 탐색합니다.\r\n     * 지정된 함수(callBack)에 대해 true를 반환하는 모든 항목이 포함된 새 배열을 만듭니다\r\n     * @param callback  function callback(node, parent, children)\r\n     * @param prefetchNode 시작 기준 노드입니다. 지정되지 않으면 루트노드를 기준으로 합니다.\r\n     * @param postOrder true 이면 후위탐색, false 이면 전위탐색\r\n     * @return true를 반환하는 항목의 배열입니다.\r\n     */\r\n    find(callback, prefetchNode, postOrder) {\r\n        return this.collection && this.collection.find(callback, prefetchNode, postOrder);\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 탐색합니다.\r\n     * 지정된 함수(callBack)에 대해 처음으로 true를 반환하는 항목을 반환하고 탐색을 중지합니다.\r\n     * @param callback  function callback(node, parent, children)\r\n     * @param prefetchNode 시작 기준 노드입니다. 지정되지 않으면 루트노드를 기준으로 합니다.\r\n     * @param postOrder true 이면 후위탐색, false 이면 전위탐색\r\n     * @return 처음으로 true를 반환하는 항목입니다.\r\n     */\r\n    findOne(callback, prefetchNode, postOrder) {\r\n        return this.collection && this.collection.findOne(callback, prefetchNode, postOrder);\r\n    }\r\n\r\n\r\n    /**\r\n     * 지정된 노드를 확장합니다.\r\n     */\r\n    expandNode(node) {\r\n        return this.collection && this.collection.openNode(node);\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드를 축소합니다.\r\n     */\r\n    collapseNode(node) {\r\n        return this.collection && this.collection.closeNode(node);\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 확장합니다.\r\n     */\r\n    expandAll() {\r\n        this.collection && this.collection.expandAll();\r\n    }\r\n\r\n    /**\r\n     * 전체 노드를 축소합니다.\r\n     */\r\n    collapseAll() {\r\n        this.collection && this.collection.collapseAll();\r\n    }\r\n\r\n    /**\r\n     * 지정된 노드가 확장되어 있으면 축소하고 축소되어 있으면 확장합니다.\r\n     */\r\n    toggleNode(node) {\r\n        if (this.isOpenNode(node)) {\r\n            this.closeNode(node);\r\n        } else {\r\n            this.openNode(node);\r\n        }\r\n    }\r\n}\n\nfunction tachyon(config) {\n    if (config) {\n        mixin(defaultConfig, config);\n    }\n}\nconst version = '__VERSION__';\n\nexport { ArrayList, CellPosition, DataGrid, GridColumn, HierarchyList, IList, TreeGrid, TreeGridColumn, addon, tachyon as default, defaultDomItemRenderer, defaultHeaderRenderer, defaultItemEditor, defaultItemRenderer, defaultTreeItemRenderer, formatter$1 as formatter, canvas as helper, theme$1 as theme, version };\n//# sourceMappingURL=tachyon.esm.js.map\n","import {getCurrentInstance, VNode} from 'vue';\r\n\r\nexport function useRender(render: () => VNode | [VNode]): void {\r\n    (getCurrentInstance() as any).render = render;\r\n}\r\n","import {ComponentPublicInstance, isReactive, onMounted, onUnmounted, watch, WatchOptions} from 'vue';\r\nimport {IList} from 'tachyon.js';\r\n\r\nexport type NativeInstance<T = any> = T & {\r\n    addEventListener: (type: string, callback: (event: Event) => void, options?) => void;\r\n    removeEventListener: (type: string, callback: (event: Event) => void, options?) => void;\r\n};\r\n\r\nconst FLUSH_AFTER_MOUNTED_PROPS = ['scrollTarget', 'items'];\r\nconst DEEP_WATCH = ['items'];\r\n\r\nexport function mountNative(\r\n    componentInstance: ComponentPublicInstance,\r\n    nativeInstance: NativeInstance,\r\n    data: {\r\n        events: Array<string>;\r\n        options: {};\r\n    }\r\n): () => void {\r\n    const onDispatch = (event: Event): void => componentInstance.$emit(event.type, event);\r\n    const options = Object.keys(data.options).reduce(\r\n        (item, key) => {\r\n            const v = data.options[key];\r\n            if (v !== undefined) {\r\n                const flushAfterMounted = FLUSH_AFTER_MOUNTED_PROPS.indexOf(key) >= 0;\r\n                item[flushAfterMounted ? 'post' : 'pre'][key] = v;\r\n            }\r\n            return item;\r\n        },\r\n        {pre: {}, post: {}}\r\n    );\r\n\r\n    nativeInstance.setOptions(options.pre);\r\n\r\n    onMounted(() => {\r\n        nativeInstance.mount(componentInstance.$el, options.post);\r\n        data.events.forEach(type => {\r\n            nativeInstance.addEventListener(type, onDispatch);\r\n        });\r\n    });\r\n\r\n    onUnmounted(() => {\r\n        data.events.forEach(type => {\r\n            nativeInstance.removeEventListener(type, onDispatch);\r\n        });\r\n        nativeInstance.destroy();\r\n    });\r\n    return null;\r\n}\r\n\r\nexport function bindNative<C extends object, Props extends Record<string, any>>(target: C, props: Props, options?: WatchOptions, exceptProps?: Array<string>): () => void {\r\n    const isObjectReactive = isReactive(props);\r\n    const unwatchs = Object.keys(props)\r\n        .filter(key => !exceptProps?.includes(key))\r\n        .map(key => {\r\n            const deep = DEEP_WATCH.indexOf(key) >= 0 && props[`${key}Deep`];\r\n            const watchOptions = deep ? {...(options || {}), deep} : options;\r\n            const watchSource = isObjectReactive ? () => props[key] : props[key];\r\n            return watch(\r\n                watchSource,\r\n                (value, oldValue) => {\r\n                    try {\r\n                        if (!(key in target)) {\r\n                            return;\r\n                        }\r\n                        if (target[key] != value) {\r\n                            target[key] = value;\r\n                        } else if (deep && 'collection' in target) {\r\n                            (target.collection as IList)?.refresh();\r\n                        }\r\n                    } catch (e) {\r\n                        console.warn(e);\r\n                    }\r\n                },\r\n                watchOptions\r\n            );\r\n        });\r\n    return () => {\r\n        unwatchs.forEach(fn => fn());\r\n    };\r\n}\r\n","import {ComponentInternalInstance, ComponentPublicInstance, createVNode, DefineComponent, defineComponent, getCurrentInstance, render, VNode} from 'vue';\r\nimport {DataGrid} from 'tachyon.js';\r\nimport {CellState} from '@/components/defines/state';\r\n\r\nexport type AnyDefineComponent = DefineComponent<any, any, any, any>;\r\ntype WrapperData = {\r\n    vnode: VNode;\r\n    container: HTMLElement;\r\n};\r\n\r\nexport declare type Constructor<T = any> = new (...args: any[]) => T;\r\ninterface DataGridItem {\r\n    readonly wrapper: ItemWrapper;\r\n    readonly htmlElement: HTMLElement;\r\n    created: (grid: DataGrid, state?: CellState) => void;\r\n    prepare: (grid: DataGrid, state: CellState) => void;\r\n    dispose: () => void;\r\n    getSaveValue?: () => string;\r\n}\r\n\r\nexport class ItemWrapper {\r\n    private readonly wrapper: WrapperData;\r\n    constructor(wrapper: WrapperData) {\r\n        this.wrapper = wrapper;\r\n    }\r\n\r\n    get instance(): ComponentPublicInstance {\r\n        return this.wrapper.vnode.component.proxy;\r\n    }\r\n\r\n    get element(): HTMLElement {\r\n        return this.wrapper.vnode.el as HTMLElement;\r\n    }\r\n\r\n    prepare(grid: DataGrid, state: CellState): void {\r\n        const prepareFn = this.instance.$options.prepare;\r\n        prepareFn?.apply(this.instance, prepareFn.length === 1 ? [state] : [grid, state]);\r\n    }\r\n\r\n    getSaveValue() {\r\n        if (!this.instance.$options.getSaveValue) {\r\n            console.warn('\"getSaveValue\" is not defined.', this.instance.$options);\r\n            return;\r\n        }\r\n        return this.instance.$options.getSaveValue.apply(this.instance);\r\n    }\r\n\r\n    destroy(): void {\r\n        render(null, this.wrapper.container);\r\n    }\r\n}\r\n\r\nfunction createWrapper(instance: ComponentInternalInstance, type: AnyDefineComponent, data: {slotName?: string; initState?: CellState} = {}): ItemWrapper {\r\n    const props = type.props\r\n        ? ['slotName', 'initState'].reduce((props, key) => {\r\n              if (key in type.props) {\r\n                  props[key] = data[key];\r\n              }\r\n              return props;\r\n          }, {})\r\n        : {};\r\n\r\n    const vnode: VNode = createVNode(type, props, {...instance.slots});\r\n    const container = document.createElement('template') as HTMLElement;\r\n    container.className = 'wrapper';\r\n    if (instance.appContext) {\r\n        vnode.appContext = instance.appContext;\r\n    }\r\n    render(vnode, container);\r\n    return new ItemWrapper({vnode, container});\r\n}\r\n\r\nexport function createItemFactory(host: ComponentPublicInstance | ComponentInternalInstance, type: AnyDefineComponent, slotName: string = null): DataGridItem {\r\n    const parent = (host as ComponentPublicInstance).$ || (host as ComponentInternalInstance);\r\n    if (type.__setup) {\r\n        type = defineComponent({...type} as any) as any;\r\n    }\r\n    const hookSetup = type.__setup || type.setup;\r\n    type.__setup = hookSetup;\r\n    type.setup = (props, context) => {\r\n        const instance = getCurrentInstance();\r\n        // `provides` 값을 부모의 값으로 변경.\r\n        (instance as any).provides = (parent as any).provides;\r\n        instance.parent = parent;\r\n        if (hookSetup) {\r\n            return hookSetup(props, context);\r\n        }\r\n    };\r\n    return {\r\n        wrapper: null,\r\n        get htmlElement() {\r\n            return this.wrapper.element;\r\n        },\r\n        created(grid: DataGrid, state?: CellState) {\r\n            this.wrapper = createWrapper(parent, type, {slotName, initState: state});\r\n        },\r\n        prepare(grid, state) {\r\n            this.wrapper.prepare(grid, state);\r\n        },\r\n        dispose() {\r\n            this.wrapper.destroy();\r\n        },\r\n        /**\r\n         * ItemEditor 인터페이스\r\n         */\r\n        getSaveValue() {\r\n            return this.wrapper.getSaveValue();\r\n        }\r\n    };\r\n}\r\n","import {ComponentInternalInstance} from 'vue';\r\nimport {AnyDefineComponent, createItemFactory} from '@/util/componentWrapper';\r\nimport {CellPosition, GridColumn} from 'tachyon.js';\r\n\r\nfunction isVueComponent(value: any): boolean {\r\n    return !!(value as AnyDefineComponent) && (value.render instanceof Function || value.setup instanceof Function);\r\n}\r\n\r\nexport function useItemFactory(instance: ComponentInternalInstance, value: object, slotName: string, defaultSlotItemFactory: AnyDefineComponent) {\r\n    if (value instanceof Function) {\r\n        return (item: object, column: GridColumn, cell: CellPosition) => {\r\n            return useItemFactory(instance, value(item, column, cell), slotName, defaultSlotItemFactory);\r\n        };\r\n    } else if (slotName in instance.slots) {\r\n        return createItemFactory(instance, defaultSlotItemFactory, slotName);\r\n    } else if (isVueComponent(value)) {\r\n        return createItemFactory(instance, value as AnyDefineComponent);\r\n    }\r\n\r\n    return value;\r\n}\r\n","import {SetupContext} from 'vue';\r\nimport {VNode} from 'vue';\r\n\r\nfunction isColumnTag(slot) {\r\n    const props = slot.type?.props;\r\n    return !!(props && ['headerRenderer', 'itemRenderer'].every(k => k in props));\r\n}\r\n\r\nfunction getChildren(node: VNode) {\r\n    let children = [];\r\n    if (Array.isArray(node.children)) {\r\n        node.children.forEach((child: VNode) => {\r\n            children = children.concat(getChildren(child));\r\n            if (isColumnTag(child)) {\r\n                children.push(child);\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\n\r\nexport default function (context: SetupContext) {\r\n    const nodes = context.slots.default?.() || [];\r\n    return nodes.reduce((result, node) => {\r\n        if (typeof node.type === 'symbol') {\r\n            result = result.concat(getChildren(node));\r\n        } else if (isColumnTag(node)) {\r\n            result.push(node);\r\n        }\r\n        return result;\r\n    }, []);\r\n}\r\n","import {NativeInstance} from '@/util/native';\r\nimport {computed, getCurrentInstance, onMounted, ref, toRaw, watch} from 'vue';\r\n\r\nconst SelectableMap = {\r\n    singleRow: 'selectedItem',\r\n    multipleRows: 'selectedItems',\r\n    singleCell: 'selectedCell',\r\n    multipleCells: 'selectedCells'\r\n};\r\n\r\nexport function useModel(props: Record<string, any>, prop: string, nativeInstance: NativeInstance, nativeProp: string) {\r\n    const instance = getCurrentInstance();\r\n    const internal = ref(props[prop]);\r\n    const isTwoWay = computed(() => {\r\n        if (!(prop in props)) {\r\n            return false;\r\n        }\r\n        const vProps = instance.vnode.props;\r\n        return !!(vProps && prop in vProps && `onUpdate:${prop}` in vProps);\r\n    });\r\n\r\n    const model = computed({\r\n        get() {\r\n            return isTwoWay.value ? props[prop] : internal.value;\r\n        },\r\n        set(value) {\r\n            const rowValue = toRaw(value);\r\n            if (toRaw(internal.value) !== rowValue) {\r\n                internal.value = rowValue;\r\n                instance?.emit(`update:${prop}`, value);\r\n            }\r\n        }\r\n    });\r\n\r\n    watch(\r\n        model,\r\n        value => {\r\n            if (value === undefined) {\r\n                return;\r\n            }\r\n            const update = () => {\r\n                if (nativeInstance[nativeProp] != value) {\r\n                    nativeInstance[nativeProp] = value;\r\n                }\r\n            };\r\n\r\n            if (!instance.isMounted) {\r\n                onMounted(update);\r\n            } else {\r\n                update();\r\n            }\r\n        },\r\n        {immediate: true, flush: 'post'}\r\n    );\r\n\r\n    nativeInstance.addEventListener('selection-change', event => {\r\n        model.value = nativeInstance[nativeProp];\r\n    });\r\n\r\n    return model;\r\n}\r\n\r\nexport function useSelectableModels(props: Record<string, any>, nativeInstance: NativeInstance): void {\r\n    const {selectionMode} = props;\r\n    const field = SelectableMap[selectionMode];\r\n    useModel(props, 'modelValue', nativeInstance, field);\r\n    if (selectionMode === 'singleRow' || selectionMode === 'multipleRows') {\r\n        useModel(props, 'selectedItem', nativeInstance, 'selectedItem');\r\n        useModel(props, 'selectedItems', nativeInstance, 'selectedItems');\r\n    } else {\r\n        useModel(props, 'selectedCell', nativeInstance, 'selectedCell');\r\n        useModel(props, 'selectedCells', nativeInstance, 'selectedCells');\r\n    }\r\n}\r\n","/**\r\n * @param fn\r\n * @param delay\r\n * @param context\r\n */\r\nexport function debounce(fn: (...args) => void, delay = 100, context = null): () => void {\r\n    let timerId = null;\r\n    const callback = function (...args): void {\r\n        if (timerId) {\r\n            clearTimeout(timerId);\r\n        }\r\n        timerId = setTimeout(function () {\r\n            fn.apply(context, args);\r\n        }, delay);\r\n    };\r\n\r\n    callback.cancel = (): void => {\r\n        clearTimeout(timerId);\r\n    };\r\n    return callback;\r\n}\r\n","import {ComponentPublicInstance, SetupContext} from 'vue';\r\nimport {ComputedRef} from 'vue';\r\nimport {GridColumn} from 'tachyon.js';\r\nimport {computed, h, nextTick, ref, VNode} from 'vue';\r\nimport {useRender} from '@/util/useRender';\r\nimport getColumnSlots from '@/util/getColumnSlots';\r\n\r\nexport type ColumnComponentInstance = ComponentPublicInstance<{updateColumns: () => void; $column?: GridColumn}>;\r\n\r\n/**\r\n * 자식 목록 반환\r\n */\r\nexport function useColumnRender(context: SetupContext): ComputedRef<Array<GridColumn>> {\r\n    const source = [];\r\n    const childVNodes = ref<Array<VNode>>(source);\r\n    useRender(() => {\r\n        //columns children\r\n        const node = h('template', getColumnSlots(context));\r\n        if ((node.children as Array<VNode>)?.length > 0) {\r\n            nextTick().then(() => {\r\n                childVNodes.value = (node.children as Array<VNode>) || source;\r\n            });\r\n        }\r\n        return node;\r\n    });\r\n\r\n    return computed(() =>\r\n        childVNodes.value.map(node => {\r\n            if (!node.component?.proxy) {\r\n                console.warn('columns is wrong!!!');\r\n                return null;\r\n            }\r\n            return (node.component.proxy as ColumnComponentInstance).$column;\r\n        })\r\n    );\r\n}\r\n","type Compare = (a, b) => boolean;\r\n\r\nfunction is(a, b): boolean {\r\n    return a === b || (a == null && b == null) || (a instanceof Date && b instanceof Date && a.getTime() === b.getTime());\r\n}\r\n\r\nfunction equal(a, b, isDeep: boolean = false, compare: Compare = is): boolean {\r\n    if (compare(a, b)) {\r\n        return true;\r\n    }\r\n\r\n    if (typeof a !== 'object' || a == null || typeof b !== 'object' || b == null) {\r\n        return false;\r\n    }\r\n\r\n    //array, object\r\n    const keysA = Object.keys(a);\r\n    const keysB = Object.keys(b);\r\n    if (keysA.length !== keysB.length) {\r\n        return false;\r\n    }\r\n\r\n    return keysA.every(key => (key in b && isDeep ? equal(a[key], b[key], isDeep, compare) : compare(a[key], b[key])));\r\n}\r\n\r\n/**\r\n * a, b 얕은 값 비교\r\n * @param a\r\n * @param b\r\n * @param compare\r\n */\r\nexport function shallowEqual(a, b, compare: Compare = is): boolean {\r\n    return equal(a, b, false, compare);\r\n}\r\n\r\n/**\r\n * a, b 깊은 값 비교(중첩 배열 및 맵 고려)\r\n * @param a\r\n * @param b\r\n * @param compare\r\n */\r\nexport function deepEqual(a, b, compare: Compare = is): boolean {\r\n    return equal(a, b, true, compare);\r\n}\r\n","import {defineComponent, h, inject, PropType, ref, shallowRef, triggerRef} from 'vue';\r\nimport {CellState} from './defines/state';\r\nimport {useRender} from '@/util/useRender';\r\nimport {GridColumnSymbol} from '@/components/TachyonColumn';\r\n\r\nexport default defineComponent({\r\n    name: 'TachyonGridItemEditor',\r\n    props: {\r\n        slotName: {\r\n            type: String\r\n        },\r\n        initState: {\r\n            type: Object as PropType<CellState>\r\n        }\r\n    },\r\n    setup(props, context) {\r\n        const columnProvider = inject(GridColumnSymbol);\r\n        const state = shallowRef<CellState>(props.initState);\r\n        const lazySaveValue = ref(state.value.value);\r\n        const hookEditEnd = (value: any) => {\r\n            lazySaveValue.value = value;\r\n            columnProvider.grid.endEdit();\r\n        };\r\n        const hookSetValue = (value: any) => {\r\n            lazySaveValue.value = value;\r\n            columnProvider.grid.collection?.setItemValue(state.value.item, state.value.column.dataField, value);\r\n        };\r\n        useRender(() => {\r\n            const slot = context.slots[props.slotName];\r\n            return h(slot({...state.value, hookSetValue, hookEditEnd})[0]);\r\n        });\r\n\r\n        function triggerState() {\r\n            triggerRef(state);\r\n        }\r\n\r\n        return {\r\n            state,\r\n            lazySaveValue,\r\n            triggerState\r\n        };\r\n    },\r\n    prepare(state: CellState): void {\r\n        this.state = state;\r\n        this.triggerState();\r\n    },\r\n    getSaveValue(): any {\r\n        return this.lazySaveValue;\r\n    }\r\n});\r\n","import {\n    computed,\n    DefineComponent,\n    defineComponent,\n    ExtractPropTypes,\n    getCurrentInstance,\n    inject,\n    InjectionKey,\n    nextTick,\n    onMounted,\n    onUnmounted,\n    PropType,\n    provide,\n    PublicProps,\n    SetupContext,\n    SlotsType,\n    watch\n} from 'vue';\nimport {DataGrid, GridColumn} from 'tachyon.js';\nimport {useColumnRender} from '@/util/useColumnRender';\nimport {bindNative} from '@/util/native';\nimport {useItemFactory} from '@/util/useItemFactory';\nimport {shallowEqual} from '@/util/equal';\nimport {DataGridSymbol} from '@/components/TachyonGrid';\nimport {CellState, EditorCellState, FilterCondition, FilterType, RendererCellState} from './defines/state';\nimport {GridStyles} from './defines/styles';\nimport TachyonGridItemRenderer from '@/components/TachyonGridItemRenderer';\nimport {AnyDefineComponent} from '@/util/componentWrapper';\nimport TachyonGridItemEditor from '@/components/TachyonGridItemEditor';\n\nexport interface GridColumnProvider {\n    readonly grid: DataGrid;\n    readonly column: GridColumn;\n}\n\nexport const GridColumnSymbol: InjectionKey<GridColumnProvider> = Symbol.for('GridColumnInstance');\n\nexport declare type GridColumnGetters = {\n    /**\n     *  GridColumn 인스턴스입니다.\n     */\n    nativeInstance: GridColumn;\n};\n\nexport declare type GridColumnSlot = {\n    /**\n     * 헤더 렌더러 슬롯\n     */\n    headerRenderer?: CellState;\n    /**\n     * 아이템 렌더러 슬롯\n     */\n    itemRenderer?: RendererCellState;\n    /**\n     * 아이템 에디터 슬롯\n     */\n    itemEditor?: EditorCellState;\n};\n\nexport const defaultColumnProps = {\n    /**\n     * 셀에 표시될 텍스트를 결정하는 필드를 정의합니다.\n     */\n    dataField: {\n        type: String as PropType<string>\n    },\n    /**\n     * 셀에 표시될 텍스트를 결정하는 콜백 함수입니다.\n     * 기본적으로 컬럼의 셀의 텍스트는 `dataField`와 일치하는 아이템 객체의 프로퍼티 값으로 설정됩니다.\n     * `labelFunction` 사용시 사용자가 지정한 값으로 설정할 수 있습니다.\n     * ```typescript\n     * labelFunction (item : object, column : DataGridColumn) : string{\n     *      return item[column.dataField] + '%';\n     * }\n     * ```\n     */\n    labelFunction: {\n        type: Function as PropType<(item?: object, column?: GridColumn) => string>\n    },\n    /**\n     * 컬럼 헤더의 텍스트입니다. 지정되지 않을시 'dataField' 속성을 사용합니다.\n     */\n    headerText: {\n        type: String as PropType<string>\n    },\n    /**\n     * 컬럼의 너비입니다. 지정되지 않을시 그리드 내부에서 자동으로 조절합니다.\n     */\n    width: {\n        type: Number as PropType<number>\n    },\n    /**\n     * 컬럼의 최소 너비입니다.\n     */\n    minWidth: {\n        type: Number as PropType<number>,\n        default: 10\n    },\n    /**\n     * 컬럼의 표시 여부입니다.\n     */\n    visible: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },\n    /**\n     * 해당 컬럼 영역 셀을 편집할 수 있는지 여부입니다.\n     */\n    editable: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },\n    /**\n     * 컬럼의 크기 변경 사용여부입니다.\n     */\n    resizable: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },\n    /**\n     * 컬럼 정렬 사용 여부입니다.\n     */\n    sortable: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },\n    /**\n     * 컬럼을 드래그하여 이동하여 순서 변경가능 여부입니다.\n     */\n    draggable: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },\n    /**\n     * 정렬이 오름차순인지 아니면 내림차순 인지를 나타냅니다.\n     */\n    sortDescending: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /**\n     * 컬럼의 정렬 형태(문자열, 숫자, 콜백함수)를 정의합니다.\n     */\n    sortCompare: {\n        type: Function as PropType<(a: any, b: any, column: GridColumn) => number>\n    },\n    /**\n     * 포멧된 데이타가 아닌 원본 데이타기준으로 정렬 여부입니다.\n     */\n    isSortOriginal: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /**\n     * 표시 텍스트가 영역을 벗어난 경우 줄바꿈 여부입니다.\n     */\n    wordWrap: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /**\n     * 그리드 병합모드 사용시 행병합 여부입니다.\n     */\n    isRowMerge: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /**\n     * 그리드 병합모드 사용시 컬럼병합 여부입니다.\n     */\n    isColumnMerge: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /**\n     * 그리드 병합모드 사용시 해당 컬럼의 행 병합크기를 다른 컬럼의 행 크기를 종속하게 합니다.\n     */\n    mergeDependColumns: {\n        type: Array as PropType<Array<string>>\n    },\n    /**\n     * 해당 컬럼 영역의 스타일을 정의합니다.\n     */\n    styles: {\n        type: Object as PropType<GridStyles>\n    },\n    /**\n     * 식 컬럼 헤더를 보이거나 숨깁니다.\n     */\n    collapse: {\n        type: Boolean as PropType<boolean>,\n        default: false\n    },\n    /* open: {\n        type: Boolean as PropType<boolean>,\n        default: true\n    },*/\n    /**\n     * 이 컬럼의 셀에 라벨에 포멧를 정의합니다.\n     * 포멧의 정의 tachyon.formatter.add 사용합니다.\n     */\n    format: {\n        type: Object as PropType<{type: string; pattern: string; [p: string]: any}>\n    },\n    /**\n     * 해당 컬럼의 필터를 정의합니다.\n     */\n    filter: {\n        type: Object as PropType<{type: FilterType; condition: FilterCondition}>\n    },\n    /**\n     * 헤더영역을 구성하는 헤더 렌더러입니다.\n     */\n    headerRenderer: {\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\n    },\n    /**\n     * 데이타영역을 구성하는 셀 렌더러입니다\n     */\n    itemRenderer: {\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\n    },\n    /**\n     * 데이타편집을 구성하는 셀 렌더러입니다\n     */\n    itemEditor: {\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\n    }\n};\n\nexport function internalColumnSetup<Column extends GridColumn>(props: Record<string, any>, context: SetupContext, nativeInstance: Column) {\n    const instance = getCurrentInstance() as any;\n    const provider = inject(DataGridSymbol);\n    const factoryProps = {\n        headerRenderer: computed(() => useItemFactory(instance, props.headerRenderer, 'headerRenderer', TachyonGridItemRenderer)),\n        itemRenderer: computed(() => useItemFactory(instance, props.itemRenderer, 'itemRenderer', TachyonGridItemRenderer)),\n        itemEditor: computed(() => useItemFactory(instance, props.itemEditor, 'itemEditor', TachyonGridItemEditor))\n    };\n\n    bindNative(nativeInstance, props, {immediate: true}, Object.keys(factoryProps));\n    bindNative(nativeInstance, factoryProps, {immediate: true});\n\n    instance.proxy.$column = nativeInstance;\n    const children = useColumnRender(context);\n    watch(\n        children,\n        value => {\n            if (!shallowEqual(nativeInstance.children, value)) {\n                nativeInstance.children = value;\n            }\n        },\n        {flush: 'post'}\n    );\n\n    watch(\n        () => props.collapse,\n        value => {\n            nativeInstance.open = !value;\n        },\n        {immediate: true}\n    );\n\n    provide(GridColumnSymbol, {\n        grid: provider.grid,\n        column: nativeInstance\n    });\n\n    onMounted(() => {\n        nextTick().then(() => {\n            provider.updateColumns();\n            const element = instance.proxy.$el as HTMLElement;\n            element?.parentElement?.removeChild(element);\n        });\n    });\n\n    onUnmounted(() => {\n        provider.updateColumns();\n    });\n\n    return {\n        nativeInstance\n    };\n}\n\nexport type ColumnPropsType = typeof defaultColumnProps;\n\nconst TachyonColumnImpl = defineComponent({\n    name: 'TachyonColumn',\n    props: {\n        ...defaultColumnProps\n    },\n    setup(props, context) {\n        return internalColumnSetup<GridColumn>(props, context, new GridColumn());\n    }\n});\n\nconst TachyonColumn = TachyonColumnImpl as unknown as DefineComponent<\n    ColumnPropsType,\n    {},\n    GridColumnGetters,\n    {},\n    {},\n    {},\n    {},\n    {},\n    string,\n    PublicProps,\n    ExtractPropTypes<ColumnPropsType>,\n    ExtractPropTypes<ColumnPropsType>,\n    SlotsType<GridColumnSlot>\n>;\nexport default TachyonColumn;\n","import {defineComponent, h, inject, PropType, shallowRef, triggerRef} from 'vue';\r\nimport {CellState} from './defines/state';\r\nimport {useRender} from '@/util/useRender';\r\nimport {GridColumnSymbol} from '@/components/TachyonColumn';\r\n\r\nexport default defineComponent({\r\n    name: 'TachyonGridItemRenderer',\r\n    props: {\r\n        slotName: {\r\n            type: String\r\n        },\r\n        initState: {\r\n            type: Object as PropType<CellState>\r\n        }\r\n    },\r\n    setup(props, context) {\r\n        const columnProvider = inject(GridColumnSymbol);\r\n        const state = shallowRef<CellState>(props.initState);\r\n        const hookSetValue = (value: any) => {\r\n            columnProvider.grid.collection?.setItemValue(state.value.item, state.value.column.dataField, value);\r\n        };\r\n        useRender(() => {\r\n            const slot = context.slots[props.slotName];\r\n            return h(slot({...state.value, hookSetValue})[0]);\r\n        });\r\n\r\n        function triggerState() {\r\n            triggerRef(state);\r\n        }\r\n\r\n        return {\r\n            state,\r\n            triggerState\r\n        };\r\n    },\r\n    prepare(state: CellState): void {\r\n        this.state = state;\r\n        this.triggerState();\r\n    }\r\n});\r\n","import {\r\n    computed,\r\n    DefineComponent,\r\n    defineComponent,\r\n    ExtractPropTypes,\r\n    getCurrentInstance,\r\n    h,\r\n    InjectionKey,\r\n    MethodOptions,\r\n    onMounted,\r\n    onUnmounted,\r\n    PropType,\r\n    provide,\r\n    PublicProps,\r\n    ref,\r\n    SlotsType,\r\n    VNode\r\n} from 'vue';\r\nimport {CellPosition, DataGrid, GridColumn, IList} from 'tachyon.js';\r\nimport {useRender} from '@/util/useRender';\r\nimport {bindNative, mountNative} from '@/util/native';\r\nimport {useItemFactory} from '@/util/useItemFactory';\r\nimport {CellState, EditorCellState, RendererCellState} from './defines/state';\r\nimport getColumnSlots from '@/util/getColumnSlots';\r\nimport {useSelectableModels} from '@/util/useModel';\r\nimport {AnyDefineComponent, ItemWrapper} from '@/util/componentWrapper';\r\nimport {debounce} from '@/util/debounce';\r\nimport TachyonGridItemRenderer from '@/components/TachyonGridItemRenderer';\r\nimport TachyonGridItemEditor from '@/components/TachyonGridItemEditor';\r\n\r\ntype SelectionMode = 'singleRow' | 'multipleRows' | 'singleCell' | 'multipleCells';\r\n\r\nexport declare type DataGridGetters = {\r\n    /**\r\n     * DataGrid 인스턴스입니다.\r\n     */\r\n    nativeInstance: DataGrid;\r\n};\r\n\r\nexport declare interface DataGridMethods extends MethodOptions {\r\n    [key: string]: any;\r\n\r\n    /**\r\n     * 포커스를 설정합니다.\r\n     */\r\n    focus(): void;\r\n\r\n    /**\r\n     * 지정된 셀 위치로 스크롤을 이동합니다.\r\n     * @param rowIndex {number} - 스크롤을 이동하려는 대상 행의 인덱스입니다.\r\n     * @param columnIndex {number} - 스크롤을 이동하려는 대상 열의 인덱스입니다.\r\n     * @param allowSelection {boolean} - 이 값이 `true` 설정되면, 지정된 셀이 선택되고, 기본값은 `false` 입니다.\r\n     */\r\n    scrollToCell(rowIndex: number, columnIndex: number, allowSelection: boolean): void;\r\n\r\n    /**\r\n     * 표시 목록을 갱신을 요청합니다.\r\n     */\r\n    invalidate(): void;\r\n\r\n    /**\r\n     * 대기중인 표시 목록 갱신을 바로 실행합니다.\r\n     */\r\n    flush(): void;\r\n\r\n    /**\r\n     * 지정된 셀에서 편집을 시작합니다.\r\n     * 편집이 시작되면 'item-edit-starting', 'item-edit-start' 이벤트가 발생합니다.\r\n     * 'item-edit-starting' 이벤트가 발생할 때, `preventDefault`를 사용하여 편집을 취소할수 있습니다.\r\n     * @param rowIndex\r\n     * @param columnIndex\r\n     * @returns {boolean}\r\n     */\r\n    startEdit(rowIndex: number, columnIndex: number): boolean;\r\n\r\n    /**\r\n     * 편집을 종료하고 편집중인 내용이 저장됩니다.\r\n     * 편집이 종료되면 'item-edit-ending', 'item-edit-end' 이벤트가 발생합니다.\r\n     * 'item-edit-ending' 이벤트가 발생할 때, `preventDefault`를 사용하여 편집 종료를 취소할수 있습니다.\r\n     * @returns {boolean}\r\n     */\r\n    endEdit(): boolean;\r\n\r\n    /**\r\n     * 편집을 취소합니다. 편집중인 내용은 저장되지 않습니다.\r\n     * 편집이 취소되면 'item-edit-cancel' 이벤트가 발생합니다.\r\n     * @returns {boolean}\r\n     */\r\n    cancelEdit(): boolean;\r\n\r\n    /**\r\n     * 지정된 이름에 해당하는 애드온 컴포넌트를 반환합니다.\r\n     */\r\n    getAddon(name: string);\r\n\r\n    /**\r\n     * items 관리하는 collection 객체를 반환합니다.\r\n     */\r\n    getCollection(): IList;\r\n}\r\n\r\ndeclare type ArrayListKind = 'reset' | 'refresh' | 'set' | 'add' | 'remove' | 'move' | 'update';\r\ndeclare type HierarchyListKind = 'collapsing' | 'collapse' | 'expanding' | 'expand' | 'add' | 'remove' | 'move';\r\ndeclare type DataGridHeaderEvent = CustomEvent<{column: GridColumn; trigger: Event}>;\r\ndeclare type DataGridItemEvent = CustomEvent<{\r\n    rowIndex: number;\r\n    columnIndex: number;\r\n    column: GridColumn;\r\n    item: object;\r\n    trigger: Event;\r\n}>;\r\ndeclare type HierarchyListEvent = CustomEvent<{\r\n    kind: HierarchyListKind;\r\n    nodes: Array<object>;\r\n    parent: object;\r\n    toParent?: object;\r\n    toIndex?: number;\r\n}>;\r\ndeclare type ArrayListEvent = CustomEvent<{\r\n    kind: ArrayListKind;\r\n    items?: Array<object>;\r\n    index?: number;\r\n    oldIndex?: number;\r\n}>;\r\ndeclare type SelectionChangeEvent = CustomEvent<{kind: string; cell: CellPosition; cells: Array<CellPosition>}>;\r\ndeclare type DateGridItemEditEvent = CustomEvent<{\r\n    rowIndex: number;\r\n    columnIndex: number;\r\n    item: object;\r\n    column: GridColumn;\r\n    renderer: object;\r\n    editor: object;\r\n    oldValue: any;\r\n    newValue: any;\r\n    trigger: Event;\r\n}>;\r\n\r\nexport declare type DataGridEvents = {\r\n    /**\r\n     * 헤더에 마우스 다운했을때 발생합니다.\r\n     */\r\n    'header-down': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더에 마우스 업 했을때 발생합니다.\r\n     */\r\n    'header-up': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더에 마우스 클릭 했을때 발생합니다.\r\n     */\r\n    'header-click': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더에 마우스 더블 클릭했을때 발생합니다.\r\n     */\r\n    'header-double-click': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더에 마우스 드래그 했을때  발생합니다.\r\n     */\r\n    'header-drag': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 마우스가 헤더를 벗어 났을때 발생합니다.\r\n     */\r\n    'header-out': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 마우스가 헤더 위로 이동했을때 발생합니다.\r\n     */\r\n    'header-over': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더 구분선에 마우스 다운했을때 발생합니다.\r\n     */\r\n    'separator-down': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더 구분선에 마우스 업 했을때 발생합니다.\r\n     */\r\n    'separator-up': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더 구분선에 마우스 클릭 했을때 발생합니다.\r\n     */\r\n    'separator-click': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더 구분선에 마우스 더블 클릭했을때 발생합니다.\r\n     */\r\n    'separator-double-click': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 헤더 구분선에 마우스 드래그 했을때  발생합니다.\r\n     */\r\n    'separator-drag': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 마우스가 헤더 구분선에 벗어 났을때 발생합니다.\r\n     */\r\n    'separator-over': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 마우스가 헤더 구분선에 위로 이동했을때 발생합니다.\r\n     */\r\n    'separator-out': (event: DataGridHeaderEvent) => void;\r\n    /**\r\n     * 아이템에 마우스 다운했을때 발생합니다.\r\n     */\r\n    'item-down': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 아이템에 마우스 업 했을때 발생합니다.\r\n     */\r\n    'item-up': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 아이템에 마우스 클릭 했을때 발생합니다.\r\n     */\r\n    'item-click': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 아이템에 마우스 더블 클릭했을때 발생합니다.\r\n     */\r\n    'item-double-click': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 아이템에 마우스 드래그 했을때  발생합니다.\r\n     */\r\n    'item-drag': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 마우스가 아이템 벗어 났을때 발생합니다.\r\n     */\r\n    'item-over': (event: DataGridItemEvent) => void;\r\n    /**\r\n     * 마우스가 아이템 위로 이동했을때 발생합니다.\r\n     */\r\n    'item-out': (event: DataGridItemEvent) => void;\r\n\r\n    /**\r\n     * 컬렉션 내부의 아이템이 변경되었을 때 발생합니다.\r\n     * - set - 다른 아이템으로 변경\r\n     * - add - 아이템 추가\r\n     * - remove - 아이템 삭제\r\n     * - move - 아이템 이동\r\n     * - update - 아이템 특정 필드 값 변경\r\n     * - reset - 컬렉션 소스 변경\r\n     * - refresh - 컬렉션 필터등 재 갱신\r\n     */\r\n    'collection-change': (event: ArrayListEvent) => void;\r\n    /**\r\n     * TreeGrid 내부의 아이템이 변경되었을때 발생합니다.\r\n     * 이벤트 종류\r\n     * - collapsing - 노드 접혀지기 전\r\n     * - collapse - 노드 접혀진 후\r\n     * - expanding - 노드 확장되기 전\r\n     * - expand - 노드 확장된 후\r\n     * - add - 노드 추가\r\n     * - remove - 노드 삭제\r\n     * - move - 노드 이동\r\n     */\r\n    'node-change': (event: HierarchyListEvent) => void;\r\n    /**\r\n     * 컬럼 내부의 아이템이 변경되었을 때 발생합니다.\r\n     */\r\n    'column-collection-change': (event: ArrayListEvent) => void;\r\n    /**\r\n     * 컬럼 내부의 노드 상태가 변경 되었을때 발생합니다.\r\n     */\r\n    'column-node-change': (event: HierarchyListEvent) => void;\r\n    /**\r\n     * 그리드에서 내부에서 사용되는 컬럼 목록 변경시 발생합니다.\r\n     */\r\n    'normalized-columns-change': (\r\n        event: CustomEvent<{\r\n            newValue: Array<GridColumn>;\r\n            oldValue: Array<GridColumn>;\r\n        }>\r\n    ) => void;\r\n    /**\r\n     * 아이템이 선택되기 전에 발생합니다.\r\n     * 이벤트 핸들러에서 이벤트의 `preventDefault` 메소드를 호출하여 선택 작업을 취소할 수 있습니다.\r\n     */\r\n    'selection-changing': (event: SelectionChangeEvent) => void;\r\n    /**\r\n     * 아이템이 선택된 후에 발생합니다.\r\n     */\r\n    'selection-change': (event: SelectionChangeEvent) => void;\r\n    /**\r\n     * 아이템 편집 전에 발생합니다..\r\n     */\r\n    'item-edit-starting': (event: DateGridItemEditEvent) => void;\r\n    /**\r\n     * 아이템 편집 할때 발생합니다.\r\n     */\r\n    'item-edit-start': (event: DateGridItemEditEvent) => void;\r\n    /**\r\n     * 아이템 편집 종료 전에 발생합니다.\r\n     */\r\n    'item-edit-ending': (event: DateGridItemEditEvent) => void;\r\n    /**\r\n     * 아이템 편집 종료 할때 발생합니다.\r\n     */\r\n    'item-edit-end': (event: DateGridItemEditEvent) => void;\r\n    /**\r\n     * 아이템 편집 취소 할때 발생합니다.\r\n     */\r\n    'item-edit-cancel': (event: DateGridItemEditEvent) => void;\r\n    /**\r\n     * 데이타 그리드 내 스크롤 할때 발생합니다.\r\n     */\r\n    scroll: (\r\n        event: CustomEvent<{\r\n            maxScrollLeft: number;\r\n            maxScrollTop: number;\r\n            scrollLeft: number;\r\n            scrollTop: number;\r\n            trigger: Event;\r\n        }>\r\n    ) => void;\r\n};\r\n\r\nexport declare type DataGridSlot = {\r\n    /**\r\n     * 헤더 렌더러 슬롯\r\n     */\r\n    headerRenderer?: CellState;\r\n    /**\r\n     * 아이템 렌더러 슬롯\r\n     */\r\n    itemRenderer?: RendererCellState;\r\n    /**\r\n     * 아이템 에디터 슬롯\r\n     */\r\n    itemEditor?: EditorCellState;\r\n};\r\n\r\nexport interface DataGridProvider<Native> {\r\n    readonly grid: Native;\r\n\r\n    updateColumns(): void;\r\n}\r\n\r\nexport const DataGridSymbol: InjectionKey<DataGridProvider<DataGrid>> = Symbol.for('DataGridInstance');\r\nexport const NativeEvents = [\r\n    'header-double-click',\r\n    'header-down',\r\n    'header-up',\r\n    'header-click',\r\n    'header-drag',\r\n    'header-out',\r\n    'header-over',\r\n    'separator-over',\r\n    'separator-out',\r\n    'separator-down',\r\n    'separator-drag',\r\n    'separator-up',\r\n    'separator-click',\r\n    'separator-double-click',\r\n    'item-over',\r\n    'item-out',\r\n    'item-down',\r\n    'item-up',\r\n    'item-drag',\r\n    'item-click',\r\n    'item-double-click',\r\n    'node-change',\r\n    'collection-change',\r\n    'column-collection-change',\r\n    'column-node-change',\r\n    'normalized-columns-change',\r\n    'selection-changing',\r\n    'selection-change',\r\n    'item-edit-starting',\r\n    'item-edit-start',\r\n    'item-edit-ending',\r\n    'item-edit-end',\r\n    'item-edit-cancel',\r\n    'scroll'\r\n];\r\n\r\nexport const defaultDataGridProps = {\r\n    modelValue: {\r\n        type: [Object, Array] as PropType<object | Array<object> | Array<CellPosition> | null>\r\n    },\r\n    /**\r\n     * 그리드 표시되는 데이타 목록입니다.\r\n     */\r\n    items: {\r\n        type: Array as PropType<Array<Record<string, any>>>\r\n    },\r\n    /**\r\n     * 그리드 헤더에 표시되는 컬럼목록입니다.\r\n     */\r\n    columns: {\r\n        type: Array as PropType<Array<GridColumn>>\r\n    },\r\n    /**\r\n     * 헤더영역을 구성하는 헤더 렌더러입니다.\r\n     */\r\n    headerRenderer: {\r\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\r\n    },\r\n    /**\r\n     * 데이타영역을 구성하는 셀 렌더러입니다\r\n     */\r\n    itemRenderer: {\r\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\r\n    },\r\n    /**\r\n     * 데이타편집을 구성하는 셀 렌더러입니다\r\n     */\r\n    itemEditor: {\r\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>\r\n    },\r\n    /**\r\n     * 셀 텍스트를 결정하는 콜백 함수입니다.\r\n     * 기본적으로 각 셀의 텍스트는 그 셀이 속한 컬럼의 `dataField`와 일치하는 아이템 객체의 프로퍼티 값으로 설정됩니다.\r\n     * `labelFunction` 사용시 사용자가 지정한 값으로 설정할 수 있습니다.\r\n     * 그러나, 컬럼 자체에 `labelFunction`이 이미 정의되어 있다면, 해당 컬럼의 `labelFunction`이 우선적으로 사용되며 이 메소드는 무시됩니다.\r\n     * ```\r\n     * labelFunction (item : Object, column : DataGridColumn) : String{\r\n     *      return item[column.dataField] + '%';\r\n     * }\r\n     * ```\r\n     */\r\n    labelFunction: {\r\n        type: Function as PropType<(item?: object, column?: GridColumn) => string>\r\n    },\r\n    /**\r\n     * 그리드의 표현되는 행의 수를 설정합니다.\r\n     */\r\n    rowCount: {\r\n        type: Number as PropType<number>,\r\n        default: -1\r\n    },\r\n    /**\r\n     * 그리드의 표현되는 최대 행의 수를 설정합니다.\r\n     */\r\n    maxRowCount: {\r\n        type: Number as PropType<number>,\r\n        default: -1\r\n    },\r\n    /**\r\n     * 데이타 행의 기본 높이를 설정합니다.\r\n     */\r\n    rowHeight: {\r\n        type: Number as PropType<number>,\r\n        default: 40\r\n    },\r\n    /**\r\n     * 헤더 행의 기본 높이를 설정합니다.\r\n     */\r\n    headerRowHeight: {\r\n        type: Number as PropType<number>,\r\n        default: 40\r\n    },\r\n    /**\r\n     * 좌 기준으로 행을 고정합니다.\r\n     * 수평스크롤에 영향을 받지 않습니다.\r\n     */\r\n    frozenLeft: {\r\n        type: Number as PropType<number>,\r\n        default: 0\r\n    },\r\n    /**\r\n     * 우 기준으로 행을 고정합니다.\r\n     * 수평스크롤에 영향을 받지 않습니다.\r\n     */\r\n    frozenRight: {\r\n        type: Number as PropType<number>,\r\n        default: 0\r\n    },\r\n    /**\r\n     * 상단 기준으로 행을 고정합니다.\r\n     * 수직스크롤에 영향을 받지 않습니다.\r\n     */\r\n    frozenTop: {\r\n        type: Number as PropType<number>,\r\n        default: 0\r\n    },\r\n    /**\r\n     * 하단 기준으로 행을 고정합니다.\r\n     * 수직스크롤에 영향을 받지 않습니다.\r\n     */\r\n    frozenBottom: {\r\n        type: Number as PropType<number>,\r\n        default: 0\r\n    },\r\n    /**\r\n     * 컬럼의 정렬 사용여부입니다.\r\n     */\r\n    sortableColumns: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    },\r\n    /**\r\n     * 컬럼 멀티 정렬 사용여부입니다.\r\n     */\r\n    multiSortable: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    },\r\n    /**\r\n     * 컬럼의 크기 변경 사용여부입니다.\r\n     */\r\n    resizableColumns: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: true\r\n    },\r\n    /**\r\n     * 컬럼의 순서 변경 사용여부입니다.\r\n     * 각 컬럼의 draggable 속성에 영향을 받습니다.\r\n     */\r\n    draggableColumns: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    },\r\n    /**\r\n     * 데이타 영역 셀을 편집할 수 있는지 여부입니다.\r\n     */\r\n    editable: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    },\r\n    /**\r\n     * 편집 활성화 하는 이벤트 목록입니다.\r\n     */\r\n    editOnEvents: {\r\n        type: Array as PropType<Array<'down' | 'click' | 'doubleClick'>>,\r\n        default: ['doubleClick']\r\n    },\r\n    /**\r\n     * 그리드 스타일을 정의합니다.\r\n     */\r\n    styles: {\r\n        type: Object\r\n    },\r\n    /**\r\n     * 아이템 드래그시 항목 선택 여부입니다.\r\n     */\r\n    selectOnDrag: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: true\r\n    },\r\n    /**\r\n     * 클립 보드 붙여넣기 사용 여부입니다.\r\n     */\r\n    pasteFromClipboard: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: true\r\n    },\r\n    /**\r\n     * 데이타 자동 병합 사용 여부입니다.\r\n     */\r\n    autoMerge: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    },\r\n    /**\r\n     * 자동 병합시 병합영역을 체크하는 콜백형태의 함수입니다.\r\n     */\r\n    mergeCompare: {\r\n        type: Function as PropType<(t: object, tc: GridColumn, s: object, sc: GridColumn) => boolean>\r\n    },\r\n    /**\r\n     * 아이템 선택을 정의힙니다.\r\n     */\r\n    selectionMode: {\r\n        type: String as PropType<SelectionMode>,\r\n        default: 'singleRow'\r\n    },\r\n    /**\r\n     * 선택된 항목를 설정합니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 처음 선택된 항목이 반환됩니다.\r\n     */\r\n    selectedItem: {\r\n        type: Object as PropType<object>\r\n    },\r\n    /**\r\n     * 복수 선택된 항목을 설정합니다.\r\n     * `selectionMode`가 'singleRow' 또는 'multipleRows' 일경우 선택된 항목의 배열이 반환됩니다.\r\n     */\r\n    selectedItems: {\r\n        type: Object as PropType<Array<object>>\r\n    },\r\n    /**\r\n     * 선택된 셀을 설정합니다.\r\n     */\r\n    selectedCell: {\r\n        type: Object as PropType<CellPosition>\r\n    },\r\n    /**\r\n     * 복수로 선택된 셀을 설정합니다.\r\n     */\r\n    selectedCells: {\r\n        type: Object as PropType<Array<CellPosition>>\r\n    },\r\n    /**\r\n     * 지정된 이름으로 테마를 적용합니다..\r\n     * `theme.add` 이용해 테마를 등록 후 테마를 사용할수 있습니다.\r\n     * ```\r\n     * tachyon.theme.add('themeA', {\r\n     *     css: 'themeA',\r\n     *     canvasStyle: {\r\n     *         backgroundColor: '#999900',\r\n     *         rowLine: {\r\n     *             width: 1,\r\n     *             color: '#FF0000',\r\n     *             dashed: []\r\n     *         },\r\n     *         ...\r\n     *     }\r\n     * })\r\n     * ```\r\n     */\r\n    theme: {\r\n        type: String as PropType<string>\r\n    },\r\n    /**\r\n     * `items` 대한 깊은 감시를 활성화합니다.\r\n     * 이를 통해 내부 상태 변화를 감지하고, 이에 따라 네이티브 컴포넌트의 상태를 갱신합니다.\r\n     * 성능에 영향을 줄 수 있으므로 변화 감시가 필요한 경우에만 설정하길 권장합니다.\r\n     */\r\n    itemsDeep: {\r\n        type: Boolean as PropType<boolean>,\r\n        default: false\r\n    }\r\n};\r\n\r\nexport function makeDefaultDataGridMethods(instance: DataGrid) {\r\n    return {\r\n        focus() {\r\n            instance.focus();\r\n        },\r\n        scrollToCell(rowIndex: number, columnIndex: number, allowSelection: boolean) {\r\n            instance.scrollToCell(rowIndex, columnIndex, allowSelection);\r\n        },\r\n        invalidate() {\r\n            instance.invalidate(null);\r\n        },\r\n        flush() {\r\n            instance.flush();\r\n        },\r\n        startEdit(rowIndex: number, columnIndex: number): boolean {\r\n            return instance.startEdit(rowIndex, columnIndex);\r\n        },\r\n        endEdit(): boolean {\r\n            return instance.endEdit();\r\n        },\r\n        cancelEdit(): boolean {\r\n            return instance.cancelEdit();\r\n        },\r\n        getAddon(name: string) {\r\n            return instance.getAddon(name);\r\n        },\r\n        getCollection() {\r\n            return instance.collection as any;\r\n        }\r\n    };\r\n}\r\n\r\nexport function defaultDataGridSetup<Native extends DataGrid = DataGrid>(props, context, nativeInstance: Native) {\r\n    const instance = getCurrentInstance();\r\n    const factoryProps = {\r\n        headerRenderer: computed(() => useItemFactory(instance, props.headerRenderer, 'headerRenderer', TachyonGridItemRenderer)),\r\n        itemRenderer: computed(() => useItemFactory(instance, props.itemRenderer, 'itemRenderer', TachyonGridItemRenderer)),\r\n        itemEditor: computed(() => useItemFactory(instance, props.itemEditor, 'itemEditor', TachyonGridItemEditor))\r\n    };\r\n\r\n    //root columns\r\n    const columnVNodes = ref<Array<VNode>>([]);\r\n    useRender(() => {\r\n        //columns children\r\n        const node = h('div', {class: 'tachyon-grid-wrap'}, getColumnSlots(context));\r\n        if ((node.children?.length as number) > 0) {\r\n            nativeInstance.autoGenerateColumns = false;\r\n            columnVNodes.value = node.children as Array<VNode>;\r\n        }\r\n        return node;\r\n    });\r\n\r\n    function resetColumns(): void {\r\n        if (columnVNodes.value.length > 0) {\r\n            nativeInstance.columns = columnVNodes.value.map(node => (node.component.proxy as any).$column);\r\n        }\r\n    }\r\n\r\n    const debounceResetColumns = debounce(resetColumns, 1);\r\n\r\n    bindNative(nativeInstance, props, {}, Object.keys(factoryProps));\r\n    bindNative(nativeInstance, factoryProps);\r\n\r\n    mountNative(instance.proxy, nativeInstance, {\r\n        events: NativeEvents,\r\n        options: {\r\n            ...props,\r\n            headerRenderer: factoryProps.headerRenderer.value,\r\n            itemRenderer: factoryProps.itemRenderer.value,\r\n            itemEditor: factoryProps.itemEditor.value\r\n        }\r\n    });\r\n    useSelectableModels(props, nativeInstance);\r\n\r\n    //비동기 대신\r\n    let isMounted = false;\r\n    onMounted(() => {\r\n        debounceResetColumns();\r\n        isMounted = true;\r\n    });\r\n\r\n    onUnmounted(() => {\r\n        isMounted = false;\r\n        nativeInstance.destroy();\r\n    });\r\n\r\n    nativeInstance.hookFreeElement = element => {\r\n        if (element?.wrapper instanceof ItemWrapper) {\r\n            element?.wrapper.destroy();\r\n        }\r\n        return false;\r\n    };\r\n\r\n    provide(DataGridSymbol, {\r\n        grid: nativeInstance,\r\n        updateColumns() {\r\n            if (isMounted) {\r\n                debounceResetColumns();\r\n            }\r\n        }\r\n    });\r\n\r\n    return {\r\n        nativeInstance\r\n    };\r\n}\r\n\r\nexport declare type DataGridPropsType = typeof defaultDataGridProps;\r\nconst TachyonGridImpl = defineComponent({\r\n    name: 'TachyonGrid',\r\n    emits: [...NativeEvents, 'update:modelValue', 'update:selectedItem', 'update:selectedItems', 'update:selectedCell', 'update:selectedCells'],\r\n    props: {\r\n        ...defaultDataGridProps\r\n    },\r\n    setup(props, context) {\r\n        const result = defaultDataGridSetup(props, context, new DataGrid());\r\n        return {\r\n            ...result,\r\n            ...makeDefaultDataGridMethods(result.nativeInstance)\r\n        };\r\n    }\r\n});\r\n\r\nconst TachyonGrid = TachyonGridImpl as unknown as DefineComponent<\r\n    DataGridPropsType,\r\n    {},\r\n    DataGridGetters,\r\n    {},\r\n    DataGridMethods,\r\n    {},\r\n    {},\r\n    DataGridEvents,\r\n    string,\r\n    PublicProps,\r\n    ExtractPropTypes<DataGridPropsType>,\r\n    ExtractPropTypes<DataGridPropsType>,\r\n    SlotsType<DataGridSlot>\r\n>;\r\n\r\nexport default TachyonGrid;\r\n","import {DefineComponent, defineComponent, ExtractPropTypes, InjectionKey, PublicProps, SlotsType} from 'vue';\nimport {TreeGrid} from 'tachyon.js';\nimport {\n    DataGridEvents,\n    DataGridGetters,\n    DataGridMethods,\n    DataGridPropsType,\n    DataGridProvider,\n    DataGridSlot,\n    defaultDataGridProps,\n    defaultDataGridSetup,\n    makeDefaultDataGridMethods,\n    NativeEvents\n} from '../components/TachyonGrid';\nimport {TreeRendererCellState} from '@/components/defines/state';\n\nexport interface TreeGridProvider extends DataGridProvider<TreeGrid> {}\nexport const TreeGridSymbol: InjectionKey<TreeGridProvider> = Symbol.for('TreeGridInstance');\n\nexport declare interface TreeGridMethods extends DataGridMethods {\n    /**\n     * 지정된 노드를 확장합니다.\n     * @deprecated\n     */\n    openNode(node: object): boolean;\n    /**\n     * 지정된 노드를 축소합니다.\n     * @deprecated\n     */\n    closeNode(node: object): boolean;\n    /**\n     * 지정된 노드를 확장합니다.\n     */\n    expandNode(node: object): boolean;\n    /**\n     * 지정된 노드를 축소합니다.\n     */\n    collapseNode(node: object): boolean;\n    /**\n     * 전체 노드를 확장합니다.\n     */\n    expandAll(): void;\n    /**\n     * 전체 노드를 축소합니다.\n     */\n    collapseAll(): void;\n    /**\n     * 지정된 노드의 확장 상태를 확장 또는 축소합니다.\n     */\n    toggleNode(node: object): void;\n}\n\nexport declare type TreeDataGridSlot = DataGridSlot & {\n    itemRenderer?: TreeRendererCellState;\n};\n\nexport const defaultTreeGridProps = {\n    /**\n     * 트리 구조에서 아이템의 자식 목록을 포함하는 필드의 이름을 정의합니다.\n     * @default 'children'\n     */\n    childrenField: {\n        type: String,\n        default: 'children'\n    },\n    /**\n     * `items`가 갱신될 때 자동으로 확장될 아이템의 레벨을 지정합니다.\n     * 예를 들어, 이 속성의 값이 2인 경우, `items`가 갱신될 때 2번째 레벨까지 모든 아이템이 자동으로 확장됩니다.\n     */\n    autoExpandLevel: {\n        type: Number,\n        default: 0\n    }\n};\n\nexport declare type TreeGridPropsType = DataGridPropsType & typeof defaultTreeGridProps;\nconst TachyonTreeGridImpl = defineComponent({\n    name: 'TachyonTreeGrid',\n    emits: [...NativeEvents, 'update:modelValue', 'update:selectedItem', 'update:selectedItems', 'update:selectedCell', 'update:selectedCells'],\n    props: {\n        ...defaultDataGridProps,\n        ...defaultTreeGridProps\n    },\n    setup(props, context) {\n        const result = defaultDataGridSetup<any>(props, context, new TreeGrid());\n        const nativeInstance = result.nativeInstance;\n        return {\n            ...result,\n            ...makeDefaultDataGridMethods(nativeInstance as any),\n            openNode(node: object): boolean {\n                return nativeInstance.openNode(node);\n            },\n            closeNode(node: object): boolean {\n                return nativeInstance.closeNode(node);\n            },\n            expandNode(node: object): boolean {\n                return nativeInstance.openNode(node);\n            },\n            collapseNode(node: object): boolean {\n                return nativeInstance.closeNode(node);\n            },\n            expandAll(): void {\n                nativeInstance.expandAll();\n            },\n            collapseAll(): void {\n                nativeInstance.collapseAll();\n            },\n            toggleNode(node: object): void {\n                nativeInstance.toggleNode(node);\n            }\n        };\n    }\n});\n\nconst TachyonTreeGrid = TachyonTreeGridImpl as unknown as DefineComponent<\n    TreeGridPropsType,\n    {},\n    DataGridGetters,\n    {},\n    TreeGridMethods,\n    {},\n    {},\n    DataGridEvents,\n    string,\n    PublicProps,\n    ExtractPropTypes<TreeGridPropsType>,\n    ExtractPropTypes<TreeGridPropsType>,\n    SlotsType<TreeDataGridSlot>\n>;\n\nexport default TachyonTreeGrid;\n","import {defineComponent, h, inject, PropType, shallowRef, triggerRef} from 'vue';\nimport {TreeState} from './defines/state';\nimport {useRender} from '@/util/useRender';\nimport {GridColumnSymbol} from '@/components/TachyonColumn';\nimport {TreeGrid} from 'tachyon.js';\n\nexport default defineComponent({\n    name: 'TachyonTreeGridItem',\n    props: {\n        slotName: {\n            type: String\n        },\n        initState: {\n            type: Object as PropType<TreeState>\n        }\n    },\n    setup(props, context) {\n        const {grid} = inject<{grid: TreeGrid}>(GridColumnSymbol);\n        const state = shallowRef<TreeState>(props.initState);\n        const slot = context.slots[props.slotName];\n        const hookToggle = (item: any) => {\n            grid.toggleNode(item);\n        };\n\n        const hookSetValue = (value: any) => {\n            grid.collection?.setItemValue(state.value.item, state.value.column.dataField, value);\n        };\n\n        useRender(() => {\n            const children = [];\n            if (slot && state.value) {\n                children.push(slot({...state.value, hookToggle, hookSetValue}));\n            } else {\n                const toggleNode = h(\n                    'button',\n                    {\n                        class: ['item-toggle'],\n                        onMousedown: event => {\n                            event.preventDefault();\n                        },\n                        onClick: event => {\n                            event.preventDefault();\n                            grid.toggleNode(state.value.item);\n                        }\n                    },\n                    h('i', {class: 'item-toggle-icon'})\n                );\n\n                const labelNode = h('div', {class: 'item-label'}, state.value.label);\n                children.push(toggleNode, labelNode);\n            }\n\n            return h(\n                'div',\n                {\n                    class: ['tachyon-tree-item', {'item--open': state.value.isOpened}]\n                },\n                children\n            );\n        });\n\n        function triggerState() {\n            triggerRef(state);\n        }\n\n        return {\n            state,\n            triggerState\n        };\n    },\n    prepare(state: TreeState): void {\n        this.state = state;\n        this.triggerState();\n    }\n});\n","import {DefineComponent, defineComponent, ExtractPropTypes, PropType, PublicProps, SlotsType} from 'vue';\nimport {ColumnPropsType, defaultColumnProps, GridColumnGetters, GridColumnSlot, internalColumnSetup} from '../components/TachyonColumn';\nimport {GridColumn, TreeGrid, TreeGridColumn} from 'tachyon.js';\nimport TachyonTreeGridItemRenderer from '@/components/TachyonTreeGridItemRenderer';\nimport {TreeRendererCellState} from '@/components/defines/state';\nimport {AnyDefineComponent} from '@/util/componentWrapper';\n\nexport interface TreeGridColumnProvider {\n    readonly grid: TreeGrid;\n    readonly column: TreeGridColumn;\n}\n\nexport declare type TreeGridColumnSlot = GridColumnSlot & {\n    itemRenderer?: TreeRendererCellState;\n};\n\nexport const defaultTreeColumnProps = {\n    /**\n     * 레벨 별 좌측 간격입니다.\n     */\n    indent: {\n        type: Number,\n        default: 30\n    },\n    /**\n     * 노드 모양을 '┌' 보이게 합니다.\n     */\n    boxMode: {\n        type: Boolean,\n        default: false\n    },\n    itemRenderer: {\n        type: [Object, Function] as PropType<AnyDefineComponent | ((item: object, column: GridColumn) => AnyDefineComponent)>,\n        default: () => TachyonTreeGridItemRenderer\n    }\n};\nexport type TreeColumnPropsType = ColumnPropsType & typeof defaultTreeColumnProps;\nconst TachyonTreeColumnImpl = defineComponent({\n    name: 'TachyonTreeColumn',\n    props: {\n        ...defaultColumnProps,\n        ...defaultTreeColumnProps\n    },\n    setup(props, context) {\n        const result = internalColumnSetup<TreeGridColumn>(props, context, new TreeGridColumn());\n        return {\n            ...result\n        };\n    }\n});\n\nconst TachyonTreeColumn = TachyonTreeColumnImpl as unknown as DefineComponent<\n    TreeColumnPropsType,\n    {},\n    GridColumnGetters,\n    {},\n    {},\n    {},\n    {},\n    {},\n    string,\n    PublicProps,\n    ExtractPropTypes<TreeColumnPropsType>,\n    ExtractPropTypes<TreeColumnPropsType>,\n    SlotsType<TreeGridColumnSlot>\n>;\n\nexport default TachyonTreeColumn;\n","import {App, Plugin} from 'vue';\nimport * as components from './components';\n\nconst install: Exclude<Plugin['install'], undefined> = (app: App) => {\n    Object.entries(components).forEach(([componentName, component]) => {\n        app.component(componentName, component);\n    });\n};\n\nexport * from './components';\nexport {DataGridSymbol} from './components/TachyonGrid';\nexport {TreeGridSymbol} from './components/TachyonTreeGrid';\nexport {GridColumnSymbol, defaultColumnProps} from './components/TachyonColumn';\nexport {defaultTreeColumnProps} from './components/TachyonTreeColumn';\nexport type * from './components/TachyonColumn';\nexport type * from './components/TachyonTreeColumn';\n\nexport * from './globalComponents';\nexport type * from './components/defines';\nexport {default as config, CellPosition, DataGrid, GridColumn, TreeGrid, TreeGridColumn, addon, formatter, theme, helper} from 'tachyon.js';\nexport type * from 'tachyon.js';\n\nexport default install;\n"],"names":["mixin","args","target","end","override","i","source","name","callHook","callValue","value","clampValue","min","max","internalParsePath","cacheFunction","parsePath","path","type","getValue","data","num","o","field","setValue","getLeafNodes","node","childrenField","leaves","children","callback","cache","result","nextFrameOnce","hasMap","frameId","defaultConfig","Reason","Point","p1","p2","x","y","Rectangle","width","height","v","rect","x1","y1","x2","y2","buildTemplate","html","fragment","template","searchNode","count","search","child","parseAnnotations","annotations","index","attributes","id","events","attribute","mountDomTemplate","element","domMaps","annotation","boundHandler","event","handlerName","handler","Base","behaviors","temp","behavior","setPosition","style","setSize","w","h","setLayout","sizeFlag","setTranslate","addClass","className","classList","removeClass","isEditableNode","Element$1","Element","newIndex","parent","positionFlag","listener","useCapture","numericCompare","a","b","stringCompare","caseInsensitive","createFakeTextarea","copy","focusedElement","fakeElement","resolve","paste","ROW_TOKEN","COLUMN_TOKEN","toTable","grid","cell","dataGroup","collection","columns","c","rows","numColumns","item","row","j","cur","next","parseFromExcel","text","textRows","numRows","getDefaultExportFromCjs","thenBy_module","identity","ignoreCase","makeCompareFunction","f","opt","prop","v1","uf","preprocess","cmp","v2","descTokens","tb","func","thenBy","EventCounter","IList","fromIndex","items","property","sortFields","toIndex","oldValue","kind","oldIndex","detail","ArrayList","array","sourceIndex","activeIndex","sItem","numItems","removedItems","removed","from","to","lowerBound","upperBound","direction","CellPosition","rowIndex","columnIndex","endRowIndex","endColumnIndex","isCrossed","Styleable","values","styles","defStyles","nonStyleNames","IFormatter","options","createFactory$1","scope","Formatter","formatter","get$2","add$2","remove$2","createFormatter","factory","formatter$1","updateChildren","depth","numChildren","GridColumn","dataField","headerText","p","visible","e","column","key","Scroller","content","needAllUpdate","scroller","contentContainer","viewMinHeight","delta","scrollLeft","scrollTop","scrollChanged","DEFAULT_PADDING","lineTo","ctx","dashed","color","dx","dy","measureFontHeight","fontStyle","fontDraw","pixels","start","measureTextWidth","paintSingleLine","hAlign","vAlign","padding","textWidth","textHeight","fitText","lines","numLines","findLines","squeeze","words","stillFits","line","string","paintMultiLine","paddingWidth","totalHeight","ox","oy","canvas","Renderer","state","eventName","component","ItemRenderer","nullItemRenderer","defaultItemRenderer","cp","label","textAlign","defaultHeaderRenderer","labelDisplay","iconDisplay","iconContainer","sortColumns","numSortColumns","sortIndex","defaultTreeItemRenderer","level","indent","isOpen","hasChildren","indentBox","toggleButton","defaultItemEditor","input","inputtedKey","numChar","Cell","DataCell","cellPosition","TreeCell","HeaderCell","EditCell","Group","old","reason","reasons","layer","layers","numLayers","scrollX","scrollY","contentWidth","contentHeight","frozenRect","renderers","cellState","renderer","elements","PREFIX_CLASS_NAME","Layer","Section","H_SECTION_NAMES","V_SECTION_NAMES","RendererLayer","section","numSections","sx","sy","sw","sh","vIndex","hIndex","HeaderDimensions","headerGroup","oldHeaders","offset","header","headers","closeDepth","dimensions","oldVisibleColumns","visibleColumns","layouts","done","layout","dataDimensions","headerHeight","rowHeight","yy","pc","hh","DRAG_SHIELD","DOUBLE_CLICK_DELAY$1","HeaderGroup","boundDataGroupEvent","found","isColumnsChanged","isColumnVisibleChanged","isRendererChanged","isVisibleColumnsChanged","isColumnUpdated","context","newHeader","cacheHeader","isLeaf","columnLineStyle","parentColumn","parentLayout","lastColumnLayout","lastRight","headerRowLine","headerRenderer","trigger","point","right","separatorColumn","eventType","CrossCellPosition","cells","internalFindCell","numCells","Merger","arr","ty","tx","removedCells","visibleCells","includeCrossCells","maxCell","columnIndices","mergeDependColumns","numIndices","sourceItem","sourceColumn","sourceValue","curIndex","nextColumnIndex","nextEndRowIndex","startRowIndex","targetItem","nextValue","Mergeable","is","equals","isDeep","compare","isFirst","internalEqual","keysA","keysB","shallowEquals","SelectionCellPosition","isAdded","SINGLE_ROW","MULTIPLE_ROWS","SINGLE_CELL","MULTIPLE_CELLS","Selector","maxBounds","top","bottom","tempCell","bounds","mergedCells","hasMergedCell","r","flag","selectionCell","Selectable","indices","funcName","helper","eventCounter","cancelable","createRootNode","childField","createChildrenField","arrayInsert","arrayRemove","find","isPostOrder","onlyOne","childChildren","getDepth","NO_PARENT","PARENT_TO_ABOVE","HierarchyList","pNodes","active","parentNode","doParentMapping","nodes","displayableChildren","numNodes","toParent","removeIndex","removedNodes","dispatch","prefetchNode","postOrder","parents","bubbles","optionalParams","ColumnCollection","boundCollectionChange","BLOCK_SIZE","BLOCK_SHIFT","BLOCK_MASK","Block","lastValue","removedValue","LinearVector","blockIndex","block","size","startY","blockOffset","total","blocks","numBlocks","preValue","createEmptyArray","RowLinearVector","heights","spliceFunc","emptyArray","cellHeights","previous","current","Row","dimension","ChildColumn","hostColumn","columnLevel","TreeGridColumn","normalizeInterval","startFrozenOffset","endFrozenOffset","startIndex","endIndex","minIndex","maxIndex","startOffset","endOffset","snIndex","enIndex","containLine","from1","to1","from2","to2","containInterval","DataDimensions","cellPositions","columnInterval","scl","ecl","rl","cl","rowInterval","srl","erl","rowVisible","columnVisible","oldRows","oldMergeCells","frozenLeft","frozenRight","frozenTop","frozenBottom","isNeed","isChanged","defaultWidth","visibleIndices","flexibleIndices","calculateWidth","cw","activeTotal","leftColumnsWidth","columnWidth","startColumnIndex","nWidth","oldColumnWidth","vIndices","numVIndices","startCenterOffset","endCenterOffset","leftWidth","rightWidth","centerWidth","startCenterX","startRightX","xx","baseX","cx","TOKEN","PROPERTIES_KEY","COMPANY_URL_KEY","TABLE","GLOBAL","__isLicense","generate","d","len","COMPANY_URL","m","KEY_MAP","keyCharAt","parse","decrypt","b64Decode","o1","o2","o3","h1","h2","h3","h4","bits","isLicense","ip","keys","version","paintLicenseMark","NONE_MODE","DOUBLE_CLICK_DELAY","dummyCellPosition","GroupData","createContext","containsCellPosition","findCell","DataGroup","oldColumns","newColumns","isItemsChanged","isMergedChanged","oldColumnIndices","frozenIndexRect","startOffsetY","frozenSizeRect","removedRows","removedMergeCells","vSectionIndex","startRowY","autoRowHeight","cellMerger","autoMerge","groupData","viewHeight","asyncCreateRow","startTime","TIME","oldRowHeight","execute","lastIndex","lastY","preStartRow","preEndRow","updateRow","rowY","offsetY","newCells","newCell","mergeCell","cellCache","isMerged","columnLayouts","DEFAULT_WIDTH","DEFAULT_HEIGHT","rowColors","backgroundColor","cellBackgroundColor","isRowSelection","numColumnLayouts","rowLineStyle","rowDrawLine","fromOffset","toOffset","sl","el","columnDrawLine","frozenLineStyle","lineStyle","lineWidth","ww","isCellMode","isRowMode","position","isNullRenderer","itemRenderer","needUpdate","hChanged","vChanged","frozenIndex","frozenSize","leftIndex","rightIndex","oldLeftIndex","oldRightIndex","allowSelection","isHorizontal","isVertical","shiftKey","ctrlKey","props","left","scrollRect","scrollRight","scrollBottom","dxl","dxr","dyt","dyb","ri","removeCellPosition","newValue","caretRowIndex","caretColumnIndex","newClickTime","isDispatch","TYPE_MAP","POSSIBLE_KEY_CODES","DataGridEditor","boundGridItemEvent","editor","editCell","itemEditor","isReverse","isEdited","increments","nextRowIndex","isEditing","keyCode","createFunction","operator","contains","ignore","notContains","startsWith","endsWith","Operators","getOperator","valueToString","valueToNumber","parseConditions","conditions","setCondition","IFilter","manager","parsed","filter","SetFilter","numValues","set","compareAB","condition","RangeFilter","fromResult","NumberFilter","DateFilter","TextFilter","FuncFilter","FilterManager","activeFilters","executeFilter","isRecycle","oldMap","Filterable","IAddon","addons","getAddons","k","createFactory","Addon","get$1","add$1","remove$1","addon","AddonHelper","boundDataGroupRender","theme","get","add","remove","theme$1","HEADER_EVENTS","HEADER_SEPARATOR_EVENTS","HEADER_ALL_EVENTS","ITEM_EVENTS","DATA_GROUP_EVENTS","PRIORITY","prioritySortFunction","aPriority","bPriority","getSortFunction","isValidDropColumn","leafColumn","isNext","activeParent","childIndex","DataGrid","entries","observer","boundHeaderEvents","boundHeaderSeparatorEvents","boundRedispatch","sortFunc","oldHasVScroll","oldHasHScroll","oldScrollHeight","scrollHeight","container","_a","rowIndices","isExtend","isCellSelectionMode","firstVisibleRowIndex","lastVisibleRowIndex","SCROLL_DELTA","sizeRect","hsp","vsp","scrollFunc","oldHSP","oldVSP","group","indicator","columnX","columnLayout","destroy","htmlElement","mouseEvent","info","cursorPoint","overLeafColumnIndex","overLeafColumn","isNextColumn","insertColumnIndex","dragColumn","dropColumn","currentIndex","insertIndex","multiple","isReverseSort","oldSortDescending","oldRowIndex","oldColumnIndex","isDragStart","updateSelection","moveEvent","onItemEvent","anchorRowIndex","anchorColumnIndex","HIERARCHY_NODE_EVENTS","TreeGroup","treeColumns","maxLevel","itemIndex","sc","ec","oldChildren","cacheIndex","updateCallback","createCallback","crossCellPositions","isReset","nodeEvent","TreeGrid","boundHierarchyNodeListener","list","tachyon","config","useRender","render","getCurrentInstance","FLUSH_AFTER_MOUNTED_PROPS","DEEP_WATCH","mountNative","componentInstance","nativeInstance","onDispatch","flushAfterMounted","onMounted","onUnmounted","bindNative","exceptProps","isObjectReactive","isReactive","unwatchs","deep","watchOptions","watchSource","watch","fn","ItemWrapper","wrapper","prepareFn","createWrapper","instance","vnode","createVNode","createItemFactory","host","slotName","defineComponent","hookSetup","isVueComponent","useItemFactory","defaultSlotItemFactory","isColumnTag","slot","getChildren","getColumnSlots","_b","SelectableMap","useModel","nativeProp","internal","ref","isTwoWay","computed","vProps","model","rowValue","toRaw","update","useSelectableModels","selectionMode","debounce","delay","timerId","useColumnRender","childVNodes","nextTick","equal","shallowEqual","TachyonGridItemEditor","columnProvider","inject","GridColumnSymbol","shallowRef","lazySaveValue","hookEditEnd","hookSetValue","triggerState","triggerRef","defaultColumnProps","internalColumnSetup","provider","DataGridSymbol","factoryProps","TachyonGridItemRenderer","provide","TachyonColumnImpl","TachyonColumn","NativeEvents","defaultDataGridProps","makeDefaultDataGridMethods","defaultDataGridSetup","columnVNodes","resetColumns","debounceResetColumns","isMounted","TachyonGridImpl","TachyonGrid","TreeGridSymbol","defaultTreeGridProps","TachyonTreeGridImpl","TachyonTreeGrid","TachyonTreeGridItemRenderer","hookToggle","toggleNode","labelNode","defaultTreeColumnProps","TachyonTreeColumnImpl","TachyonTreeColumn","install","app","components","componentName"],"mappings":"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"}