import {
    render as e,
    defineComponent as t,
    getCurrentInstance as n,
    createVNode as o,
    queuePostFlushCb as r,
    ref as i,
    h as a,
    onUpdated as l,
    onMounted as u,
    onUnmounted as s,
    toRefs as c,
    watchEffect as d,
    watch as p,
    computed as f,
    provide as v,
    inject as m,
    nextTick as h,
    reactive as g,
    isProxy as y
} from 'vue';
import {Popup as b, List as x, util as I, Tree as N, Autocomplete as V, Tokenizer as S, Combobox as O, DateChooser as w, DatePicker as E} from 'vrix.js';
var C = function (e, t) {
    return (
        (C =
            Object.setPrototypeOf ||
            ({__proto__: []} instanceof Array &&
                function (e, t) {
                    e.__proto__ = t;
                }) ||
            function (e, t) {
                for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
            }),
        C(e, t)
    );
};
var T = function () {
    return (
        (T =
            Object.assign ||
            function (e) {
                for (var t, n = 1, o = arguments.length; n < o; n++) for (var r in (t = arguments[n])) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
                return e;
            }),
        T.apply(this, arguments)
    );
};
function k(e, t, n) {
    if (n || 2 === arguments.length) for (var o, r = 0, i = t.length; r < i; r++) (!o && r in t) || (o || (o = Array.prototype.slice.call(t, 0, r)), (o[r] = t[r]));
    return e.concat(o || Array.prototype.slice.call(t));
}
var A = (function () {
    function r(e) {
        var t = this;
        (this.wrapper = e),
            Object.defineProperty(this.element, '__wrapper', {
                get: function () {
                    return t;
                }
            });
    }
    return (
        Object.defineProperty(r.prototype, 'instance', {
            get: function () {
                return this.wrapper.vnode.component.proxy;
            },
            enumerable: !1,
            configurable: !0
        }),
        Object.defineProperty(r.prototype, 'element', {
            get: function () {
                return this.wrapper.vnode.el;
            },
            enumerable: !1,
            configurable: !0
        }),
        (r.prototype.destroy = function () {
            e(null, this.wrapper.container);
        }),
        (r.factory = function (r, i, a) {
            return (function (r, i, a) {
                var l = r.$ || r;
                i.__setup && (i = t(T({}, i)));
                var u = i.__setup || i.setup;
                (i.__setup = u),
                    (i.setup = function (e, t) {
                        if (((n().parent = l), u)) return u(e, t);
                    });
                var s = function (t) {
                    var n = t.length > 0 ? t[0] : {},
                        r = o(i, n, T({}, l.slots)),
                        a = document.createElement('template');
                    return (a.className = 'wrapper'), l.appContext && (r.appContext = l.appContext), e(r, a), {vnode: r, container: a};
                };
                return function () {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    return new a(s(e));
                };
            })(r, i, a);
        }),
        r
    );
})();
function L(e, t) {
    var n = !!e.invalidateItem,
        o = !1;
    if (n) {
        var i = function (e) {
            o = 'render-updating' === e.type;
        };
        e.addEventListener('render-updating', i), e.addEventListener('render-update', i);
    }
    return {
        itemTemplate: function (r) {
            var i = r.item,
                a = r.index,
                l = t({item: i, index: a, nativeInstance: e, initState: r});
            return (
                n &&
                    l.onUpdated(function () {
                        o || e.invalidateItem(r.item);
                    }),
                l.element
            );
        },
        hookRenderElement: function (e) {
            return (
                e.element.__wrapper.prepare(e),
                new Promise(function (t) {
                    r(function () {
                        t(e.element);
                    });
                })
            );
        },
        hookFreeElement: function (e) {
            var t;
            null === (t = e.element.__wrapper) || void 0 === t || t.destroy();
        }
    };
}
function P() {
    return {
        item: {type: [String, Number, Object]},
        index: {type: Number},
        nativeInstance: {type: Object},
        initState: {
            type: Object,
            default: function () {
                return {};
            }
        }
    };
}
function _(e) {
    n().render = e;
}
var B = t({
        name: 'VxListItem',
        props: T({}, P()),
        setup: function (e, t) {
            var n = i(e.initState);
            return (
                _(function () {
                    var e = [];
                    return t.slots.default && n.value && e.push(t.slots.default(n.value)), a('div', e);
                }),
                {state: n}
            );
        },
        prepare: function (e) {
            this.state = e;
        }
    }),
    D = (function (e) {
        function t(t) {
            return e.call(this, t) || this;
        }
        return (
            (function (e, t) {
                if ('function' != typeof t && null !== t) throw new TypeError('Class extends value ' + String(t) + ' is not a constructor or null');
                function n() {
                    this.constructor = e;
                }
                C(e, t), (e.prototype = null === t ? Object.create(t) : ((n.prototype = t.prototype), new n()));
            })(t, e),
            (t.prototype.onUpdated = function (e) {
                this.releaseOnUpdate = l(e, this.instance._);
            }),
            (t.prototype.onMounted = function (e) {
                this.releaseOnMount = u(e, this.instance._);
            }),
            (t.prototype.prepare = function (e) {
                var t;
                null === (t = this.instance._.type.prepare) || void 0 === t || t.apply(this.instance, [e]);
            }),
            (t.prototype.destroy = function () {
                e.prototype.destroy.call(this), this.releaseOnUpdate, this.releaseOnMount;
            }),
            t
        );
    })(A),
    j = ['scrollTarget', 'chipTemplate', 'items'];
function F(e, t, n) {
    var o = function (t) {
            return e.$emit(t.type, t);
        },
        r = Object.keys(n.options).reduce(
            function (e, t) {
                var o = n.options[t];
                void 0 !== o && (e[j.indexOf(t) >= 0 ? 'post' : 'pre'][t] = o);
                return e;
            },
            {pre: {}, post: {}}
        );
    return (
        n.events.forEach(function (e) {
            return t.addEventListener(e, o);
        }),
        t.setOptions(r.pre),
        u(function () {
            t instanceof b || t.mount(e.$el, r.post);
        }),
        s(function () {
            n.events.forEach(function (e) {
                return t.removeEventListener(e, o);
            }),
                t.destroy();
        }),
        null
    );
}
function R(e, t, n) {
    void 0 === n && (n = []);
    var o = c(t),
        r = Object.keys(o).map(function (t) {
            return n.indexOf(t) >= 0
                ? d(
                      function () {
                          var n = o[t].value;
                          e[t] != n && (e[t] = n);
                      },
                      {flush: 'post'}
                  )
                : p(o[t], function (n, o) {
                      try {
                          t in e && e[t] != n && (e[t] = n);
                      } catch (e) {
                          console.warn(e);
                      }
                  });
        });
    return function () {
        r.forEach(function (e) {
            return e();
        });
    };
}
function $(e, t, o, r, a) {
    var l = n(),
        s = i(e[t]),
        c = f(function () {
            if (!(t in e)) return !1;
            var n = l.vnode.props;
            return !!(n && t in n && 'onUpdate:'.concat(t) in n);
        }),
        d = f({
            get: function () {
                return c.value ? e[t] : s.value;
            },
            set: function (e) {
                s.value !== e && ((s.value = e), null == l || l.emit('update:'.concat(t), e));
            }
        });
    p(
        d,
        function (e) {
            if (l.isMounted) void 0 === e && (e = null), o[r] != e && (o[r] = e);
            else {
                if (void 0 === e) return;
                u(function () {
                    o[r] != e && (o[r] = e);
                });
            }
        },
        {immediate: !0, flush: 'post'}
    );
    var v = function () {
        return (d.value = o[r]);
    };
    return (
        (Array.isArray(a) ? a : [a]).forEach(function (e) {
            o.addEventListener(e, v);
        }),
        d
    );
}
var M = ['collection-change', 'selection-changing', 'selection-change'],
    z = {
        modelValue: {type: [Array, Object, Number, String]},
        allowMultiple: {type: Boolean, default: !1},
        requireSelection: {type: Boolean, default: !1},
        valueField: {type: String},
        selectedItem: {type: [Object, Number, String]},
        selectedItems: {type: Array},
        useLazyValue: {type: Boolean, default: !0}
    };
function H(e, t) {
    $(e, 'modelValue', t, 'selected'.concat(null != e.valueField ? 'Value' : 'Item').concat(e.allowMultiple ? 's' : ''), 'selection-change'),
        $(e, 'selectedItem', t, 'selectedItem', 'selection-change'),
        $(e, 'selectedItems', t, 'selectedItems', 'selection-change');
}
var U = Symbol.for('ListInstance'),
    q = k(k([], M, !0), ['item-down', 'item-click', 'scroll'], !1),
    G = {
        items: {type: Array},
        labelField: {type: String, default: 'label'},
        rowCount: {type: Number, default: 0},
        scrollTarget: {
            type: [String, HTMLElement],
            validator: function (e) {
                return !!e;
            }
        }
    },
    X = t({
        name: 'VxList',
        emits: k(k([], q, !0), ['update:modelValue', 'update:selectedItem', 'update:selectedItems'], !1),
        props: T(T({}, z), G),
        setup: function (e) {
            var t = n(),
                o = new x(),
                r = A.factory(t, B, D),
                i = f(function () {
                    return (e.items && o.collection) || null;
                });
            return (
                R(o, e),
                F(t.proxy, o, {events: q, options: T(T(T({}, e), {resizable: !0, useAsync: !0}), L(o, r))}),
                H(e, o),
                _(function () {
                    return a('div', {class: 'x-list-wrap'});
                }),
                v(U, {
                    list: o,
                    itemToLabel: function (t) {
                        return I.getValue(t, e.labelField);
                    }
                }),
                {collection: i, nativeInstance: o}
            );
        },
        methods: {
            scrollToIndex: function (e) {
                this.nativeInstance.scrollToIndex(e);
            },
            invalidate: function () {
                this.nativeInstance.invalidate();
            }
        }
    }),
    Y = t({
        name: 'VxTreeItem',
        props: T({}, P()),
        setup: function (e, t) {
            var n = m(J),
                o = i(e.initState),
                r = f(function () {
                    return n.itemToLabel(o.value.item);
                }),
                l = function (t) {
                    e.nativeInstance.toggleNode(t);
                };
            return (
                _(function () {
                    var n = [];
                    if (t.slots.default && o.value) n.push(t.slots.default(T(T({}, o.value), {hookToggle: l})));
                    else {
                        var i = a(
                                'button',
                                {
                                    class: 'x-toggle',
                                    onMousedown: function (e) {
                                        e.preventDefault();
                                    },
                                    onClick: function (t) {
                                        t.preventDefault(), e.nativeInstance.toggleNode(o.value.item);
                                    }
                                },
                                [a('i', {class: 'x-toggle-icon'})]
                            ),
                            u = a('div', {class: 'x-label'}, r.value);
                        n.push(i, u);
                    }
                    return a('div', n);
                }),
                {state: o}
            );
        },
        prepare: function (e) {
            this.state = e;
        }
    }),
    J = Symbol.for('TreeInstance'),
    K = k(k([], q, !0), ['node-change'], !1),
    Q = t({
        name: 'VxTree',
        emits: k(k([], K, !0), ['update:modelValue', 'update:selectedItem', 'update:selectedItems'], !1),
        props: T(T(T({}, z), G), {childrenField: {type: String, default: 'children'}, autoExpandLevel: {type: Number, default: 0}}),
        setup: function (e) {
            var t = n(),
                o = new N(),
                r = A.factory(t, Y, D),
                i = f(function () {
                    return (e.items && o.collection) || null;
                });
            return (
                R(o, e),
                F(t.proxy, o, {events: K, options: T(T(T({}, e), {resizable: !0, useAsync: !0}), L(o, r))}),
                H(e, o),
                _(function () {
                    return a('div', {class: 'x-tree-wrap'});
                }),
                v(J, {
                    list: o,
                    itemToLabel: function (t) {
                        return I.getValue(t, e.labelField);
                    }
                }),
                {collection: i, nativeInstance: o}
            );
        },
        methods: {
            scrollToIndex: function (e) {
                this.nativeInstance.scrollToIndex(e);
            },
            invalidate: function () {
                this.nativeInstance.invalidate();
            },
            getParentNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.getParentNode(e);
            },
            getAncestorNodes: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.getAncestorNodes(e);
            },
            getDescendantNodes: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.getDescendantNodes(e);
            },
            getSiblingNodes: function (e) {
                var t = this.getParentNode(e);
                return this.getChildren(t);
            },
            getChildren: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.getChildren(e);
            },
            hasChildren: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.hasChildren(e);
            },
            addNode: function (e, t) {
                var n;
                return null === (n = this.collection) || void 0 === n ? void 0 : n.addNode(e, t);
            },
            addNodeAt: function (e, t, n) {
                var o;
                return null === (o = this.collection) || void 0 === o ? void 0 : o.addNodeAt(e, t, n);
            },
            addNodes: function (e, t) {
                var n;
                return null === (n = this.collection) || void 0 === n ? void 0 : n.addNodes(e, t);
            },
            addNodesAt: function (e, t, n) {
                var o;
                return null === (o = this.collection) || void 0 === o ? void 0 : o.addNodesAt(e, t, n);
            },
            removeNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.removeNode(e);
            },
            contains: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.contains(e);
            },
            isExpandedNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.isExpandedNode(e);
            },
            expandNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.expandNode(e);
            },
            expandAll: function () {
                var e;
                null === (e = this.collection) || void 0 === e || e.expandAll();
            },
            collapseNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.collapseNode(e);
            },
            collapseAll: function () {
                var e;
                null === (e = this.collection) || void 0 === e || e.collapseAll();
            },
            toggleNode: function (e) {
                this.isExpandedNode(e) ? this.collapseNode(e) : this.expandNode(e);
            },
            setExpandedNodes: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.setExpandedNodes(e);
            },
            getExpandedNodes: function () {
                var e;
                return null === (e = this.collection) || void 0 === e ? void 0 : e.getExpandedNodes();
            },
            getNodeLevel: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.getNodeLevel(e);
            },
            isBranchNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.isBranchNode(e);
            },
            isLeafNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.isLeafNode(e);
            },
            find: function (e, t, n) {
                var o;
                return void 0 === t && (t = null), void 0 === n && (n = !1), null === (o = this.collection) || void 0 === o ? void 0 : o.find(e, t, n);
            },
            findOne: function (e, t, n) {
                var o;
                return void 0 === t && (t = null), void 0 === n && (n = !1), null === (o = this.collection) || void 0 === o ? void 0 : o.findOne(e, t, n);
            }
        }
    }),
    W = Symbol.for('NativePopupInstance'),
    Z = ['open', 'close', 'cancel-open', 'cancel-close'],
    ee = {
        modelValue: {type: Boolean, default: !1},
        modal: {type: Boolean, default: !1},
        contentAlign: {type: String},
        contentByGlobal: {type: String},
        anchor: {type: [String, HTMLElement]},
        anchorAlign: {type: String},
        offsetX: {type: Number, default: 0},
        offsetY: {type: Number, default: 0},
        lockOutside: {type: Boolean, default: !1},
        alwaysOnTop: {type: Boolean, default: !1},
        priority: {type: Number, default: 0},
        nested: {type: Boolean, default: !0},
        autoFocus: {type: Boolean, default: !0},
        hitAreas: {
            type: Array,
            default: function () {
                return [];
            }
        },
        closeOnOutsideDown: {type: Boolean, default: !1},
        closeOnEscape: {type: Boolean, default: !1},
        closeOnEvents: {type: Array, default: ['close']},
        usePreRender: {type: Boolean, default: !1}
    },
    te = t({
        name: 'VxPopup',
        emits: k(k([], Z, !0), ['update:modelValue'], !1),
        props: T({}, ee),
        setup: function (e, t) {
            var o = n(),
                r = new b(),
                l = i(!1);
            if (!e.usePreRender)
                var s = p(
                    function () {
                        return e.modelValue;
                    },
                    function (e) {
                        e &&
                            ((l.value = !0),
                            h().then(function () {
                                return s();
                            }));
                    },
                    {immediate: !0}
                );
            function c(e) {
                return (l.value = !0), r.open(e), this;
            }
            function d(e) {
                return r.close(e), this;
            }
            return (
                $(e, 'modelValue', r, 'isOpened', Z),
                R(r, e),
                F(o.proxy, r, {
                    events: Z,
                    options: T(T({}, e), {
                        content: new Promise(function (t, n) {
                            u(function () {
                                if (e.usePreRender || l.value) t(o.proxy.$el.firstElementChild);
                                else
                                    var n = p(
                                        l,
                                        function (e) {
                                            e && (t(o.proxy.$el.firstElementChild), n());
                                        },
                                        {immediate: !0, flush: 'post'}
                                    );
                            });
                        })
                    })
                }),
                v(W, r),
                _(function () {
                    return e.usePreRender || l.value ? a('template', t.slots.default()) : a('template');
                }),
                {
                    nativeInstance: r,
                    get isOpened() {
                        return r.isOpened;
                    },
                    opening: function (e) {
                        return r.opening(e), this;
                    },
                    opened: function (e) {
                        return r.opened(e), this;
                    },
                    closing: function (e) {
                        return r.closing(e), this;
                    },
                    closed: function (e) {
                        return r.closed(e), this;
                    },
                    open: c,
                    close: d,
                    toggle: function (e) {
                        return r.isOpened ? d(e) : c(e);
                    },
                    invalidate: function () {
                        r.invalidate();
                    },
                    destroy: function () {
                        r.destroy();
                    }
                }
            );
        }
    }),
    ne = {
        name: 'VxSuggestItem',
        props: T({}, P()),
        setup: function (e) {
            return {state: g(e.initState)};
        },
        methods: {
            genLabel: function () {
                return this.$slots.suggest ? this.$slots.suggest(this.state) : a('span', {innerHTML: this.state.html});
            },
            genContent: function () {
                return this.state.item ? [this.genLabel()] : [];
            }
        },
        render: function () {
            return a('div', this.genContent());
        },
        prepare: function (e) {
            for (var t in e) 'element' !== t && (this.state[t] = e[t]);
        }
    },
    oe = t({
        name: 'VxSuggestStatus',
        props: {slotName: {type: String}},
        setup: function (e, t) {
            var n = t.slots[e.slotName],
                o = m(re);
            _(function () {
                return a('div', n(o.inputValue.value));
            });
        }
    }),
    re = Symbol.for('AutocompleteInstance'),
    ie = k(k([], M, !0), ['suggest-select', 'suggest-opening', 'suggest-closing', 'suggest-open', 'suggest-close', 'suggest-caret-change', 'value-change', 'focusin', 'focusout'], !1),
    ae = {
        label: {type: String, default: ''},
        placeholder: {type: String},
        labelField: {type: [String, Function], default: null},
        closeOnSelect: {type: Boolean, default: !0},
        closeOnFocusOut: {type: Boolean, default: !0},
        closeOnOutsideDown: {type: Boolean, default: !0},
        inputValue: {type: String, default: ''},
        minChar: {type: Number, default: 0},
        clearable: {type: Boolean, default: !1}
    },
    le = {
        suggestSource: {type: [Array, Function, Promise]},
        suggestCount: {type: Number, default: 6},
        hookSuggestItems: {
            type: Function,
            default: function (e) {
                return y(e) || (e = g(e)), e;
            }
        }
    };
function ue(e) {
    return {
        clear: function () {
            e.clear();
        }
    };
}
function se(e, t) {
    var n = e.slots,
        o = n.nodata,
        r = n.progress;
    if (o || r) {
        var i = A.factory(e, oe, A);
        u(function () {
            o && (t.suggestNodataStateTemplate = i({slotName: 'nodata'}).element), r && (t.suggestProgressStateTemplate = i({slotName: 'progress'}).element);
        });
    }
}
var ce = t({
        name: 'VxAutocomplete',
        emits: k(k([], ie, !0), ['update:modelValue', 'update:selectedItem'], !1),
        props: T(T(T({}, ae), le), {modelValue: {type: String}, selectedItem: {type: [String, Number, Object]}}),
        setup: function (e) {
            var t = n(),
                o = new V(),
                r = A.factory(t, ne, D),
                i = L(o.suggestList.setOptions({resizable: !0, useAsync: !0}), r),
                a = i.itemTemplate,
                l = i.hookRenderElement,
                u = i.hookFreeElement;
            R(o, e), F(t.proxy, o, {events: ie, options: T(T({}, e), {suggestItemTemplate: a, hookRenderSuggestElement: l, hookFreeSuggestElement: u})});
            var s = $(e, 'modelValue', o, 'inputValue', 'value-change');
            return (
                $(e, 'selectedItem', o, 'selectedItem', 'selection-change'),
                v(re, {
                    get instance() {
                        return t;
                    },
                    get inputValue() {
                        return s;
                    }
                }),
                se(t, o),
                T({nativeInstance: o}, ue(o))
            );
        },
        methods: {},
        render: function () {
            return a('div', {class: 'x-autocomplete-wrap'});
        }
    }),
    de = t({
        name: 'VxChip',
        props: {item: {type: [Object, String, Number]}, nativeInstance: {type: Object}},
        setup: function (e) {
            return {
                state: i({}),
                slotProps: f(function () {
                    return {
                        item: e.item,
                        label: e.nativeInstance.itemToLabel(e.item),
                        remove: function () {
                            return e.nativeInstance.removeSelectedItem(e.item);
                        }
                    };
                })
            };
        },
        methods: {
            genLabel: function () {
                return a('span', {class: 'x-label'}, this.slotProps.label);
            },
            genRemover: function () {
                return a('button', {
                    class: 'x-remover',
                    onMousedown: function (e) {
                        e.preventDefault();
                    },
                    onClick: function (e) {
                        e.preventDefault();
                    }
                });
            },
            genContent: function () {
                return this.$slots.chip ? this.$slots.chip(this.slotProps) : this.slotProps.item ? [this.genLabel(), this.genRemover()] : [this.genRemover()];
            }
        },
        render: function () {
            return a('div', {class: 'x-select-chip'}, this.genContent());
        }
    }),
    pe = t({
        name: 'VxTokenizer',
        emits: k(k([], ie, !0), ['update:modelValue', 'update:selectedItem', 'update:selectedItems', 'update:inputValue'], !1),
        props: T(T(T(T({}, ae), le), z), {allowMultiple: {type: Boolean, default: !0}, allowInputValue: {type: Boolean, default: !1}}),
        setup: function (e, t) {
            var o = n(),
                r = new S(),
                i = A.factory(o, ne, D),
                a = A.factory(o, de, D),
                l = L(r.suggestList.setOptions({resizable: !0, useAsync: !0}), i),
                u = l.itemTemplate,
                s = l.hookRenderElement,
                c = l.hookFreeElement;
            R(r, e),
                F(o.proxy, r, {
                    events: ie,
                    options: T(T({}, e), {
                        chipTemplate: function (e, t) {
                            return a({item: e, nativeInstance: r}).element;
                        },
                        suggestItemTemplate: u,
                        hookRenderSuggestElement: s,
                        hookFreeSuggestElement: c
                    })
                }),
                H(e, r);
            var d = $(e, 'inputValue', r, 'inputValue', 'value-change');
            return (
                v(re, {
                    get instance() {
                        return o;
                    },
                    get inputValue() {
                        return d;
                    }
                }),
                se(o, r),
                T({nativeInstance: r}, ue(r))
            );
        },
        render: function () {
            return a('div', {class: 'x-tokenizer-wrap'});
        }
    }),
    fe = t({
        name: 'VxTextChip',
        props: {item: {type: [String, Number, Object]}, nativeInstance: {type: Object}},
        setup: function (e) {
            return {
                label: f(function () {
                    return e.nativeInstance.itemToLabel(e.item);
                })
            };
        },
        methods: {
            genLabel: function () {
                return a('span', {class: 'x-label'}, this.label);
            },
            genContent: function () {
                return this.item ? (this.$slots.chip ? this.$slots.chip({item: this.item, label: this.label}) : [this.genLabel()]) : [];
            }
        },
        render: function () {
            return a('div', {class: 'x-select-text'}, this.genContent());
        }
    }),
    ve = Symbol.for('ComboboxInstance'),
    me = t({
        name: 'VxCombobox',
        emits: k(k([], ie, !0), ['update:modelValue', 'update:selectedItem', 'update:selectedItems', 'update:inputValue'], !1),
        props: T(T(T({}, ae), z), {items: {type: Array}, filterable: {type: Boolean, default: !1}, removable: {type: Boolean, default: !1}}),
        setup: function (e, t) {
            var o = n(),
                r = new O(),
                i = A.factory(o, ne, D),
                a = A.factory(o, de, D),
                l = A.factory(o, fe, D),
                u = L(r.suggestList.setOptions({resizable: !0, useAsync: !0}), i),
                s = u.itemTemplate,
                c = u.hookRenderElement,
                d = u.hookFreeElement;
            return (
                R(r, e),
                F(o.proxy, r, {
                    events: ie,
                    options: T(T({}, e), {
                        chipTemplate: function (e, t) {
                            return a({item: e, nativeInstance: r}).element;
                        },
                        singleChipTemplate: function (e, t) {
                            return l({item: e, nativeInstance: r}).element;
                        },
                        suggestItemTemplate: s,
                        hookRenderSuggestElement: c,
                        hookFreeSuggestElement: d
                    })
                }),
                H(e, r),
                $(e, 'inputValue', r, 'inputValue', 'value-change'),
                v(ve, {}),
                T({nativeInstance: r}, ue(r))
            );
        },
        render: function () {
            return a('div', {class: 'x-combobox-wrap'});
        }
    }),
    he = t({
        name: 'VxDateChooserItem',
        props: T({}, P()),
        setup: function (e) {
            return {state: g(e.initState)};
        },
        methods: {
            genContent: function () {
                var e = [];
                return this.$slots.default && this.state.item && e.push(this.$slots.default(this.state)), e;
            }
        },
        render: function () {
            return a('div', this.genContent());
        },
        prepare: function (e) {
            for (var t in e) 'element' !== t && (this.state[t] = e[t]);
        }
    }),
    ge = Symbol.for('DateChooserInstance'),
    ye = ['state-change', 'item-down', 'item-click', 'selection-changing', 'selection-change'],
    be = {modelValue: {type: [Date, Object]}, type: {type: String, default: 'day'}, today: {type: Date, default: new Date()}, allowRange: {type: Boolean, default: !1}, allowDate: {type: Function}},
    xe = t({
        name: 'VxDateChooser',
        emits: k(k([], ye, !0), ['update:modelValue'], !1),
        props: T({}, be),
        setup: function (e) {
            var t = n(),
                o = new w(),
                r = null;
            if (t.slots.default) {
                var i = A.factory(t, he, D);
                r = T(T(T({}, e), L(o, i)), {useAsync: !0});
            } else r = e;
            return R(o, e), F(t.proxy, o, {events: ye, options: r}), $(e, 'modelValue', o, e.allowRange ? 'selectedRange' : 'selectedDate', 'selection-change'), v(ge, {}), {nativeInstance: o};
        },
        methods: {
            getState: function () {
                return this.nativeInstance.state;
            },
            reset: function () {
                return this.nativeInstance.reset();
            },
            setCurrentDate: function (e) {
                return this.nativeInstance.setCurrentDate(e);
            }
        },
        render: function () {
            return a('div', {class: 'x-date-chooser-wrap'});
        }
    }),
    Ie = Symbol.for('DatePickerInstance'),
    Ne = k(k([], ye, !0), ['date-picker-opening', 'date-picker-closing', 'date-picker-open', 'date-picker-close'], !1),
    Ve = t({
        name: 'VxDatePicker',
        emits: k(k([], Ne, !0), ['update:modelValue'], !1),
        props: T(T({}, be), {label: {type: String, default: ''}, clearable: {type: Boolean, default: !1}}),
        setup: function (e) {
            var t = n(),
                o = new E(),
                r = null;
            if (t.slots.default) {
                var i = L(o, A.factory(t, he, D)),
                    a = i.itemTemplate,
                    l = i.hookRenderElement,
                    u = i.hookFreeElement;
                r = T(T({}, e), {dateChooserItemTemplate: a, dateChooserHookRenderElement: l, dateChooserHookFreeElement: u});
            } else r = e;
            return R(o, e), F(t.proxy, o, {events: Ne, options: r}), $(e, 'modelValue', o, e.allowRange ? 'selectedRange' : 'selectedDate', 'selection-change'), v(Ie, {}), {nativeInstance: o};
        },
        methods: {
            reset: function () {
                return this.nativeInstance.reset();
            },
            setCurrentDate: function (e) {
                return this.nativeInstance.setCurrentDate(e);
            }
        },
        render: function () {
            return a('div', {class: 'x-date-picker-wrap'});
        }
    }),
    Se = Object.freeze({__proto__: null, VxList: X, VxTree: Q, VxPopup: te, VxAutocomplete: ce, VxTokenizer: pe, VxCombobox: me, VxDateChooser: xe, VxDatePicker: Ve}),
    Oe = function (e) {
        Object.entries(Se).forEach(function (t) {
            var n = t[0],
                o = t[1];
            e.component(n, o);
        });
    };
export {ce as VxAutocomplete, me as VxCombobox, xe as VxDateChooser, Ve as VxDatePicker, X as VxList, te as VxPopup, pe as VxTokenizer, Q as VxTree, Oe as default};
