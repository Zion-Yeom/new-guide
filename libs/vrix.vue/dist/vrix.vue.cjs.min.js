'use strict';
Object.defineProperty(exports, '__esModule', {value: !0});
var e = require('vue'),
    t = require('vrix.js'),
    n = function (e, t) {
        return (
            (n =
                Object.setPrototypeOf ||
                ({__proto__: []} instanceof Array &&
                    function (e, t) {
                        e.__proto__ = t;
                    }) ||
                function (e, t) {
                    for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
                }),
            n(e, t)
        );
    };
var o = function () {
    return (
        (o =
            Object.assign ||
            function (e) {
                for (var t, n = 1, o = arguments.length; n < o; n++) for (var r in (t = arguments[n])) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
                return e;
            }),
        o.apply(this, arguments)
    );
};
function r(e, t, n) {
    if (n || 2 === arguments.length) for (var o, r = 0, i = t.length; r < i; r++) (!o && r in t) || (o || (o = Array.prototype.slice.call(t, 0, r)), (o[r] = t[r]));
    return e.concat(o || Array.prototype.slice.call(t));
}
var i = (function () {
    function t(e) {
        var t = this;
        (this.wrapper = e),
            Object.defineProperty(this.element, '__wrapper', {
                get: function () {
                    return t;
                }
            });
    }
    return (
        Object.defineProperty(t.prototype, 'instance', {
            get: function () {
                return this.wrapper.vnode.component.proxy;
            },
            enumerable: !1,
            configurable: !0
        }),
        Object.defineProperty(t.prototype, 'element', {
            get: function () {
                return this.wrapper.vnode.el;
            },
            enumerable: !1,
            configurable: !0
        }),
        (t.prototype.destroy = function () {
            e.render(null, this.wrapper.container);
        }),
        (t.factory = function (t, n, r) {
            return (function (t, n, r) {
                var i = t.$ || t;
                n.__setup && (n = e.defineComponent(o({}, n)));
                var a = n.__setup || n.setup;
                (n.__setup = a),
                    (n.setup = function (t, n) {
                        if (((e.getCurrentInstance().parent = i), a)) return a(t, n);
                    });
                var l = function (t) {
                    var r = t.length > 0 ? t[0] : {},
                        a = e.createVNode(n, r, o({}, i.slots)),
                        l = document.createElement('template');
                    return (l.className = 'wrapper'), i.appContext && (a.appContext = i.appContext), e.render(a, l), {vnode: a, container: l};
                };
                return function () {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    return new r(l(e));
                };
            })(t, n, r);
        }),
        t
    );
})();
function a(t, n) {
    var o = !!t.invalidateItem,
        r = !1;
    if (o) {
        var i = function (e) {
            r = 'render-updating' === e.type;
        };
        t.addEventListener('render-updating', i), t.addEventListener('render-update', i);
    }
    return {
        itemTemplate: function (e) {
            var i = e.item,
                a = e.index,
                l = n({item: i, index: a, nativeInstance: t, initState: e});
            return (
                o &&
                    l.onUpdated(function () {
                        r || t.invalidateItem(e.item);
                    }),
                l.element
            );
        },
        hookRenderElement: function (t) {
            return (
                t.element.__wrapper.prepare(t),
                new Promise(function (n) {
                    e.queuePostFlushCb(function () {
                        n(t.element);
                    });
                })
            );
        },
        hookFreeElement: function (e) {
            var t;
            null === (t = e.element.__wrapper) || void 0 === t || t.destroy();
        }
    };
}
function l() {
    return {
        item: {type: [String, Number, Object]},
        index: {type: Number},
        nativeInstance: {type: Object},
        initState: {
            type: Object,
            default: function () {
                return {};
            }
        }
    };
}
function u(t) {
    e.getCurrentInstance().render = t;
}
var s = e.defineComponent({
        name: 'VxListItem',
        props: o({}, l()),
        setup: function (t, n) {
            var o = e.ref(t.initState);
            return (
                u(function () {
                    var t = [];
                    return n.slots.default && o.value && t.push(n.slots.default(o.value)), e.h('div', t);
                }),
                {state: o}
            );
        },
        prepare: function (e) {
            this.state = e;
        }
    }),
    c = (function (t) {
        function o(e) {
            return t.call(this, e) || this;
        }
        return (
            (function (e, t) {
                if ('function' != typeof t && null !== t) throw new TypeError('Class extends value ' + String(t) + ' is not a constructor or null');
                function o() {
                    this.constructor = e;
                }
                n(e, t), (e.prototype = null === t ? Object.create(t) : ((o.prototype = t.prototype), new o()));
            })(o, t),
            (o.prototype.onUpdated = function (t) {
                this.releaseOnUpdate = e.onUpdated(t, this.instance._);
            }),
            (o.prototype.onMounted = function (t) {
                this.releaseOnMount = e.onMounted(t, this.instance._);
            }),
            (o.prototype.prepare = function (e) {
                var t;
                null === (t = this.instance._.type.prepare) || void 0 === t || t.apply(this.instance, [e]);
            }),
            (o.prototype.destroy = function () {
                t.prototype.destroy.call(this), this.releaseOnUpdate, this.releaseOnMount;
            }),
            o
        );
    })(i),
    d = ['scrollTarget', 'chipTemplate', 'items'];
function p(n, o, r) {
    var i = function (e) {
            return n.$emit(e.type, e);
        },
        a = Object.keys(r.options).reduce(
            function (e, t) {
                var n = r.options[t];
                void 0 !== n && (e[d.indexOf(t) >= 0 ? 'post' : 'pre'][t] = n);
                return e;
            },
            {pre: {}, post: {}}
        );
    return (
        r.events.forEach(function (e) {
            return o.addEventListener(e, i);
        }),
        o.setOptions(a.pre),
        e.onMounted(function () {
            o instanceof t.Popup || o.mount(n.$el, a.post);
        }),
        e.onUnmounted(function () {
            r.events.forEach(function (e) {
                return o.removeEventListener(e, i);
            }),
                o.destroy();
        }),
        null
    );
}
function f(t, n, o) {
    void 0 === o && (o = []);
    var r = e.toRefs(n),
        i = Object.keys(r).map(function (n) {
            return o.indexOf(n) >= 0
                ? e.watchEffect(
                      function () {
                          var e = r[n].value;
                          t[n] != e && (t[n] = e);
                      },
                      {flush: 'post'}
                  )
                : e.watch(r[n], function (e, o) {
                      try {
                          n in t && t[n] != e && (t[n] = e);
                      } catch (e) {
                          console.warn(e);
                      }
                  });
        });
    return function () {
        i.forEach(function (e) {
            return e();
        });
    };
}
function m(t, n, o, r, i) {
    var a = e.getCurrentInstance(),
        l = e.ref(t[n]),
        u = e.computed(function () {
            if (!(n in t)) return !1;
            var e = a.vnode.props;
            return !!(e && n in e && 'onUpdate:'.concat(n) in e);
        }),
        s = e.computed({
            get: function () {
                return u.value ? t[n] : l.value;
            },
            set: function (e) {
                l.value !== e && ((l.value = e), null == a || a.emit('update:'.concat(n), e));
            }
        });
    e.watch(
        s,
        function (t) {
            if (a.isMounted) void 0 === t && (t = null), o[r] != t && (o[r] = t);
            else {
                if (void 0 === t) return;
                e.onMounted(function () {
                    o[r] != t && (o[r] = t);
                });
            }
        },
        {immediate: !0, flush: 'post'}
    );
    var c = function () {
        return (s.value = o[r]);
    };
    return (
        (Array.isArray(i) ? i : [i]).forEach(function (e) {
            o.addEventListener(e, c);
        }),
        s
    );
}
var v = ['collection-change', 'selection-changing', 'selection-change'],
    h = {
        modelValue: {type: [Array, Object, Number, String]},
        allowMultiple: {type: Boolean, default: !1},
        requireSelection: {type: Boolean, default: !1},
        valueField: {type: String},
        selectedItem: {type: [Object, Number, String]},
        selectedItems: {type: Array},
        useLazyValue: {type: Boolean, default: !0}
    };
function g(e, t) {
    m(e, 'modelValue', t, 'selected'.concat(null != e.valueField ? 'Value' : 'Item').concat(e.allowMultiple ? 's' : ''), 'selection-change'),
        m(e, 'selectedItem', t, 'selectedItem', 'selection-change'),
        m(e, 'selectedItems', t, 'selectedItems', 'selection-change');
}
var y = Symbol.for('ListInstance'),
    x = r(r([], v, !0), ['item-down', 'item-click', 'scroll'], !1),
    b = {
        items: {type: Array},
        labelField: {type: String, default: 'label'},
        rowCount: {type: Number, default: 0},
        scrollTarget: {
            type: [String, HTMLElement],
            validator: function (e) {
                return !!e;
            }
        }
    },
    I = e.defineComponent({
        name: 'VxList',
        emits: r(r([], x, !0), ['update:modelValue', 'update:selectedItem', 'update:selectedItems'], !1),
        props: o(o({}, h), b),
        setup: function (n) {
            var r = e.getCurrentInstance(),
                l = new t.List(),
                d = i.factory(r, s, c),
                m = e.computed(function () {
                    return (n.items && l.collection) || null;
                });
            return (
                f(l, n),
                p(r.proxy, l, {events: x, options: o(o(o({}, n), {resizable: !0, useAsync: !0}), a(l, d))}),
                g(n, l),
                u(function () {
                    return e.h('div', {class: 'x-list-wrap'});
                }),
                e.provide(y, {
                    list: l,
                    itemToLabel: function (e) {
                        return t.util.getValue(e, n.labelField);
                    }
                }),
                {collection: m, nativeInstance: l}
            );
        },
        methods: {
            scrollToIndex: function (e) {
                this.nativeInstance.scrollToIndex(e);
            },
            invalidate: function () {
                this.nativeInstance.invalidate();
            }
        }
    }),
    C = e.defineComponent({
        name: 'VxTreeItem',
        props: o({}, l()),
        setup: function (t, n) {
            var r = e.inject(V),
                i = e.ref(t.initState),
                a = e.computed(function () {
                    return r.itemToLabel(i.value.item);
                }),
                l = function (e) {
                    t.nativeInstance.toggleNode(e);
                };
            return (
                u(function () {
                    var r = [];
                    if (n.slots.default && i.value) r.push(n.slots.default(o(o({}, i.value), {hookToggle: l})));
                    else {
                        var u = e.h(
                                'button',
                                {
                                    class: 'x-toggle',
                                    onMousedown: function (e) {
                                        e.preventDefault();
                                    },
                                    onClick: function (e) {
                                        e.preventDefault(), t.nativeInstance.toggleNode(i.value.item);
                                    }
                                },
                                [e.h('i', {class: 'x-toggle-icon'})]
                            ),
                            s = e.h('div', {class: 'x-label'}, a.value);
                        r.push(u, s);
                    }
                    return e.h('div', r);
                }),
                {state: i}
            );
        },
        prepare: function (e) {
            this.state = e;
        }
    }),
    V = Symbol.for('TreeInstance'),
    N = r(r([], x, !0), ['node-change'], !1),
    w = e.defineComponent({
        name: 'VxTree',
        emits: r(r([], N, !0), ['update:modelValue', 'update:selectedItem', 'update:selectedItems'], !1),
        props: o(o(o({}, h), b), {childrenField: {type: String, default: 'children'}, autoExpandLevel: {type: Number, default: 0}}),
        setup: function (n) {
            var r = e.getCurrentInstance(),
                l = new t.Tree(),
                s = i.factory(r, C, c),
                d = e.computed(function () {
                    return (n.items && l.collection) || null;
                });
            return (
                f(l, n),
                p(r.proxy, l, {events: N, options: o(o(o({}, n), {resizable: !0, useAsync: !0}), a(l, s))}),
                g(n, l),
                u(function () {
                    return e.h('div', {class: 'x-tree-wrap'});
                }),
                e.provide(V, {
                    list: l,
                    itemToLabel: function (e) {
                        return t.util.getValue(e, n.labelField);
                    }
                }),
                {collection: d, nativeInstance: l}
            );
        },
        methods: {
            scrollToIndex: function (e) {
                this.nativeInstance.scrollToIndex(e);
            },
            invalidate: function () {
                this.nativeInstance.invalidate();
            },
            getParentNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.getParentNode(e);
            },
            getAncestorNodes: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.getAncestorNodes(e);
            },
            getDescendantNodes: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.getDescendantNodes(e);
            },
            getSiblingNodes: function (e) {
                var t = this.getParentNode(e);
                return this.getChildren(t);
            },
            getChildren: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.getChildren(e);
            },
            hasChildren: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.hasChildren(e);
            },
            addNode: function (e, t) {
                var n;
                return null === (n = this.collection) || void 0 === n ? void 0 : n.addNode(e, t);
            },
            addNodeAt: function (e, t, n) {
                var o;
                return null === (o = this.collection) || void 0 === o ? void 0 : o.addNodeAt(e, t, n);
            },
            addNodes: function (e, t) {
                var n;
                return null === (n = this.collection) || void 0 === n ? void 0 : n.addNodes(e, t);
            },
            addNodesAt: function (e, t, n) {
                var o;
                return null === (o = this.collection) || void 0 === o ? void 0 : o.addNodesAt(e, t, n);
            },
            removeNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.removeNode(e);
            },
            contains: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.contains(e);
            },
            isExpandedNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.isExpandedNode(e);
            },
            expandNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.expandNode(e);
            },
            expandAll: function () {
                var e;
                null === (e = this.collection) || void 0 === e || e.expandAll();
            },
            collapseNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.collapseNode(e);
            },
            collapseAll: function () {
                var e;
                null === (e = this.collection) || void 0 === e || e.collapseAll();
            },
            toggleNode: function (e) {
                this.isExpandedNode(e) ? this.collapseNode(e) : this.expandNode(e);
            },
            setExpandedNodes: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.setExpandedNodes(e);
            },
            getExpandedNodes: function () {
                var e;
                return null === (e = this.collection) || void 0 === e ? void 0 : e.getExpandedNodes();
            },
            getNodeLevel: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.getNodeLevel(e);
            },
            isBranchNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.isBranchNode(e);
            },
            isLeafNode: function (e) {
                var t;
                return null === (t = this.collection) || void 0 === t ? void 0 : t.isLeafNode(e);
            },
            find: function (e, t, n) {
                var o;
                return void 0 === t && (t = null), void 0 === n && (n = !1), null === (o = this.collection) || void 0 === o ? void 0 : o.find(e, t, n);
            },
            findOne: function (e, t, n) {
                var o;
                return void 0 === t && (t = null), void 0 === n && (n = !1), null === (o = this.collection) || void 0 === o ? void 0 : o.findOne(e, t, n);
            }
        }
    }),
    O = Symbol.for('NativePopupInstance'),
    S = ['open', 'close', 'cancel-open', 'cancel-close'],
    E = {
        modelValue: {type: Boolean, default: !1},
        modal: {type: Boolean, default: !1},
        contentAlign: {type: String},
        contentByGlobal: {type: String},
        anchor: {type: [String, HTMLElement]},
        anchorAlign: {type: String},
        offsetX: {type: Number, default: 0},
        offsetY: {type: Number, default: 0},
        lockOutside: {type: Boolean, default: !1},
        alwaysOnTop: {type: Boolean, default: !1},
        priority: {type: Number, default: 0},
        nested: {type: Boolean, default: !0},
        autoFocus: {type: Boolean, default: !0},
        hitAreas: {
            type: Array,
            default: function () {
                return [];
            }
        },
        closeOnOutsideDown: {type: Boolean, default: !1},
        closeOnEscape: {type: Boolean, default: !1},
        closeOnEvents: {type: Array, default: ['close']},
        usePreRender: {type: Boolean, default: !1}
    },
    T = e.defineComponent({
        name: 'VxPopup',
        emits: r(r([], S, !0), ['update:modelValue'], !1),
        props: o({}, E),
        setup: function (n, r) {
            var i = e.getCurrentInstance(),
                a = new t.Popup(),
                l = e.ref(!1);
            if (!n.usePreRender)
                var s = e.watch(
                    function () {
                        return n.modelValue;
                    },
                    function (t) {
                        t &&
                            ((l.value = !0),
                            e.nextTick().then(function () {
                                return s();
                            }));
                    },
                    {immediate: !0}
                );
            function c(e) {
                return (l.value = !0), a.open(e), this;
            }
            function d(e) {
                return a.close(e), this;
            }
            return (
                m(n, 'modelValue', a, 'isOpened', S),
                f(a, n),
                p(i.proxy, a, {
                    events: S,
                    options: o(o({}, n), {
                        content: new Promise(function (t, o) {
                            e.onMounted(function () {
                                if (n.usePreRender || l.value) t(i.proxy.$el.firstElementChild);
                                else
                                    var o = e.watch(
                                        l,
                                        function (e) {
                                            e && (t(i.proxy.$el.firstElementChild), o());
                                        },
                                        {immediate: !0, flush: 'post'}
                                    );
                            });
                        })
                    })
                }),
                e.provide(O, a),
                u(function () {
                    return n.usePreRender || l.value ? e.h('template', r.slots.default()) : e.h('template');
                }),
                {
                    nativeInstance: a,
                    get isOpened() {
                        return a.isOpened;
                    },
                    opening: function (e) {
                        return a.opening(e), this;
                    },
                    opened: function (e) {
                        return a.opened(e), this;
                    },
                    closing: function (e) {
                        return a.closing(e), this;
                    },
                    closed: function (e) {
                        return a.closed(e), this;
                    },
                    open: c,
                    close: d,
                    toggle: function (e) {
                        return a.isOpened ? d(e) : c(e);
                    },
                    invalidate: function () {
                        a.invalidate();
                    },
                    destroy: function () {
                        a.destroy();
                    }
                }
            );
        }
    }),
    k = {
        name: 'VxSuggestItem',
        props: o({}, l()),
        setup: function (t) {
            return {state: e.reactive(t.initState)};
        },
        methods: {
            genLabel: function () {
                return this.$slots.suggest ? this.$slots.suggest(this.state) : e.h('span', {innerHTML: this.state.html});
            },
            genContent: function () {
                return this.state.item ? [this.genLabel()] : [];
            }
        },
        render: function () {
            return e.h('div', this.genContent());
        },
        prepare: function (e) {
            for (var t in e) 'element' !== t && (this.state[t] = e[t]);
        }
    },
    A = e.defineComponent({
        name: 'VxSuggestStatus',
        props: {slotName: {type: String}},
        setup: function (t, n) {
            var o = n.slots[t.slotName],
                r = e.inject(P);
            u(function () {
                return e.h('div', o(r.inputValue.value));
            });
        }
    }),
    P = Symbol.for('AutocompleteInstance'),
    L = r(r([], v, !0), ['suggest-select', 'suggest-opening', 'suggest-closing', 'suggest-open', 'suggest-close', 'suggest-caret-change', 'value-change', 'focusin', 'focusout'], !1),
    D = {
        label: {type: String, default: ''},
        placeholder: {type: String},
        labelField: {type: [String, Function], default: null},
        closeOnSelect: {type: Boolean, default: !0},
        closeOnFocusOut: {type: Boolean, default: !0},
        closeOnOutsideDown: {type: Boolean, default: !0},
        inputValue: {type: String, default: ''},
        minChar: {type: Number, default: 0},
        clearable: {type: Boolean, default: !1}
    },
    _ = {
        suggestSource: {type: [Array, Function, Promise]},
        suggestCount: {type: Number, default: 6},
        hookSuggestItems: {
            type: Function,
            default: function (t) {
                return e.isProxy(t) || (t = e.reactive(t)), t;
            }
        }
    };
function j(e) {
    return {
        clear: function () {
            e.clear();
        }
    };
}
function B(t, n) {
    var o = t.slots,
        r = o.nodata,
        a = o.progress;
    if (r || a) {
        var l = i.factory(t, A, i);
        e.onMounted(function () {
            r && (n.suggestNodataStateTemplate = l({slotName: 'nodata'}).element), a && (n.suggestProgressStateTemplate = l({slotName: 'progress'}).element);
        });
    }
}
var F = e.defineComponent({
        name: 'VxAutocomplete',
        emits: r(r([], L, !0), ['update:modelValue', 'update:selectedItem'], !1),
        props: o(o(o({}, D), _), {modelValue: {type: String}, selectedItem: {type: [String, Number, Object]}}),
        setup: function (n) {
            var r = e.getCurrentInstance(),
                l = new t.Autocomplete(),
                u = i.factory(r, k, c),
                s = a(l.suggestList.setOptions({resizable: !0, useAsync: !0}), u),
                d = s.itemTemplate,
                v = s.hookRenderElement,
                h = s.hookFreeElement;
            f(l, n), p(r.proxy, l, {events: L, options: o(o({}, n), {suggestItemTemplate: d, hookRenderSuggestElement: v, hookFreeSuggestElement: h})});
            var g = m(n, 'modelValue', l, 'inputValue', 'value-change');
            return (
                m(n, 'selectedItem', l, 'selectedItem', 'selection-change'),
                e.provide(P, {
                    get instance() {
                        return r;
                    },
                    get inputValue() {
                        return g;
                    }
                }),
                B(r, l),
                o({nativeInstance: l}, j(l))
            );
        },
        methods: {},
        render: function () {
            return e.h('div', {class: 'x-autocomplete-wrap'});
        }
    }),
    R = e.defineComponent({
        name: 'VxChip',
        props: {item: {type: [Object, String, Number]}, nativeInstance: {type: Object}},
        setup: function (t) {
            return {
                state: e.ref({}),
                slotProps: e.computed(function () {
                    return {
                        item: t.item,
                        label: t.nativeInstance.itemToLabel(t.item),
                        remove: function () {
                            return t.nativeInstance.removeSelectedItem(t.item);
                        }
                    };
                })
            };
        },
        methods: {
            genLabel: function () {
                return e.h('span', {class: 'x-label'}, this.slotProps.label);
            },
            genRemover: function () {
                return e.h('button', {
                    class: 'x-remover',
                    onMousedown: function (e) {
                        e.preventDefault();
                    },
                    onClick: function (e) {
                        e.preventDefault();
                    }
                });
            },
            genContent: function () {
                return this.$slots.chip ? this.$slots.chip(this.slotProps) : this.slotProps.item ? [this.genLabel(), this.genRemover()] : [this.genRemover()];
            }
        },
        render: function () {
            return e.h('div', {class: 'x-select-chip'}, this.genContent());
        }
    }),
    M = e.defineComponent({
        name: 'VxTokenizer',
        emits: r(r([], L, !0), ['update:modelValue', 'update:selectedItem', 'update:selectedItems', 'update:inputValue'], !1),
        props: o(o(o(o({}, D), _), h), {allowMultiple: {type: Boolean, default: !0}, allowInputValue: {type: Boolean, default: !1}}),
        setup: function (n, r) {
            var l = e.getCurrentInstance(),
                u = new t.Tokenizer(),
                s = i.factory(l, k, c),
                d = i.factory(l, R, c),
                v = a(u.suggestList.setOptions({resizable: !0, useAsync: !0}), s),
                h = v.itemTemplate,
                y = v.hookRenderElement,
                x = v.hookFreeElement;
            f(u, n),
                p(l.proxy, u, {
                    events: L,
                    options: o(o({}, n), {
                        chipTemplate: function (e, t) {
                            return d({item: e, nativeInstance: u}).element;
                        },
                        suggestItemTemplate: h,
                        hookRenderSuggestElement: y,
                        hookFreeSuggestElement: x
                    })
                }),
                g(n, u);
            var b = m(n, 'inputValue', u, 'inputValue', 'value-change');
            return (
                e.provide(P, {
                    get instance() {
                        return l;
                    },
                    get inputValue() {
                        return b;
                    }
                }),
                B(l, u),
                o({nativeInstance: u}, j(u))
            );
        },
        render: function () {
            return e.h('div', {class: 'x-tokenizer-wrap'});
        }
    }),
    $ = e.defineComponent({
        name: 'VxTextChip',
        props: {item: {type: [String, Number, Object]}, nativeInstance: {type: Object}},
        setup: function (t) {
            return {
                label: e.computed(function () {
                    return t.nativeInstance.itemToLabel(t.item);
                })
            };
        },
        methods: {
            genLabel: function () {
                return e.h('span', {class: 'x-label'}, this.label);
            },
            genContent: function () {
                return this.item ? (this.$slots.chip ? this.$slots.chip({item: this.item, label: this.label}) : [this.genLabel()]) : [];
            }
        },
        render: function () {
            return e.h('div', {class: 'x-select-text'}, this.genContent());
        }
    }),
    z = Symbol.for('ComboboxInstance'),
    U = e.defineComponent({
        name: 'VxCombobox',
        emits: r(r([], L, !0), ['update:modelValue', 'update:selectedItem', 'update:selectedItems', 'update:inputValue'], !1),
        props: o(o(o({}, D), h), {items: {type: Array}, filterable: {type: Boolean, default: !1}, removable: {type: Boolean, default: !1}}),
        setup: function (n, r) {
            var l = e.getCurrentInstance(),
                u = new t.Combobox(),
                s = i.factory(l, k, c),
                d = i.factory(l, R, c),
                v = i.factory(l, $, c),
                h = a(u.suggestList.setOptions({resizable: !0, useAsync: !0}), s),
                y = h.itemTemplate,
                x = h.hookRenderElement,
                b = h.hookFreeElement;
            return (
                f(u, n),
                p(l.proxy, u, {
                    events: L,
                    options: o(o({}, n), {
                        chipTemplate: function (e, t) {
                            return d({item: e, nativeInstance: u}).element;
                        },
                        singleChipTemplate: function (e, t) {
                            return v({item: e, nativeInstance: u}).element;
                        },
                        suggestItemTemplate: y,
                        hookRenderSuggestElement: x,
                        hookFreeSuggestElement: b
                    })
                }),
                g(n, u),
                m(n, 'inputValue', u, 'inputValue', 'value-change'),
                e.provide(z, {}),
                o({nativeInstance: u}, j(u))
            );
        },
        render: function () {
            return e.h('div', {class: 'x-combobox-wrap'});
        }
    }),
    H = e.defineComponent({
        name: 'VxDateChooserItem',
        props: o({}, l()),
        setup: function (t) {
            return {state: e.reactive(t.initState)};
        },
        methods: {
            genContent: function () {
                var e = [];
                return this.$slots.default && this.state.item && e.push(this.$slots.default(this.state)), e;
            }
        },
        render: function () {
            return e.h('div', this.genContent());
        },
        prepare: function (e) {
            for (var t in e) 'element' !== t && (this.state[t] = e[t]);
        }
    }),
    q = Symbol.for('DateChooserInstance'),
    G = ['state-change', 'item-down', 'item-click', 'selection-changing', 'selection-change'],
    X = {modelValue: {type: [Date, Object]}, type: {type: String, default: 'day'}, today: {type: Date, default: new Date()}, allowRange: {type: Boolean, default: !1}, allowDate: {type: Function}},
    Y = e.defineComponent({
        name: 'VxDateChooser',
        emits: r(r([], G, !0), ['update:modelValue'], !1),
        props: o({}, X),
        setup: function (n) {
            var r = e.getCurrentInstance(),
                l = new t.DateChooser(),
                u = null;
            if (r.slots.default) {
                var s = i.factory(r, H, c);
                u = o(o(o({}, n), a(l, s)), {useAsync: !0});
            } else u = n;
            return f(l, n), p(r.proxy, l, {events: G, options: u}), m(n, 'modelValue', l, n.allowRange ? 'selectedRange' : 'selectedDate', 'selection-change'), e.provide(q, {}), {nativeInstance: l};
        },
        methods: {
            getState: function () {
                return this.nativeInstance.state;
            },
            reset: function () {
                return this.nativeInstance.reset();
            },
            setCurrentDate: function (e) {
                return this.nativeInstance.setCurrentDate(e);
            }
        },
        render: function () {
            return e.h('div', {class: 'x-date-chooser-wrap'});
        }
    }),
    J = Symbol.for('DatePickerInstance'),
    K = r(r([], G, !0), ['date-picker-opening', 'date-picker-closing', 'date-picker-open', 'date-picker-close'], !1),
    Q = e.defineComponent({
        name: 'VxDatePicker',
        emits: r(r([], K, !0), ['update:modelValue'], !1),
        props: o(o({}, X), {label: {type: String, default: ''}, clearable: {type: Boolean, default: !1}}),
        setup: function (n) {
            var r = e.getCurrentInstance(),
                l = new t.DatePicker(),
                u = null;
            if (r.slots.default) {
                var s = a(l, i.factory(r, H, c)),
                    d = s.itemTemplate,
                    v = s.hookRenderElement,
                    h = s.hookFreeElement;
                u = o(o({}, n), {dateChooserItemTemplate: d, dateChooserHookRenderElement: v, dateChooserHookFreeElement: h});
            } else u = n;
            return f(l, n), p(r.proxy, l, {events: K, options: u}), m(n, 'modelValue', l, n.allowRange ? 'selectedRange' : 'selectedDate', 'selection-change'), e.provide(J, {}), {nativeInstance: l};
        },
        methods: {
            reset: function () {
                return this.nativeInstance.reset();
            },
            setCurrentDate: function (e) {
                return this.nativeInstance.setCurrentDate(e);
            }
        },
        render: function () {
            return e.h('div', {class: 'x-date-picker-wrap'});
        }
    }),
    W = Object.freeze({__proto__: null, VxList: I, VxTree: w, VxPopup: T, VxAutocomplete: F, VxTokenizer: M, VxCombobox: U, VxDateChooser: Y, VxDatePicker: Q});
(exports.VxAutocomplete = F),
    (exports.VxCombobox = U),
    (exports.VxDateChooser = Y),
    (exports.VxDatePicker = Q),
    (exports.VxList = I),
    (exports.VxPopup = T),
    (exports.VxTokenizer = M),
    (exports.VxTree = w),
    (exports.default = function (e) {
        Object.entries(W).forEach(function (t) {
            var n = t[0],
                o = t[1];
            e.component(n, o);
        });
    });
